/* Autogenerated from insts.td. DO NOT EDIT */
#include "psx.h"

// This is passed as an array of uint32_t
typedef struct state_s {
	uint32_t reg[32];
	uint32_t pc;
	uint32_t hi, lo;
	uint32_t fake; // Used for load delay stuff
} state_t;

jit_value_t _make_ptr(jit_function_t func, void *val) {
	return jit_value_create_nint_constant(func, jit_type_void_ptr, (jit_nint) val);
}
#define make_ptr(val) _make_ptr(func, (val))
jit_value_t _make_uint(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_uint, val);
}
#define make_uint(val) _make_uint(func, (val))
jit_value_t _make_ubyte(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_ubyte, val);
}
#define make_ubyte(val) _make_ubyte(func, (val))

#define LOAD(ptr, type) jit_insn_load_relative(func, (ptr), 0, type)
#define STORE(ptr, value) jit_insn_store_relative(func, (ptr), 0, (value))
#define CAST(value, type) jit_insn_convert(func, (value), (type), 0)

#define WGPR(gpr, val) do { if(gpr != 0) jit_insn_store_elem(func, state, make_uint(gpr), (val)); } while(0)
#define WGPR_VAL(gpr, val) jit_insn_store_elem(func, state, gpr, (val))
#define RGPR(gpr) ((gpr == 0) ? make_uint(0) : jit_insn_load_elem(func, state, make_uint(gpr), jit_type_uint))
#define TGPR(name, gpr) jit_value_t name = RGPR(gpr)

#define WPC(val) jit_insn_store_relative(func, state, 32*4, (val));
#define RPC() jit_insn_load_relative(func, state, 32*4, jit_type_uint)
#define WHI(val) jit_insn_store_relative(func, state, 33*4, (val));
#define RHI() jit_insn_load_relative(func, state, 33*4, jit_type_uint)
#define WLO(val) jit_insn_store_relative(func, state, 34*4, (val));
#define RLO() jit_insn_load_relative(func, state, 34*4, jit_type_uint)

#define DEP(gpr) do { if(gpr != 0) WRA(make_ubyte(gpr), make_ubyte(0)); } while(0)
#define RES(gpr) do { if(gpr != 0) WRA(make_ubyte(gpr), make_ubyte(0)); } while(0)

jit_type_t sig_0, sig_1, sig_1_ptr, sig_2, sig_3, sig_4, sig_5;
jit_value_t state, _ReadAbsorb, _ReadAbsorbWhich, _ReadFudge, LDWhich, LDValue, LDAbsorb;

#define RRA(idx) jit_insn_load_relative(func, jit_insn_add(func, _ReadAbsorb, idx), 0, jit_type_ubyte)
#define WRA(idx, val) jit_insn_store_relative(func, jit_insn_add(func, _ReadAbsorb, idx), 0, (val))

void do_lds(jit_function_t func) {
	jit_value_t ldw = LOAD(LDWhich, jit_type_uint), raw = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
	WGPR_VAL(ldw, LOAD(LDValue, jit_type_uint));
	WRA(ldw, jit_insn_load(func, LDAbsorb));
	STORE(_ReadFudge, CAST(ldw, jit_type_ubyte));
	jit_label_t label = jit_label_undefined;
	jit_insn_branch_if(func, jit_insn_eq(func, raw, make_uint(35)), &label);
	STORE(_ReadAbsorbWhich, CAST(jit_insn_or(func, raw, jit_insn_and(func, ldw, make_uint(0x1F))), jit_type_ubyte));
	jit_insn_label(func, &label);
	STORE(LDWhich, make_uint(35));
}
#define DO_LDS() do_lds(func)

void defer_set(jit_function_t func, int reg, jit_value_t val) {
    STORE(LDWhich, make_uint(reg));
	STORE(LDValue, val);
}

void call_store_memory(jit_function_t func, int size, jit_value_t ptr, jit_value_t val, uint32_t pc) {
	jit_value_t args[] = {make_uint(size), ptr, val, make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) store_memory, sig_4, args, 4, 0);
}

jit_value_t call_load_memory(jit_function_t func, int size, jit_value_t ptr, uint32_t pc) {
	jit_value_t args[] = {make_uint(size), ptr, make_uint(pc)};
	return jit_insn_call_native(func, 0, (void *) load_memory, sig_3, args, 3, 0);
}

jit_value_t call_read_copreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copreg, sig_2, args, 2, 0);
}

jit_value_t call_read_copcreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copcreg, sig_2, args, 2, 0);
}

void call_write_copreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copreg, sig_3, args, 3, 0);
}

void call_write_copcreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copcreg, sig_3, args, 3, 0);
}

jit_value_t call_copfun(jit_function_t func, int cop, int cofun, uint32_t inst) {
	jit_value_t args[] = {make_uint(cop), make_uint(cofun), make_uint(inst)};
	return jit_insn_call_native(func, 0, (void *) copfun, sig_3, args, 3, 0);
}

void call_step(jit_function_t func, uint32_t arg) {
	jit_value_t args[] = {make_uint(arg)};
	jit_insn_call_native(func, 0, (void *) step, sig_1, args, 1, 0);
}

jit_value_t call_signext(jit_function_t func, int size, jit_value_t val) {
	jit_value_t args[] = {make_uint(size), val};
	return jit_insn_call_native(func, 0, (void *) signext, sig_2, args, 2, 0);
}

void call_syscall(jit_function_t func, uint32_t code, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {make_uint(code), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) ps_syscall, sig_3, args, 3, 0);
}

void call_break(jit_function_t func, uint32_t code, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {make_uint(code), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) break_, sig_3, args, 3, 0);
}

void call_branch(jit_function_t func, jit_value_t val) {
	jit_value_t args[] = {val};
	jit_insn_call_native(func, 0, (void *) branch, sig_1, args, 1, 0);
}

void call_branch_block(jit_function_t func, block_t *block) {
	jit_value_t args[] = {make_ptr(block)};
	jit_insn_call_native(func, 0, (void *) branch_block, sig_1_ptr, args, 1, 0);
}

void call_overflow(jit_function_t func, jit_value_t a, jit_value_t b, int dir, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {a, b, make_uint(dir), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) overflow, sig_5, args, 5, 0);
}

void call_alignment(jit_function_t func, jit_value_t addr, int size, int store, uint32_t pc) {
	jit_value_t args[] = {addr, make_uint(size), make_uint(store), make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) alignment, sig_4, args, 4, 0);
}

void call_timestamp_inc(jit_function_t func, uint32_t amount) {
	jit_value_t args[] = {make_uint(amount)};
	jit_insn_call_native(func, 0, (void *) timestamp_inc, sig_1, args, 1, 0);
}

void call_mul_delay(jit_function_t func, jit_value_t a, jit_value_t b, int is_signed) {
	jit_value_t args[] = {a, b, make_uint(is_signed)};
	jit_insn_call_native(func, 0, (void *) mul_delay, sig_3, args, 3, 0);
}

void call_div_delay(jit_function_t func) {
	jit_insn_call_native(func, 0, (void *) div_delay, sig_0, NULL, 0, 0);
}

void call_absorb_muldiv_delay(jit_function_t func) {
	jit_insn_call_native(func, 0, (void *) absorb_muldiv_delay, sig_0, NULL, 0, 0);
}

void call_check_irq(jit_function_t func, uint32_t pc) {
	jit_value_t args[] = {make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) check_irq, sig_1, args, 1, 0);
}

jit_context_t context;

jit_type_t block_sig;

void init_decompiler() {
	context = jit_context_create();
	jit_context_build_start(context);

	jit_type_t s5params[5];
	s5params[0] = jit_type_uint;
	s5params[1] = jit_type_uint;
	s5params[2] = jit_type_uint;
	s5params[3] = jit_type_uint;
	s5params[4] = jit_type_uint;
	sig_5 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s5params, 5, 1);
	
	jit_type_t s4params[4];
	s4params[0] = jit_type_uint;
	s4params[1] = jit_type_uint;
	s4params[2] = jit_type_uint;
	s4params[3] = jit_type_uint;
	sig_4 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s4params, 4, 1);
	
	jit_type_t s3params[3];
	s3params[0] = jit_type_uint;
	s3params[1] = jit_type_uint;
	s3params[2] = jit_type_uint;
	sig_3 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s3params, 3, 1);
	
	jit_type_t sparams[2];
	sparams[0] = jit_type_uint;
	sparams[1] = jit_type_uint;
	sig_2 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, sparams, 2, 1);
	
	jit_type_t lparams[1];
	lparams[0] = jit_type_uint;
	sig_1 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, lparams, 1, 1);

	jit_type_t pparams[1];
	pparams[0] = jit_type_void_ptr;
	sig_1_ptr = jit_type_create_signature(jit_abi_cdecl, jit_type_void, pparams, 1, 1);

	sig_0 = jit_type_create_signature(jit_abi_cdecl, jit_type_void, NULL, 0, 1);

	jit_type_t params[7];
	params[0] = jit_type_create_pointer(jit_type_uint, 0); // State
	params[1] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadAbsorb
	params[2] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadAbsorbWhich
	params[3] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadFudge
	params[4] = jit_type_create_pointer(jit_type_uint, 0); // LDWhich
	params[5] = jit_type_create_pointer(jit_type_uint, 0); // LDValue
	params[6] = jit_type_create_pointer(jit_type_uint, 0); // LDAbsorb
	block_sig = jit_type_create_signature(jit_abi_cdecl, jit_type_void, params, 7, 1);
}

jit_function_t create_function() {
	jit_function_t func = jit_function_create(context, block_sig);
	state = jit_value_get_param(func, 0);
	_ReadAbsorb = jit_value_get_param(func, 1);
	_ReadAbsorbWhich = jit_value_get_param(func, 2);
	_ReadFudge = jit_value_get_param(func, 3);
	LDWhich = jit_value_get_param(func, 4);
	LDValue = jit_value_get_param(func, 5);
	LDAbsorb = jit_value_get_param(func, 6);
	return func;
}

block_func_t compile_function(jit_function_t func) {
	//jit_dump_function(stdout, func, "block");
	jit_function_compile(func);
	jit_context_build_end(context);
	//jit_dump_function(stdout, func, "block");
	return (block_func_t) jit_function_to_closure(func);
}

#define INSNLOG(name) printf(#name "\n")

bool decompile(jit_function_t func, uint32_t pc, uint32_t inst, bool &branched, bool &no_delay) {
	switch((inst) >> (0x1a)) {
		case 0x0: {
			switch((inst) & (0x3f)) {
				case 0x0: {
					/* SLL */
					jit_label_t temp_231 = jit_label_undefined, temp_232 = jit_label_undefined;
					jit_value_t temp_233 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_233, make_ubyte(0)), &temp_231);
					WRA(temp_233, jit_insn_sub(func, RRA(temp_233), make_ubyte(0)));
					jit_insn_branch(func, &temp_232);
					jit_insn_label(func, &temp_231);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_232);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					TGPR(temp_116, rt);
					DO_LDS();
					WGPR(rd, jit_insn_shl(func, temp_116, make_uint(shamt)));
					return(true);
					break;
				}
				case 0x2: {
					/* SRL */
					jit_label_t temp_234 = jit_label_undefined, temp_235 = jit_label_undefined;
					jit_value_t temp_236 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_236, make_ubyte(0)), &temp_234);
					WRA(temp_236, jit_insn_sub(func, RRA(temp_236), make_ubyte(0)));
					jit_insn_branch(func, &temp_235);
					jit_insn_label(func, &temp_234);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_235);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					TGPR(temp_117, rt);
					DO_LDS();
					WGPR(rd, jit_insn_ushr(func, temp_117, make_uint(shamt)));
					return(true);
					break;
				}
				case 0x3: {
					/* SRA */
					jit_label_t temp_237 = jit_label_undefined, temp_238 = jit_label_undefined;
					jit_value_t temp_239 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_239, make_ubyte(0)), &temp_237);
					WRA(temp_239, jit_insn_sub(func, RRA(temp_239), make_ubyte(0)));
					jit_insn_branch(func, &temp_238);
					jit_insn_label(func, &temp_237);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_238);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					TGPR(temp_118, rt);
					DO_LDS();
					WGPR(rd, jit_insn_sshr(func, temp_118, make_uint(shamt)));
					return(true);
					break;
				}
				case 0x4: {
					/* SLLV */
					jit_label_t temp_240 = jit_label_undefined, temp_241 = jit_label_undefined;
					jit_value_t temp_242 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_242, make_ubyte(0)), &temp_240);
					WRA(temp_242, jit_insn_sub(func, RRA(temp_242), make_ubyte(0)));
					jit_insn_branch(func, &temp_241);
					jit_insn_label(func, &temp_240);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_241);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_119, rs);
					TGPR(temp_120, rt);
					DO_LDS();
					WGPR(rd, jit_insn_shl(func, temp_120, temp_119));
					return(true);
					break;
				}
				case 0x6: {
					/* SRLV */
					jit_label_t temp_243 = jit_label_undefined, temp_244 = jit_label_undefined;
					jit_value_t temp_245 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_245, make_ubyte(0)), &temp_243);
					WRA(temp_245, jit_insn_sub(func, RRA(temp_245), make_ubyte(0)));
					jit_insn_branch(func, &temp_244);
					jit_insn_label(func, &temp_243);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_244);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_121, rs);
					TGPR(temp_122, rt);
					DO_LDS();
					WGPR(rd, jit_insn_ushr(func, temp_122, temp_121));
					return(true);
					break;
				}
				case 0x7: {
					/* SRAV */
					jit_label_t temp_246 = jit_label_undefined, temp_247 = jit_label_undefined;
					jit_value_t temp_248 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_248, make_ubyte(0)), &temp_246);
					WRA(temp_248, jit_insn_sub(func, RRA(temp_248), make_ubyte(0)));
					jit_insn_branch(func, &temp_247);
					jit_insn_label(func, &temp_246);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_247);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_123, rs);
					TGPR(temp_124, rt);
					DO_LDS();
					WGPR(rd, jit_insn_sshr(func, temp_124, temp_123));
					return(true);
					break;
				}
				case 0x8: {
					/* JR */
					jit_label_t temp_249 = jit_label_undefined, temp_250 = jit_label_undefined;
					jit_value_t temp_251 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_251, make_ubyte(0)), &temp_249);
					WRA(temp_251, jit_insn_sub(func, RRA(temp_251), make_ubyte(0)));
					jit_insn_branch(func, &temp_250);
					jit_insn_label(func, &temp_249);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_250);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					DEP(rs);
					TGPR(temp_125, rs);
					DO_LDS();
					call_alignment(func, temp_125, 32, 0, pc);
					if(!branched) call_branch(func, temp_125);
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* JALR */
					jit_label_t temp_252 = jit_label_undefined, temp_253 = jit_label_undefined;
					jit_value_t temp_254 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_254, make_ubyte(0)), &temp_252);
					WRA(temp_254, jit_insn_sub(func, RRA(temp_254), make_ubyte(0)));
					jit_insn_branch(func, &temp_253);
					jit_insn_label(func, &temp_252);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_253);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					RES(rd);
					TGPR(temp_126, rs);
					DO_LDS();
					WGPR(rd, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					call_alignment(func, temp_126, 32, 0, pc);
					if(!branched) call_branch(func, temp_126);
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* SYSCALL */
					jit_label_t temp_255 = jit_label_undefined, temp_256 = jit_label_undefined;
					jit_value_t temp_257 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_257, make_ubyte(0)), &temp_255);
					WRA(temp_257, jit_insn_sub(func, RRA(temp_257), make_ubyte(0)));
					jit_insn_branch(func, &temp_256);
					jit_insn_label(func, &temp_255);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_256);
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					DO_LDS();
					call_syscall(func, code, pc, inst);
					branched = true;
					no_delay = true;
					return(true);
					break;
				}
				case 0xd: {
					/* BREAK */
					jit_label_t temp_258 = jit_label_undefined, temp_259 = jit_label_undefined;
					jit_value_t temp_260 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_260, make_ubyte(0)), &temp_258);
					WRA(temp_260, jit_insn_sub(func, RRA(temp_260), make_ubyte(0)));
					jit_insn_branch(func, &temp_259);
					jit_insn_label(func, &temp_258);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_259);
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					DO_LDS();
					call_break(func, code, pc, inst);
					branched = true;
					no_delay = true;
					return(true);
					break;
				}
				case 0x10: {
					/* MFHI */
					jit_label_t temp_261 = jit_label_undefined, temp_262 = jit_label_undefined;
					jit_value_t temp_263 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_263, make_ubyte(0)), &temp_261);
					WRA(temp_263, jit_insn_sub(func, RRA(temp_263), make_ubyte(0)));
					jit_insn_branch(func, &temp_262);
					jit_insn_label(func, &temp_261);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_262);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rd);
					DO_LDS();
					WGPR(rd, RHI());
					call_absorb_muldiv_delay(func);
					return(true);
					break;
				}
				case 0x11: {
					/* MTHI */
					jit_label_t temp_264 = jit_label_undefined, temp_265 = jit_label_undefined;
					jit_value_t temp_266 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_266, make_ubyte(0)), &temp_264);
					WRA(temp_266, jit_insn_sub(func, RRA(temp_266), make_ubyte(0)));
					jit_insn_branch(func, &temp_265);
					jit_insn_label(func, &temp_264);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_265);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rd);
					TGPR(temp_127, rd);
					DO_LDS();
					WHI(temp_127)
					return(true);
					break;
				}
				case 0x12: {
					/* MFLO */
					jit_label_t temp_267 = jit_label_undefined, temp_268 = jit_label_undefined;
					jit_value_t temp_269 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_269, make_ubyte(0)), &temp_267);
					WRA(temp_269, jit_insn_sub(func, RRA(temp_269), make_ubyte(0)));
					jit_insn_branch(func, &temp_268);
					jit_insn_label(func, &temp_267);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_268);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rd);
					DO_LDS();
					WGPR(rd, RLO());
					call_absorb_muldiv_delay(func);
					return(true);
					break;
				}
				case 0x13: {
					/* MTLO */
					jit_label_t temp_270 = jit_label_undefined, temp_271 = jit_label_undefined;
					jit_value_t temp_272 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_272, make_ubyte(0)), &temp_270);
					WRA(temp_272, jit_insn_sub(func, RRA(temp_272), make_ubyte(0)));
					jit_insn_branch(func, &temp_271);
					jit_insn_label(func, &temp_270);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_271);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rd);
					TGPR(temp_128, rd);
					DO_LDS();
					WLO(temp_128)
					return(true);
					break;
				}
				case 0x18: {
					/* MULT */
					jit_label_t temp_273 = jit_label_undefined, temp_274 = jit_label_undefined;
					jit_value_t temp_275 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_275, make_ubyte(0)), &temp_273);
					WRA(temp_275, jit_insn_sub(func, RRA(temp_275), make_ubyte(0)));
					jit_insn_branch(func, &temp_274);
					jit_insn_label(func, &temp_273);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_274);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_129, rs);
					TGPR(temp_130, rt);
					DO_LDS();
					jit_value_t _t = jit_insn_mul(func, jit_insn_convert(func, jit_insn_convert(func, temp_129, jit_type_int, 0), jit_type_long, 0), jit_insn_convert(func, jit_insn_convert(func, temp_130, jit_type_int, 0), jit_type_long, 0));
					WLO(jit_insn_convert(func, _t, jit_type_uint, 0))
					WHI(jit_insn_convert(func, jit_insn_ushr(func, _t, make_uint(0x20)), jit_type_uint, 0))
					call_mul_delay(func, temp_129, temp_130, 0x1);
					return(true);
					break;
				}
				case 0x19: {
					/* MULTU */
					jit_label_t temp_276 = jit_label_undefined, temp_277 = jit_label_undefined;
					jit_value_t temp_278 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_278, make_ubyte(0)), &temp_276);
					WRA(temp_278, jit_insn_sub(func, RRA(temp_278), make_ubyte(0)));
					jit_insn_branch(func, &temp_277);
					jit_insn_label(func, &temp_276);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_277);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_131, rs);
					TGPR(temp_132, rt);
					DO_LDS();
					jit_value_t _t = jit_insn_mul(func, jit_insn_convert(func, temp_131, jit_type_ulong, 0), jit_insn_convert(func, temp_132, jit_type_ulong, 0));
					WLO(jit_insn_convert(func, _t, jit_type_uint, 0))
					WHI(jit_insn_convert(func, jit_insn_ushr(func, _t, make_uint(0x20)), jit_type_uint, 0))
					call_mul_delay(func, temp_131, temp_132, 0x0);
					return(true);
					break;
				}
				case 0x1a: {
					/* DIV */
					jit_label_t temp_279 = jit_label_undefined, temp_280 = jit_label_undefined;
					jit_value_t temp_281 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_281, make_ubyte(0)), &temp_279);
					WRA(temp_281, jit_insn_sub(func, RRA(temp_281), make_ubyte(0)));
					jit_insn_branch(func, &temp_280);
					jit_insn_label(func, &temp_279);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_280);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_133, rs);
					TGPR(temp_134, rt);
					DO_LDS();
					jit_label_t temp_282 = jit_label_undefined, temp_283 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, temp_134, make_uint(0x0)), &temp_282);
					jit_label_t temp_284 = jit_label_undefined, temp_285 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_and(func, jit_insn_eq(func, temp_133, make_uint(0x80000000)), jit_insn_eq(func, temp_134, make_uint(0xffffffff))), &temp_284);
					WLO(jit_insn_div(func, jit_insn_convert(func, temp_133, jit_type_int, 0), jit_insn_convert(func, temp_134, jit_type_int, 0)))
					WHI(jit_insn_rem(func, jit_insn_convert(func, temp_133, jit_type_int, 0), jit_insn_convert(func, temp_134, jit_type_int, 0)))
					call_div_delay(func);
					jit_insn_branch(func, &temp_285);
					jit_insn_label(func, &temp_284);
					WLO(make_uint(0x80000000))
					WHI(make_uint(0x0))
					jit_insn_label(func, &temp_285);
					jit_insn_branch(func, &temp_283);
					jit_insn_label(func, &temp_282);
					jit_label_t temp_286 = jit_label_undefined, temp_287 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ne(func, jit_insn_and(func, temp_133, make_uint(0x80000000)), make_uint(0x0)), &temp_286);
					WLO(make_uint(0xffffffff))
					jit_insn_branch(func, &temp_287);
					jit_insn_label(func, &temp_286);
					WLO(make_uint(0x1))
					jit_insn_label(func, &temp_287);
					WHI(temp_133)
					jit_insn_label(func, &temp_283);
					return(true);
					break;
				}
				case 0x1b: {
					/* DIVU */
					jit_label_t temp_288 = jit_label_undefined, temp_289 = jit_label_undefined;
					jit_value_t temp_290 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_290, make_ubyte(0)), &temp_288);
					WRA(temp_290, jit_insn_sub(func, RRA(temp_290), make_ubyte(0)));
					jit_insn_branch(func, &temp_289);
					jit_insn_label(func, &temp_288);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_289);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_135, rs);
					TGPR(temp_136, rt);
					DO_LDS();
					jit_label_t temp_291 = jit_label_undefined, temp_292 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, temp_136, make_uint(0x0)), &temp_291);
					WLO(jit_insn_div(func, temp_135, temp_136))
					WHI(jit_insn_rem(func, temp_135, temp_136))
					call_div_delay(func);
					jit_insn_branch(func, &temp_292);
					jit_insn_label(func, &temp_291);
					WLO(make_uint(0xffffffff))
					WHI(temp_135)
					jit_insn_label(func, &temp_292);
					return(true);
					break;
				}
				case 0x20: {
					/* ADD */
					jit_label_t temp_293 = jit_label_undefined, temp_294 = jit_label_undefined;
					jit_value_t temp_295 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_295, make_ubyte(0)), &temp_293);
					WRA(temp_295, jit_insn_sub(func, RRA(temp_295), make_ubyte(0)));
					jit_insn_branch(func, &temp_294);
					jit_insn_label(func, &temp_293);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_294);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_137, rs);
					TGPR(temp_138, rt);
					DO_LDS();
					call_overflow(func, temp_137, temp_138, 1, pc, inst);
					WGPR(rd, jit_insn_add(func, temp_137, temp_138));
					return(true);
					break;
				}
				case 0x21: {
					/* ADDU */
					jit_label_t temp_296 = jit_label_undefined, temp_297 = jit_label_undefined;
					jit_value_t temp_298 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_298, make_ubyte(0)), &temp_296);
					WRA(temp_298, jit_insn_sub(func, RRA(temp_298), make_ubyte(0)));
					jit_insn_branch(func, &temp_297);
					jit_insn_label(func, &temp_296);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_297);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_139, rs);
					TGPR(temp_140, rt);
					DO_LDS();
					WGPR(rd, jit_insn_add(func, temp_139, temp_140));
					return(true);
					break;
				}
				case 0x22: {
					/* SUB */
					jit_label_t temp_299 = jit_label_undefined, temp_300 = jit_label_undefined;
					jit_value_t temp_301 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_301, make_ubyte(0)), &temp_299);
					WRA(temp_301, jit_insn_sub(func, RRA(temp_301), make_ubyte(0)));
					jit_insn_branch(func, &temp_300);
					jit_insn_label(func, &temp_299);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_300);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_141, rs);
					TGPR(temp_142, rt);
					DO_LDS();
					call_overflow(func, temp_141, temp_142, -1, pc, inst);
					WGPR(rd, jit_insn_sub(func, temp_141, temp_142));
					return(true);
					break;
				}
				case 0x23: {
					/* SUBU */
					jit_label_t temp_302 = jit_label_undefined, temp_303 = jit_label_undefined;
					jit_value_t temp_304 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_304, make_ubyte(0)), &temp_302);
					WRA(temp_304, jit_insn_sub(func, RRA(temp_304), make_ubyte(0)));
					jit_insn_branch(func, &temp_303);
					jit_insn_label(func, &temp_302);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_303);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_143, rs);
					TGPR(temp_144, rt);
					DO_LDS();
					WGPR(rd, jit_insn_sub(func, temp_143, temp_144));
					return(true);
					break;
				}
				case 0x24: {
					/* AND */
					jit_label_t temp_305 = jit_label_undefined, temp_306 = jit_label_undefined;
					jit_value_t temp_307 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_307, make_ubyte(0)), &temp_305);
					WRA(temp_307, jit_insn_sub(func, RRA(temp_307), make_ubyte(0)));
					jit_insn_branch(func, &temp_306);
					jit_insn_label(func, &temp_305);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_306);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_145, rs);
					TGPR(temp_146, rt);
					DO_LDS();
					WGPR(rd, jit_insn_and(func, temp_145, temp_146));
					return(true);
					break;
				}
				case 0x25: {
					/* OR */
					jit_label_t temp_308 = jit_label_undefined, temp_309 = jit_label_undefined;
					jit_value_t temp_310 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_310, make_ubyte(0)), &temp_308);
					WRA(temp_310, jit_insn_sub(func, RRA(temp_310), make_ubyte(0)));
					jit_insn_branch(func, &temp_309);
					jit_insn_label(func, &temp_308);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_309);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_147, rs);
					TGPR(temp_148, rt);
					DO_LDS();
					WGPR(rd, jit_insn_or(func, temp_147, temp_148));
					return(true);
					break;
				}
				case 0x26: {
					/* XOR */
					jit_label_t temp_311 = jit_label_undefined, temp_312 = jit_label_undefined;
					jit_value_t temp_313 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_313, make_ubyte(0)), &temp_311);
					WRA(temp_313, jit_insn_sub(func, RRA(temp_313), make_ubyte(0)));
					jit_insn_branch(func, &temp_312);
					jit_insn_label(func, &temp_311);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_312);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_149, rs);
					TGPR(temp_150, rt);
					DO_LDS();
					WGPR(rd, jit_insn_xor(func, temp_149, temp_150));
					return(true);
					break;
				}
				case 0x27: {
					/* NOR */
					jit_label_t temp_314 = jit_label_undefined, temp_315 = jit_label_undefined;
					jit_value_t temp_316 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_316, make_ubyte(0)), &temp_314);
					WRA(temp_316, jit_insn_sub(func, RRA(temp_316), make_ubyte(0)));
					jit_insn_branch(func, &temp_315);
					jit_insn_label(func, &temp_314);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_315);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_151, rs);
					TGPR(temp_152, rt);
					DO_LDS();
					WGPR(rd, jit_insn_not(func, jit_insn_or(func, temp_151, temp_152)));
					return(true);
					break;
				}
				case 0x2a: {
					/* SLT */
					jit_label_t temp_317 = jit_label_undefined, temp_318 = jit_label_undefined;
					jit_value_t temp_319 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_319, make_ubyte(0)), &temp_317);
					WRA(temp_319, jit_insn_sub(func, RRA(temp_319), make_ubyte(0)));
					jit_insn_branch(func, &temp_318);
					jit_insn_label(func, &temp_317);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_318);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_153, rs);
					TGPR(temp_154, rt);
					DO_LDS();
					WGPR(rd, jit_insn_lt(func, jit_insn_convert(func, temp_153, jit_type_int, 0), jit_insn_convert(func, temp_154, jit_type_int, 0)));
					return(true);
					break;
				}
				case 0x2b: {
					/* SLTU */
					jit_label_t temp_320 = jit_label_undefined, temp_321 = jit_label_undefined;
					jit_value_t temp_322 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_322, make_ubyte(0)), &temp_320);
					WRA(temp_322, jit_insn_sub(func, RRA(temp_322), make_ubyte(0)));
					jit_insn_branch(func, &temp_321);
					jit_insn_label(func, &temp_320);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_321);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_155, rs);
					TGPR(temp_156, rt);
					DO_LDS();
					WGPR(rd, jit_insn_lt(func, temp_155, temp_156));
					return(true);
					break;
				}
			}
			break;
		}
		case 0x1: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLTZanonymous_0 */
					jit_label_t temp_323 = jit_label_undefined, temp_324 = jit_label_undefined;
					jit_value_t temp_325 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_325, make_ubyte(0)), &temp_323);
					WRA(temp_325, jit_insn_sub(func, RRA(temp_325), make_ubyte(0)));
					jit_insn_branch(func, &temp_324);
					jit_insn_label(func, &temp_323);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_324);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_157, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_326 = jit_label_undefined, temp_327 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_157, jit_type_int, 0), make_uint(0x0)), &temp_326);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_327);
					jit_insn_label(func, &temp_326);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_327);
					branched = true;
					return(true);
					break;
				}
				case 0x1: {
					/* BGEZanonymous_0 */
					jit_label_t temp_328 = jit_label_undefined, temp_329 = jit_label_undefined;
					jit_value_t temp_330 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_330, make_ubyte(0)), &temp_328);
					WRA(temp_330, jit_insn_sub(func, RRA(temp_330), make_ubyte(0)));
					jit_insn_branch(func, &temp_329);
					jit_insn_label(func, &temp_328);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_329);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_158, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_331 = jit_label_undefined, temp_332 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_158, jit_type_int, 0), make_uint(0x0)), &temp_331);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_332);
					jit_insn_label(func, &temp_331);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_332);
					branched = true;
					return(true);
					break;
				}
				case 0x2: {
					/* BLTZanonymous_1 */
					jit_label_t temp_333 = jit_label_undefined, temp_334 = jit_label_undefined;
					jit_value_t temp_335 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_335, make_ubyte(0)), &temp_333);
					WRA(temp_335, jit_insn_sub(func, RRA(temp_335), make_ubyte(0)));
					jit_insn_branch(func, &temp_334);
					jit_insn_label(func, &temp_333);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_334);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_159, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_336 = jit_label_undefined, temp_337 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_159, jit_type_int, 0), make_uint(0x0)), &temp_336);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_337);
					jit_insn_label(func, &temp_336);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_337);
					branched = true;
					return(true);
					break;
				}
				case 0x3: {
					/* BGEZanonymous_1 */
					jit_label_t temp_338 = jit_label_undefined, temp_339 = jit_label_undefined;
					jit_value_t temp_340 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_340, make_ubyte(0)), &temp_338);
					WRA(temp_340, jit_insn_sub(func, RRA(temp_340), make_ubyte(0)));
					jit_insn_branch(func, &temp_339);
					jit_insn_label(func, &temp_338);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_339);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_160, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_341 = jit_label_undefined, temp_342 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_160, jit_type_int, 0), make_uint(0x0)), &temp_341);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_342);
					jit_insn_label(func, &temp_341);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_342);
					branched = true;
					return(true);
					break;
				}
				case 0x4: {
					/* BLTZanonymous_2 */
					jit_label_t temp_343 = jit_label_undefined, temp_344 = jit_label_undefined;
					jit_value_t temp_345 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_345, make_ubyte(0)), &temp_343);
					WRA(temp_345, jit_insn_sub(func, RRA(temp_345), make_ubyte(0)));
					jit_insn_branch(func, &temp_344);
					jit_insn_label(func, &temp_343);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_344);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_161, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_346 = jit_label_undefined, temp_347 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_161, jit_type_int, 0), make_uint(0x0)), &temp_346);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_347);
					jit_insn_label(func, &temp_346);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_347);
					branched = true;
					return(true);
					break;
				}
				case 0x5: {
					/* BGEZanonymous_2 */
					jit_label_t temp_348 = jit_label_undefined, temp_349 = jit_label_undefined;
					jit_value_t temp_350 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_350, make_ubyte(0)), &temp_348);
					WRA(temp_350, jit_insn_sub(func, RRA(temp_350), make_ubyte(0)));
					jit_insn_branch(func, &temp_349);
					jit_insn_label(func, &temp_348);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_349);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_162, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_351 = jit_label_undefined, temp_352 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_162, jit_type_int, 0), make_uint(0x0)), &temp_351);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_352);
					jit_insn_label(func, &temp_351);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_352);
					branched = true;
					return(true);
					break;
				}
				case 0x6: {
					/* BLTZanonymous_3 */
					jit_label_t temp_353 = jit_label_undefined, temp_354 = jit_label_undefined;
					jit_value_t temp_355 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_355, make_ubyte(0)), &temp_353);
					WRA(temp_355, jit_insn_sub(func, RRA(temp_355), make_ubyte(0)));
					jit_insn_branch(func, &temp_354);
					jit_insn_label(func, &temp_353);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_354);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_163, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_356 = jit_label_undefined, temp_357 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_163, jit_type_int, 0), make_uint(0x0)), &temp_356);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_357);
					jit_insn_label(func, &temp_356);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_357);
					branched = true;
					return(true);
					break;
				}
				case 0x7: {
					/* BGEZanonymous_3 */
					jit_label_t temp_358 = jit_label_undefined, temp_359 = jit_label_undefined;
					jit_value_t temp_360 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_360, make_ubyte(0)), &temp_358);
					WRA(temp_360, jit_insn_sub(func, RRA(temp_360), make_ubyte(0)));
					jit_insn_branch(func, &temp_359);
					jit_insn_label(func, &temp_358);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_359);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_164, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_361 = jit_label_undefined, temp_362 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_164, jit_type_int, 0), make_uint(0x0)), &temp_361);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_362);
					jit_insn_label(func, &temp_361);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_362);
					branched = true;
					return(true);
					break;
				}
				case 0x8: {
					/* BLTZanonymous_4 */
					jit_label_t temp_363 = jit_label_undefined, temp_364 = jit_label_undefined;
					jit_value_t temp_365 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_365, make_ubyte(0)), &temp_363);
					WRA(temp_365, jit_insn_sub(func, RRA(temp_365), make_ubyte(0)));
					jit_insn_branch(func, &temp_364);
					jit_insn_label(func, &temp_363);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_364);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_165, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_366 = jit_label_undefined, temp_367 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_165, jit_type_int, 0), make_uint(0x0)), &temp_366);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_367);
					jit_insn_label(func, &temp_366);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_367);
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* BGEZanonymous_4 */
					jit_label_t temp_368 = jit_label_undefined, temp_369 = jit_label_undefined;
					jit_value_t temp_370 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_370, make_ubyte(0)), &temp_368);
					WRA(temp_370, jit_insn_sub(func, RRA(temp_370), make_ubyte(0)));
					jit_insn_branch(func, &temp_369);
					jit_insn_label(func, &temp_368);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_369);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_166, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_371 = jit_label_undefined, temp_372 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_166, jit_type_int, 0), make_uint(0x0)), &temp_371);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_372);
					jit_insn_label(func, &temp_371);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_372);
					branched = true;
					return(true);
					break;
				}
				case 0xa: {
					/* BLTZanonymous_5 */
					jit_label_t temp_373 = jit_label_undefined, temp_374 = jit_label_undefined;
					jit_value_t temp_375 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_375, make_ubyte(0)), &temp_373);
					WRA(temp_375, jit_insn_sub(func, RRA(temp_375), make_ubyte(0)));
					jit_insn_branch(func, &temp_374);
					jit_insn_label(func, &temp_373);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_374);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_167, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_376 = jit_label_undefined, temp_377 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_167, jit_type_int, 0), make_uint(0x0)), &temp_376);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_377);
					jit_insn_label(func, &temp_376);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_377);
					branched = true;
					return(true);
					break;
				}
				case 0xb: {
					/* BGEZanonymous_5 */
					jit_label_t temp_378 = jit_label_undefined, temp_379 = jit_label_undefined;
					jit_value_t temp_380 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_380, make_ubyte(0)), &temp_378);
					WRA(temp_380, jit_insn_sub(func, RRA(temp_380), make_ubyte(0)));
					jit_insn_branch(func, &temp_379);
					jit_insn_label(func, &temp_378);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_379);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_168, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_381 = jit_label_undefined, temp_382 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_168, jit_type_int, 0), make_uint(0x0)), &temp_381);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_382);
					jit_insn_label(func, &temp_381);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_382);
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* BLTZanonymous_6 */
					jit_label_t temp_383 = jit_label_undefined, temp_384 = jit_label_undefined;
					jit_value_t temp_385 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_385, make_ubyte(0)), &temp_383);
					WRA(temp_385, jit_insn_sub(func, RRA(temp_385), make_ubyte(0)));
					jit_insn_branch(func, &temp_384);
					jit_insn_label(func, &temp_383);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_384);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_169, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_386 = jit_label_undefined, temp_387 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_169, jit_type_int, 0), make_uint(0x0)), &temp_386);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_387);
					jit_insn_label(func, &temp_386);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_387);
					branched = true;
					return(true);
					break;
				}
				case 0xd: {
					/* BGEZanonymous_6 */
					jit_label_t temp_388 = jit_label_undefined, temp_389 = jit_label_undefined;
					jit_value_t temp_390 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_390, make_ubyte(0)), &temp_388);
					WRA(temp_390, jit_insn_sub(func, RRA(temp_390), make_ubyte(0)));
					jit_insn_branch(func, &temp_389);
					jit_insn_label(func, &temp_388);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_389);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_170, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_391 = jit_label_undefined, temp_392 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_170, jit_type_int, 0), make_uint(0x0)), &temp_391);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_392);
					jit_insn_label(func, &temp_391);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_392);
					branched = true;
					return(true);
					break;
				}
				case 0xe: {
					/* BLTZanonymous_7 */
					jit_label_t temp_393 = jit_label_undefined, temp_394 = jit_label_undefined;
					jit_value_t temp_395 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_395, make_ubyte(0)), &temp_393);
					WRA(temp_395, jit_insn_sub(func, RRA(temp_395), make_ubyte(0)));
					jit_insn_branch(func, &temp_394);
					jit_insn_label(func, &temp_393);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_394);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_171, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_396 = jit_label_undefined, temp_397 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_171, jit_type_int, 0), make_uint(0x0)), &temp_396);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_397);
					jit_insn_label(func, &temp_396);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_397);
					branched = true;
					return(true);
					break;
				}
				case 0xf: {
					/* BGEZanonymous_7 */
					jit_label_t temp_398 = jit_label_undefined, temp_399 = jit_label_undefined;
					jit_value_t temp_400 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_400, make_ubyte(0)), &temp_398);
					WRA(temp_400, jit_insn_sub(func, RRA(temp_400), make_ubyte(0)));
					jit_insn_branch(func, &temp_399);
					jit_insn_label(func, &temp_398);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_399);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_172, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_401 = jit_label_undefined, temp_402 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_172, jit_type_int, 0), make_uint(0x0)), &temp_401);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_402);
					jit_insn_label(func, &temp_401);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_402);
					branched = true;
					return(true);
					break;
				}
				case 0x10: {
					/* BLTZALanonymous_0 */
					jit_label_t temp_403 = jit_label_undefined, temp_404 = jit_label_undefined;
					jit_value_t temp_405 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_405, make_ubyte(0)), &temp_403);
					WRA(temp_405, jit_insn_sub(func, RRA(temp_405), make_ubyte(0)));
					jit_insn_branch(func, &temp_404);
					jit_insn_label(func, &temp_403);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_404);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_173, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_406 = jit_label_undefined, temp_407 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_173, jit_type_int, 0), make_uint(0x0)), &temp_406);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_407);
					jit_insn_label(func, &temp_406);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_407);
					branched = true;
					return(true);
					break;
				}
				case 0x11: {
					/* BGEZALanonymous_0 */
					jit_label_t temp_408 = jit_label_undefined, temp_409 = jit_label_undefined;
					jit_value_t temp_410 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_410, make_ubyte(0)), &temp_408);
					WRA(temp_410, jit_insn_sub(func, RRA(temp_410), make_ubyte(0)));
					jit_insn_branch(func, &temp_409);
					jit_insn_label(func, &temp_408);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_409);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_174, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_411 = jit_label_undefined, temp_412 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_174, jit_type_int, 0), make_uint(0x0)), &temp_411);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_412);
					jit_insn_label(func, &temp_411);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_412);
					branched = true;
					return(true);
					break;
				}
				case 0x12: {
					/* BLTZALanonymous_1 */
					jit_label_t temp_413 = jit_label_undefined, temp_414 = jit_label_undefined;
					jit_value_t temp_415 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_415, make_ubyte(0)), &temp_413);
					WRA(temp_415, jit_insn_sub(func, RRA(temp_415), make_ubyte(0)));
					jit_insn_branch(func, &temp_414);
					jit_insn_label(func, &temp_413);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_414);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_175, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_416 = jit_label_undefined, temp_417 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_175, jit_type_int, 0), make_uint(0x0)), &temp_416);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_417);
					jit_insn_label(func, &temp_416);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_417);
					branched = true;
					return(true);
					break;
				}
				case 0x13: {
					/* BGEZALanonymous_1 */
					jit_label_t temp_418 = jit_label_undefined, temp_419 = jit_label_undefined;
					jit_value_t temp_420 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_420, make_ubyte(0)), &temp_418);
					WRA(temp_420, jit_insn_sub(func, RRA(temp_420), make_ubyte(0)));
					jit_insn_branch(func, &temp_419);
					jit_insn_label(func, &temp_418);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_419);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_176, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_421 = jit_label_undefined, temp_422 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_176, jit_type_int, 0), make_uint(0x0)), &temp_421);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_422);
					jit_insn_label(func, &temp_421);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_422);
					branched = true;
					return(true);
					break;
				}
				case 0x14: {
					/* BLTZALanonymous_2 */
					jit_label_t temp_423 = jit_label_undefined, temp_424 = jit_label_undefined;
					jit_value_t temp_425 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_425, make_ubyte(0)), &temp_423);
					WRA(temp_425, jit_insn_sub(func, RRA(temp_425), make_ubyte(0)));
					jit_insn_branch(func, &temp_424);
					jit_insn_label(func, &temp_423);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_424);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_177, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_426 = jit_label_undefined, temp_427 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_177, jit_type_int, 0), make_uint(0x0)), &temp_426);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_427);
					jit_insn_label(func, &temp_426);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_427);
					branched = true;
					return(true);
					break;
				}
				case 0x15: {
					/* BGEZALanonymous_2 */
					jit_label_t temp_428 = jit_label_undefined, temp_429 = jit_label_undefined;
					jit_value_t temp_430 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_430, make_ubyte(0)), &temp_428);
					WRA(temp_430, jit_insn_sub(func, RRA(temp_430), make_ubyte(0)));
					jit_insn_branch(func, &temp_429);
					jit_insn_label(func, &temp_428);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_429);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_178, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_431 = jit_label_undefined, temp_432 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_178, jit_type_int, 0), make_uint(0x0)), &temp_431);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_432);
					jit_insn_label(func, &temp_431);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_432);
					branched = true;
					return(true);
					break;
				}
				case 0x16: {
					/* BLTZALanonymous_3 */
					jit_label_t temp_433 = jit_label_undefined, temp_434 = jit_label_undefined;
					jit_value_t temp_435 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_435, make_ubyte(0)), &temp_433);
					WRA(temp_435, jit_insn_sub(func, RRA(temp_435), make_ubyte(0)));
					jit_insn_branch(func, &temp_434);
					jit_insn_label(func, &temp_433);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_434);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_179, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_436 = jit_label_undefined, temp_437 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_179, jit_type_int, 0), make_uint(0x0)), &temp_436);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_437);
					jit_insn_label(func, &temp_436);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_437);
					branched = true;
					return(true);
					break;
				}
				case 0x17: {
					/* BGEZALanonymous_3 */
					jit_label_t temp_438 = jit_label_undefined, temp_439 = jit_label_undefined;
					jit_value_t temp_440 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_440, make_ubyte(0)), &temp_438);
					WRA(temp_440, jit_insn_sub(func, RRA(temp_440), make_ubyte(0)));
					jit_insn_branch(func, &temp_439);
					jit_insn_label(func, &temp_438);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_439);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_180, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_441 = jit_label_undefined, temp_442 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_180, jit_type_int, 0), make_uint(0x0)), &temp_441);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_442);
					jit_insn_label(func, &temp_441);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_442);
					branched = true;
					return(true);
					break;
				}
				case 0x18: {
					/* BLTZALanonymous_4 */
					jit_label_t temp_443 = jit_label_undefined, temp_444 = jit_label_undefined;
					jit_value_t temp_445 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_445, make_ubyte(0)), &temp_443);
					WRA(temp_445, jit_insn_sub(func, RRA(temp_445), make_ubyte(0)));
					jit_insn_branch(func, &temp_444);
					jit_insn_label(func, &temp_443);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_444);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_181, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_446 = jit_label_undefined, temp_447 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_181, jit_type_int, 0), make_uint(0x0)), &temp_446);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_447);
					jit_insn_label(func, &temp_446);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_447);
					branched = true;
					return(true);
					break;
				}
				case 0x19: {
					/* BGEZALanonymous_4 */
					jit_label_t temp_448 = jit_label_undefined, temp_449 = jit_label_undefined;
					jit_value_t temp_450 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_450, make_ubyte(0)), &temp_448);
					WRA(temp_450, jit_insn_sub(func, RRA(temp_450), make_ubyte(0)));
					jit_insn_branch(func, &temp_449);
					jit_insn_label(func, &temp_448);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_449);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_182, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_451 = jit_label_undefined, temp_452 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_182, jit_type_int, 0), make_uint(0x0)), &temp_451);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_452);
					jit_insn_label(func, &temp_451);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_452);
					branched = true;
					return(true);
					break;
				}
				case 0x1a: {
					/* BLTZALanonymous_5 */
					jit_label_t temp_453 = jit_label_undefined, temp_454 = jit_label_undefined;
					jit_value_t temp_455 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_455, make_ubyte(0)), &temp_453);
					WRA(temp_455, jit_insn_sub(func, RRA(temp_455), make_ubyte(0)));
					jit_insn_branch(func, &temp_454);
					jit_insn_label(func, &temp_453);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_454);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_183, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_456 = jit_label_undefined, temp_457 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_183, jit_type_int, 0), make_uint(0x0)), &temp_456);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_457);
					jit_insn_label(func, &temp_456);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_457);
					branched = true;
					return(true);
					break;
				}
				case 0x1b: {
					/* BGEZALanonymous_5 */
					jit_label_t temp_458 = jit_label_undefined, temp_459 = jit_label_undefined;
					jit_value_t temp_460 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_460, make_ubyte(0)), &temp_458);
					WRA(temp_460, jit_insn_sub(func, RRA(temp_460), make_ubyte(0)));
					jit_insn_branch(func, &temp_459);
					jit_insn_label(func, &temp_458);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_459);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_184, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_461 = jit_label_undefined, temp_462 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_184, jit_type_int, 0), make_uint(0x0)), &temp_461);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_462);
					jit_insn_label(func, &temp_461);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_462);
					branched = true;
					return(true);
					break;
				}
				case 0x1c: {
					/* BLTZALanonymous_6 */
					jit_label_t temp_463 = jit_label_undefined, temp_464 = jit_label_undefined;
					jit_value_t temp_465 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_465, make_ubyte(0)), &temp_463);
					WRA(temp_465, jit_insn_sub(func, RRA(temp_465), make_ubyte(0)));
					jit_insn_branch(func, &temp_464);
					jit_insn_label(func, &temp_463);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_464);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_185, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_466 = jit_label_undefined, temp_467 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_185, jit_type_int, 0), make_uint(0x0)), &temp_466);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_467);
					jit_insn_label(func, &temp_466);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_467);
					branched = true;
					return(true);
					break;
				}
				case 0x1d: {
					/* BGEZALanonymous_6 */
					jit_label_t temp_468 = jit_label_undefined, temp_469 = jit_label_undefined;
					jit_value_t temp_470 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_470, make_ubyte(0)), &temp_468);
					WRA(temp_470, jit_insn_sub(func, RRA(temp_470), make_ubyte(0)));
					jit_insn_branch(func, &temp_469);
					jit_insn_label(func, &temp_468);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_469);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_186, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_471 = jit_label_undefined, temp_472 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_186, jit_type_int, 0), make_uint(0x0)), &temp_471);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_472);
					jit_insn_label(func, &temp_471);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_472);
					branched = true;
					return(true);
					break;
				}
				case 0x1e: {
					/* BLTZALanonymous_7 */
					jit_label_t temp_473 = jit_label_undefined, temp_474 = jit_label_undefined;
					jit_value_t temp_475 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_475, make_ubyte(0)), &temp_473);
					WRA(temp_475, jit_insn_sub(func, RRA(temp_475), make_ubyte(0)));
					jit_insn_branch(func, &temp_474);
					jit_insn_label(func, &temp_473);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_474);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_187, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_476 = jit_label_undefined, temp_477 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_187, jit_type_int, 0), make_uint(0x0)), &temp_476);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_477);
					jit_insn_label(func, &temp_476);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_477);
					branched = true;
					return(true);
					break;
				}
				case 0x1f: {
					/* BGEZALanonymous_7 */
					jit_label_t temp_478 = jit_label_undefined, temp_479 = jit_label_undefined;
					jit_value_t temp_480 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_480, make_ubyte(0)), &temp_478);
					WRA(temp_480, jit_insn_sub(func, RRA(temp_480), make_ubyte(0)));
					jit_insn_branch(func, &temp_479);
					jit_insn_label(func, &temp_478);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_479);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_188, rs);
					DO_LDS();
					WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_481 = jit_label_undefined, temp_482 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_188, jit_type_int, 0), make_uint(0x0)), &temp_481);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_482);
					jit_insn_label(func, &temp_481);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_482);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x2: {
			/* J */
			jit_label_t temp_483 = jit_label_undefined, temp_484 = jit_label_undefined;
			jit_value_t temp_485 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_485, make_ubyte(0)), &temp_483);
			WRA(temp_485, jit_insn_sub(func, RRA(temp_485), make_ubyte(0)));
			jit_insn_branch(func, &temp_484);
			jit_insn_label(func, &temp_483);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_484);
			uint32_t imm = (inst) & (0x3ffffff);
			DO_LDS();
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << (0x2));
			if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
			branched = true;
			return(true);
			break;
		}
		case 0x3: {
			/* JAL */
			jit_label_t temp_486 = jit_label_undefined, temp_487 = jit_label_undefined;
			jit_value_t temp_488 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_488, make_ubyte(0)), &temp_486);
			WRA(temp_488, jit_insn_sub(func, RRA(temp_488), make_ubyte(0)));
			jit_insn_branch(func, &temp_487);
			jit_insn_label(func, &temp_486);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_487);
			uint32_t imm = (inst) & (0x3ffffff);
			RES(0x1f);
			DO_LDS();
			WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << (0x2));
			if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
			branched = true;
			return(true);
			break;
		}
		case 0x4: {
			/* BEQ */
			jit_label_t temp_489 = jit_label_undefined, temp_490 = jit_label_undefined;
			jit_value_t temp_491 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_491, make_ubyte(0)), &temp_489);
			WRA(temp_491, jit_insn_sub(func, RRA(temp_491), make_ubyte(0)));
			jit_insn_branch(func, &temp_490);
			jit_insn_label(func, &temp_489);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_490);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_189, rs);
			TGPR(temp_190, rt);
			DO_LDS();
			uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
			jit_label_t temp_492 = jit_label_undefined, temp_493 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, temp_189, temp_190), &temp_492);
			if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
			jit_insn_branch(func, &temp_493);
			jit_insn_label(func, &temp_492);
			if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
			jit_insn_label(func, &temp_493);
			branched = true;
			return(true);
			break;
		}
		case 0x5: {
			/* BNE */
			jit_label_t temp_494 = jit_label_undefined, temp_495 = jit_label_undefined;
			jit_value_t temp_496 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_496, make_ubyte(0)), &temp_494);
			WRA(temp_496, jit_insn_sub(func, RRA(temp_496), make_ubyte(0)));
			jit_insn_branch(func, &temp_495);
			jit_insn_label(func, &temp_494);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_495);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_191, rs);
			TGPR(temp_192, rt);
			DO_LDS();
			uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
			jit_label_t temp_497 = jit_label_undefined, temp_498 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_ne(func, temp_191, temp_192), &temp_497);
			if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
			jit_insn_branch(func, &temp_498);
			jit_insn_label(func, &temp_497);
			if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
			jit_insn_label(func, &temp_498);
			branched = true;
			return(true);
			break;
		}
		case 0x6: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLEZ */
					jit_label_t temp_499 = jit_label_undefined, temp_500 = jit_label_undefined;
					jit_value_t temp_501 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_501, make_ubyte(0)), &temp_499);
					WRA(temp_501, jit_insn_sub(func, RRA(temp_501), make_ubyte(0)));
					jit_insn_branch(func, &temp_500);
					jit_insn_label(func, &temp_499);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_500);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_193, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_502 = jit_label_undefined, temp_503 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_le(func, jit_insn_convert(func, temp_193, jit_type_int, 0), make_uint(0x0)), &temp_502);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_503);
					jit_insn_label(func, &temp_502);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_503);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x7: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BGTZ */
					jit_label_t temp_504 = jit_label_undefined, temp_505 = jit_label_undefined;
					jit_value_t temp_506 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_506, make_ubyte(0)), &temp_504);
					WRA(temp_506, jit_insn_sub(func, RRA(temp_506), make_ubyte(0)));
					jit_insn_branch(func, &temp_505);
					jit_insn_label(func, &temp_504);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_505);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_194, rs);
					DO_LDS();
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_507 = jit_label_undefined, temp_508 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_gt(func, jit_insn_convert(func, temp_194, jit_type_int, 0), make_uint(0x0)), &temp_507);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_508);
					jit_insn_label(func, &temp_507);
					if(!branched) call_branch_block(func, rcpu->GetBlockReference(target));
					jit_insn_label(func, &temp_508);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x8: {
			/* ADDI */
			jit_label_t temp_509 = jit_label_undefined, temp_510 = jit_label_undefined;
			jit_value_t temp_511 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_511, make_ubyte(0)), &temp_509);
			WRA(temp_511, jit_insn_sub(func, RRA(temp_511), make_ubyte(0)));
			jit_insn_branch(func, &temp_510);
			jit_insn_label(func, &temp_509);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_510);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_195, rs);
			DO_LDS();
			uint32_t eimm = signext(0x10, imm);
			call_overflow(func, temp_195, make_uint(eimm), 1, pc, inst);
			WGPR(rt, jit_insn_add(func, temp_195, make_uint(eimm)));
			return(true);
			break;
		}
		case 0x9: {
			/* ADDIU */
			jit_label_t temp_512 = jit_label_undefined, temp_513 = jit_label_undefined;
			jit_value_t temp_514 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_514, make_ubyte(0)), &temp_512);
			WRA(temp_514, jit_insn_sub(func, RRA(temp_514), make_ubyte(0)));
			jit_insn_branch(func, &temp_513);
			jit_insn_label(func, &temp_512);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_513);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_196, rs);
			DO_LDS();
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_add(func, temp_196, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xa: {
			/* SLTI */
			jit_label_t temp_515 = jit_label_undefined, temp_516 = jit_label_undefined;
			jit_value_t temp_517 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_517, make_ubyte(0)), &temp_515);
			WRA(temp_517, jit_insn_sub(func, RRA(temp_517), make_ubyte(0)));
			jit_insn_branch(func, &temp_516);
			jit_insn_label(func, &temp_515);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_516);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_197, rs);
			DO_LDS();
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_lt(func, jit_insn_convert(func, temp_197, jit_type_int, 0), jit_insn_convert(func, make_uint(eimm), jit_type_int, 0)));
			return(true);
			break;
		}
		case 0xb: {
			/* SLTIU */
			jit_label_t temp_518 = jit_label_undefined, temp_519 = jit_label_undefined;
			jit_value_t temp_520 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_520, make_ubyte(0)), &temp_518);
			WRA(temp_520, jit_insn_sub(func, RRA(temp_520), make_ubyte(0)));
			jit_insn_branch(func, &temp_519);
			jit_insn_label(func, &temp_518);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_519);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_198, rs);
			DO_LDS();
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_lt(func, temp_198, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xc: {
			/* ANDI */
			jit_label_t temp_521 = jit_label_undefined, temp_522 = jit_label_undefined;
			jit_value_t temp_523 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_523, make_ubyte(0)), &temp_521);
			WRA(temp_523, jit_insn_sub(func, RRA(temp_523), make_ubyte(0)));
			jit_insn_branch(func, &temp_522);
			jit_insn_label(func, &temp_521);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_522);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_199, rs);
			DO_LDS();
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_and(func, temp_199, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xd: {
			/* ORI */
			jit_label_t temp_524 = jit_label_undefined, temp_525 = jit_label_undefined;
			jit_value_t temp_526 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_526, make_ubyte(0)), &temp_524);
			WRA(temp_526, jit_insn_sub(func, RRA(temp_526), make_ubyte(0)));
			jit_insn_branch(func, &temp_525);
			jit_insn_label(func, &temp_524);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_525);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_200, rs);
			DO_LDS();
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_or(func, temp_200, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xe: {
			/* XORI */
			jit_label_t temp_527 = jit_label_undefined, temp_528 = jit_label_undefined;
			jit_value_t temp_529 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_529, make_ubyte(0)), &temp_527);
			WRA(temp_529, jit_insn_sub(func, RRA(temp_529), make_ubyte(0)));
			jit_insn_branch(func, &temp_528);
			jit_insn_label(func, &temp_527);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_528);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_201, rs);
			DO_LDS();
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_xor(func, temp_201, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xf: {
			/* LUI */
			jit_label_t temp_530 = jit_label_undefined, temp_531 = jit_label_undefined;
			jit_value_t temp_532 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_532, make_ubyte(0)), &temp_530);
			WRA(temp_532, jit_insn_sub(func, RRA(temp_532), make_ubyte(0)));
			jit_insn_branch(func, &temp_531);
			jit_insn_label(func, &temp_530);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_531);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			RES(rt);
			DO_LDS();
			WGPR(rt, jit_insn_shl(func, make_uint(imm), make_uint(0x10)));
			return(true);
			break;
		}
		case 0x10: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_8 */
					jit_label_t temp_533 = jit_label_undefined, temp_534 = jit_label_undefined;
					jit_value_t temp_535 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_535, make_ubyte(0)), &temp_533);
					WRA(temp_535, jit_insn_sub(func, RRA(temp_535), make_ubyte(0)));
					jit_insn_branch(func, &temp_534);
					jit_insn_label(func, &temp_533);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_534);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					defer_set(func, rt, call_read_copreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_8 */
					jit_label_t temp_536 = jit_label_undefined, temp_537 = jit_label_undefined;
					jit_value_t temp_538 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_538, make_ubyte(0)), &temp_536);
					WRA(temp_538, jit_insn_sub(func, RRA(temp_538), make_ubyte(0)));
					jit_insn_branch(func, &temp_537);
					jit_insn_label(func, &temp_536);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_537);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_8 */
					jit_label_t temp_539 = jit_label_undefined, temp_540 = jit_label_undefined;
					jit_value_t temp_541 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_541, make_ubyte(0)), &temp_539);
					WRA(temp_541, jit_insn_sub(func, RRA(temp_541), make_ubyte(0)));
					jit_insn_branch(func, &temp_540);
					jit_insn_label(func, &temp_539);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_540);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_202, rt);
					DO_LDS();
					call_write_copreg(func, cop, rd, temp_202);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_8 */
					jit_label_t temp_542 = jit_label_undefined, temp_543 = jit_label_undefined;
					jit_value_t temp_544 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_544, make_ubyte(0)), &temp_542);
					WRA(temp_544, jit_insn_sub(func, RRA(temp_544), make_ubyte(0)));
					jit_insn_branch(func, &temp_543);
					jit_insn_label(func, &temp_542);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_543);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_203, rt);
					DO_LDS();
					call_write_copcreg(func, cop, rd, temp_203);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_8 */
					jit_label_t temp_545 = jit_label_undefined, temp_546 = jit_label_undefined;
					jit_value_t temp_547 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_547, make_ubyte(0)), &temp_545);
					WRA(temp_547, jit_insn_sub(func, RRA(temp_547), make_ubyte(0)));
					jit_insn_branch(func, &temp_546);
					jit_insn_label(func, &temp_545);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_546);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_8 */
					jit_label_t temp_548 = jit_label_undefined, temp_549 = jit_label_undefined;
					jit_value_t temp_550 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_550, make_ubyte(0)), &temp_548);
					WRA(temp_550, jit_insn_sub(func, RRA(temp_550), make_ubyte(0)));
					jit_insn_branch(func, &temp_549);
					jit_insn_label(func, &temp_548);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_549);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_8 */
					jit_label_t temp_551 = jit_label_undefined, temp_552 = jit_label_undefined;
					jit_value_t temp_553 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_553, make_ubyte(0)), &temp_551);
					WRA(temp_553, jit_insn_sub(func, RRA(temp_553), make_ubyte(0)));
					jit_insn_branch(func, &temp_552);
					jit_insn_label(func, &temp_551);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_552);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_8 */
					jit_label_t temp_554 = jit_label_undefined, temp_555 = jit_label_undefined;
					jit_value_t temp_556 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_556, make_ubyte(0)), &temp_554);
					WRA(temp_556, jit_insn_sub(func, RRA(temp_556), make_ubyte(0)));
					jit_insn_branch(func, &temp_555);
					jit_insn_label(func, &temp_554);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_555);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_8 */
					jit_label_t temp_557 = jit_label_undefined, temp_558 = jit_label_undefined;
					jit_value_t temp_559 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_559, make_ubyte(0)), &temp_557);
					WRA(temp_559, jit_insn_sub(func, RRA(temp_559), make_ubyte(0)));
					jit_insn_branch(func, &temp_558);
					jit_insn_label(func, &temp_557);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_558);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_8 */
					jit_label_t temp_560 = jit_label_undefined, temp_561 = jit_label_undefined;
					jit_value_t temp_562 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_562, make_ubyte(0)), &temp_560);
					WRA(temp_562, jit_insn_sub(func, RRA(temp_562), make_ubyte(0)));
					jit_insn_branch(func, &temp_561);
					jit_insn_label(func, &temp_560);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_561);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_8 */
					jit_label_t temp_563 = jit_label_undefined, temp_564 = jit_label_undefined;
					jit_value_t temp_565 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_565, make_ubyte(0)), &temp_563);
					WRA(temp_565, jit_insn_sub(func, RRA(temp_565), make_ubyte(0)));
					jit_insn_branch(func, &temp_564);
					jit_insn_label(func, &temp_563);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_564);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_8 */
					jit_label_t temp_566 = jit_label_undefined, temp_567 = jit_label_undefined;
					jit_value_t temp_568 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_568, make_ubyte(0)), &temp_566);
					WRA(temp_568, jit_insn_sub(func, RRA(temp_568), make_ubyte(0)));
					jit_insn_branch(func, &temp_567);
					jit_insn_label(func, &temp_566);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_567);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_8 */
					jit_label_t temp_569 = jit_label_undefined, temp_570 = jit_label_undefined;
					jit_value_t temp_571 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_571, make_ubyte(0)), &temp_569);
					WRA(temp_571, jit_insn_sub(func, RRA(temp_571), make_ubyte(0)));
					jit_insn_branch(func, &temp_570);
					jit_insn_label(func, &temp_569);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_570);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_8 */
					jit_label_t temp_572 = jit_label_undefined, temp_573 = jit_label_undefined;
					jit_value_t temp_574 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_574, make_ubyte(0)), &temp_572);
					WRA(temp_574, jit_insn_sub(func, RRA(temp_574), make_ubyte(0)));
					jit_insn_branch(func, &temp_573);
					jit_insn_label(func, &temp_572);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_573);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_8 */
					jit_label_t temp_575 = jit_label_undefined, temp_576 = jit_label_undefined;
					jit_value_t temp_577 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_577, make_ubyte(0)), &temp_575);
					WRA(temp_577, jit_insn_sub(func, RRA(temp_577), make_ubyte(0)));
					jit_insn_branch(func, &temp_576);
					jit_insn_label(func, &temp_575);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_576);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_8 */
					jit_label_t temp_578 = jit_label_undefined, temp_579 = jit_label_undefined;
					jit_value_t temp_580 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_580, make_ubyte(0)), &temp_578);
					WRA(temp_580, jit_insn_sub(func, RRA(temp_580), make_ubyte(0)));
					jit_insn_branch(func, &temp_579);
					jit_insn_label(func, &temp_578);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_579);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_8 */
					jit_label_t temp_581 = jit_label_undefined, temp_582 = jit_label_undefined;
					jit_value_t temp_583 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_583, make_ubyte(0)), &temp_581);
					WRA(temp_583, jit_insn_sub(func, RRA(temp_583), make_ubyte(0)));
					jit_insn_branch(func, &temp_582);
					jit_insn_label(func, &temp_581);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_582);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_8 */
					jit_label_t temp_584 = jit_label_undefined, temp_585 = jit_label_undefined;
					jit_value_t temp_586 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_586, make_ubyte(0)), &temp_584);
					WRA(temp_586, jit_insn_sub(func, RRA(temp_586), make_ubyte(0)));
					jit_insn_branch(func, &temp_585);
					jit_insn_label(func, &temp_584);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_585);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_8 */
					jit_label_t temp_587 = jit_label_undefined, temp_588 = jit_label_undefined;
					jit_value_t temp_589 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_589, make_ubyte(0)), &temp_587);
					WRA(temp_589, jit_insn_sub(func, RRA(temp_589), make_ubyte(0)));
					jit_insn_branch(func, &temp_588);
					jit_insn_label(func, &temp_587);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_588);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_8 */
					jit_label_t temp_590 = jit_label_undefined, temp_591 = jit_label_undefined;
					jit_value_t temp_592 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_592, make_ubyte(0)), &temp_590);
					WRA(temp_592, jit_insn_sub(func, RRA(temp_592), make_ubyte(0)));
					jit_insn_branch(func, &temp_591);
					jit_insn_label(func, &temp_590);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_591);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x11: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_9 */
					jit_label_t temp_593 = jit_label_undefined, temp_594 = jit_label_undefined;
					jit_value_t temp_595 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_595, make_ubyte(0)), &temp_593);
					WRA(temp_595, jit_insn_sub(func, RRA(temp_595), make_ubyte(0)));
					jit_insn_branch(func, &temp_594);
					jit_insn_label(func, &temp_593);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_594);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					defer_set(func, rt, call_read_copreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_9 */
					jit_label_t temp_596 = jit_label_undefined, temp_597 = jit_label_undefined;
					jit_value_t temp_598 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_598, make_ubyte(0)), &temp_596);
					WRA(temp_598, jit_insn_sub(func, RRA(temp_598), make_ubyte(0)));
					jit_insn_branch(func, &temp_597);
					jit_insn_label(func, &temp_596);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_597);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_9 */
					jit_label_t temp_599 = jit_label_undefined, temp_600 = jit_label_undefined;
					jit_value_t temp_601 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_601, make_ubyte(0)), &temp_599);
					WRA(temp_601, jit_insn_sub(func, RRA(temp_601), make_ubyte(0)));
					jit_insn_branch(func, &temp_600);
					jit_insn_label(func, &temp_599);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_600);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_204, rt);
					DO_LDS();
					call_write_copreg(func, cop, rd, temp_204);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_9 */
					jit_label_t temp_602 = jit_label_undefined, temp_603 = jit_label_undefined;
					jit_value_t temp_604 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_604, make_ubyte(0)), &temp_602);
					WRA(temp_604, jit_insn_sub(func, RRA(temp_604), make_ubyte(0)));
					jit_insn_branch(func, &temp_603);
					jit_insn_label(func, &temp_602);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_603);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_205, rt);
					DO_LDS();
					call_write_copcreg(func, cop, rd, temp_205);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_9 */
					jit_label_t temp_605 = jit_label_undefined, temp_606 = jit_label_undefined;
					jit_value_t temp_607 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_607, make_ubyte(0)), &temp_605);
					WRA(temp_607, jit_insn_sub(func, RRA(temp_607), make_ubyte(0)));
					jit_insn_branch(func, &temp_606);
					jit_insn_label(func, &temp_605);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_606);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_9 */
					jit_label_t temp_608 = jit_label_undefined, temp_609 = jit_label_undefined;
					jit_value_t temp_610 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_610, make_ubyte(0)), &temp_608);
					WRA(temp_610, jit_insn_sub(func, RRA(temp_610), make_ubyte(0)));
					jit_insn_branch(func, &temp_609);
					jit_insn_label(func, &temp_608);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_609);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_9 */
					jit_label_t temp_611 = jit_label_undefined, temp_612 = jit_label_undefined;
					jit_value_t temp_613 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_613, make_ubyte(0)), &temp_611);
					WRA(temp_613, jit_insn_sub(func, RRA(temp_613), make_ubyte(0)));
					jit_insn_branch(func, &temp_612);
					jit_insn_label(func, &temp_611);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_612);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_9 */
					jit_label_t temp_614 = jit_label_undefined, temp_615 = jit_label_undefined;
					jit_value_t temp_616 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_616, make_ubyte(0)), &temp_614);
					WRA(temp_616, jit_insn_sub(func, RRA(temp_616), make_ubyte(0)));
					jit_insn_branch(func, &temp_615);
					jit_insn_label(func, &temp_614);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_615);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_9 */
					jit_label_t temp_617 = jit_label_undefined, temp_618 = jit_label_undefined;
					jit_value_t temp_619 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_619, make_ubyte(0)), &temp_617);
					WRA(temp_619, jit_insn_sub(func, RRA(temp_619), make_ubyte(0)));
					jit_insn_branch(func, &temp_618);
					jit_insn_label(func, &temp_617);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_618);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_9 */
					jit_label_t temp_620 = jit_label_undefined, temp_621 = jit_label_undefined;
					jit_value_t temp_622 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_622, make_ubyte(0)), &temp_620);
					WRA(temp_622, jit_insn_sub(func, RRA(temp_622), make_ubyte(0)));
					jit_insn_branch(func, &temp_621);
					jit_insn_label(func, &temp_620);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_621);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_9 */
					jit_label_t temp_623 = jit_label_undefined, temp_624 = jit_label_undefined;
					jit_value_t temp_625 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_625, make_ubyte(0)), &temp_623);
					WRA(temp_625, jit_insn_sub(func, RRA(temp_625), make_ubyte(0)));
					jit_insn_branch(func, &temp_624);
					jit_insn_label(func, &temp_623);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_624);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_9 */
					jit_label_t temp_626 = jit_label_undefined, temp_627 = jit_label_undefined;
					jit_value_t temp_628 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_628, make_ubyte(0)), &temp_626);
					WRA(temp_628, jit_insn_sub(func, RRA(temp_628), make_ubyte(0)));
					jit_insn_branch(func, &temp_627);
					jit_insn_label(func, &temp_626);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_627);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_9 */
					jit_label_t temp_629 = jit_label_undefined, temp_630 = jit_label_undefined;
					jit_value_t temp_631 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_631, make_ubyte(0)), &temp_629);
					WRA(temp_631, jit_insn_sub(func, RRA(temp_631), make_ubyte(0)));
					jit_insn_branch(func, &temp_630);
					jit_insn_label(func, &temp_629);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_630);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_9 */
					jit_label_t temp_632 = jit_label_undefined, temp_633 = jit_label_undefined;
					jit_value_t temp_634 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_634, make_ubyte(0)), &temp_632);
					WRA(temp_634, jit_insn_sub(func, RRA(temp_634), make_ubyte(0)));
					jit_insn_branch(func, &temp_633);
					jit_insn_label(func, &temp_632);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_633);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_9 */
					jit_label_t temp_635 = jit_label_undefined, temp_636 = jit_label_undefined;
					jit_value_t temp_637 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_637, make_ubyte(0)), &temp_635);
					WRA(temp_637, jit_insn_sub(func, RRA(temp_637), make_ubyte(0)));
					jit_insn_branch(func, &temp_636);
					jit_insn_label(func, &temp_635);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_636);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_9 */
					jit_label_t temp_638 = jit_label_undefined, temp_639 = jit_label_undefined;
					jit_value_t temp_640 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_640, make_ubyte(0)), &temp_638);
					WRA(temp_640, jit_insn_sub(func, RRA(temp_640), make_ubyte(0)));
					jit_insn_branch(func, &temp_639);
					jit_insn_label(func, &temp_638);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_639);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_9 */
					jit_label_t temp_641 = jit_label_undefined, temp_642 = jit_label_undefined;
					jit_value_t temp_643 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_643, make_ubyte(0)), &temp_641);
					WRA(temp_643, jit_insn_sub(func, RRA(temp_643), make_ubyte(0)));
					jit_insn_branch(func, &temp_642);
					jit_insn_label(func, &temp_641);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_642);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_9 */
					jit_label_t temp_644 = jit_label_undefined, temp_645 = jit_label_undefined;
					jit_value_t temp_646 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_646, make_ubyte(0)), &temp_644);
					WRA(temp_646, jit_insn_sub(func, RRA(temp_646), make_ubyte(0)));
					jit_insn_branch(func, &temp_645);
					jit_insn_label(func, &temp_644);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_645);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_9 */
					jit_label_t temp_647 = jit_label_undefined, temp_648 = jit_label_undefined;
					jit_value_t temp_649 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_649, make_ubyte(0)), &temp_647);
					WRA(temp_649, jit_insn_sub(func, RRA(temp_649), make_ubyte(0)));
					jit_insn_branch(func, &temp_648);
					jit_insn_label(func, &temp_647);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_648);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_9 */
					jit_label_t temp_650 = jit_label_undefined, temp_651 = jit_label_undefined;
					jit_value_t temp_652 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_652, make_ubyte(0)), &temp_650);
					WRA(temp_652, jit_insn_sub(func, RRA(temp_652), make_ubyte(0)));
					jit_insn_branch(func, &temp_651);
					jit_insn_label(func, &temp_650);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_651);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x12: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_10 */
					jit_label_t temp_653 = jit_label_undefined, temp_654 = jit_label_undefined;
					jit_value_t temp_655 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_655, make_ubyte(0)), &temp_653);
					WRA(temp_655, jit_insn_sub(func, RRA(temp_655), make_ubyte(0)));
					jit_insn_branch(func, &temp_654);
					jit_insn_label(func, &temp_653);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_654);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					defer_set(func, rt, call_read_copreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_10 */
					jit_label_t temp_656 = jit_label_undefined, temp_657 = jit_label_undefined;
					jit_value_t temp_658 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_658, make_ubyte(0)), &temp_656);
					WRA(temp_658, jit_insn_sub(func, RRA(temp_658), make_ubyte(0)));
					jit_insn_branch(func, &temp_657);
					jit_insn_label(func, &temp_656);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_657);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_10 */
					jit_label_t temp_659 = jit_label_undefined, temp_660 = jit_label_undefined;
					jit_value_t temp_661 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_661, make_ubyte(0)), &temp_659);
					WRA(temp_661, jit_insn_sub(func, RRA(temp_661), make_ubyte(0)));
					jit_insn_branch(func, &temp_660);
					jit_insn_label(func, &temp_659);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_660);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_206, rt);
					DO_LDS();
					call_write_copreg(func, cop, rd, temp_206);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_10 */
					jit_label_t temp_662 = jit_label_undefined, temp_663 = jit_label_undefined;
					jit_value_t temp_664 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_664, make_ubyte(0)), &temp_662);
					WRA(temp_664, jit_insn_sub(func, RRA(temp_664), make_ubyte(0)));
					jit_insn_branch(func, &temp_663);
					jit_insn_label(func, &temp_662);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_663);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_207, rt);
					DO_LDS();
					call_write_copcreg(func, cop, rd, temp_207);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_10 */
					jit_label_t temp_665 = jit_label_undefined, temp_666 = jit_label_undefined;
					jit_value_t temp_667 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_667, make_ubyte(0)), &temp_665);
					WRA(temp_667, jit_insn_sub(func, RRA(temp_667), make_ubyte(0)));
					jit_insn_branch(func, &temp_666);
					jit_insn_label(func, &temp_665);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_666);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_10 */
					jit_label_t temp_668 = jit_label_undefined, temp_669 = jit_label_undefined;
					jit_value_t temp_670 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_670, make_ubyte(0)), &temp_668);
					WRA(temp_670, jit_insn_sub(func, RRA(temp_670), make_ubyte(0)));
					jit_insn_branch(func, &temp_669);
					jit_insn_label(func, &temp_668);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_669);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_10 */
					jit_label_t temp_671 = jit_label_undefined, temp_672 = jit_label_undefined;
					jit_value_t temp_673 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_673, make_ubyte(0)), &temp_671);
					WRA(temp_673, jit_insn_sub(func, RRA(temp_673), make_ubyte(0)));
					jit_insn_branch(func, &temp_672);
					jit_insn_label(func, &temp_671);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_672);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_10 */
					jit_label_t temp_674 = jit_label_undefined, temp_675 = jit_label_undefined;
					jit_value_t temp_676 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_676, make_ubyte(0)), &temp_674);
					WRA(temp_676, jit_insn_sub(func, RRA(temp_676), make_ubyte(0)));
					jit_insn_branch(func, &temp_675);
					jit_insn_label(func, &temp_674);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_675);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_10 */
					jit_label_t temp_677 = jit_label_undefined, temp_678 = jit_label_undefined;
					jit_value_t temp_679 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_679, make_ubyte(0)), &temp_677);
					WRA(temp_679, jit_insn_sub(func, RRA(temp_679), make_ubyte(0)));
					jit_insn_branch(func, &temp_678);
					jit_insn_label(func, &temp_677);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_678);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_10 */
					jit_label_t temp_680 = jit_label_undefined, temp_681 = jit_label_undefined;
					jit_value_t temp_682 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_682, make_ubyte(0)), &temp_680);
					WRA(temp_682, jit_insn_sub(func, RRA(temp_682), make_ubyte(0)));
					jit_insn_branch(func, &temp_681);
					jit_insn_label(func, &temp_680);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_681);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_10 */
					jit_label_t temp_683 = jit_label_undefined, temp_684 = jit_label_undefined;
					jit_value_t temp_685 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_685, make_ubyte(0)), &temp_683);
					WRA(temp_685, jit_insn_sub(func, RRA(temp_685), make_ubyte(0)));
					jit_insn_branch(func, &temp_684);
					jit_insn_label(func, &temp_683);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_684);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_10 */
					jit_label_t temp_686 = jit_label_undefined, temp_687 = jit_label_undefined;
					jit_value_t temp_688 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_688, make_ubyte(0)), &temp_686);
					WRA(temp_688, jit_insn_sub(func, RRA(temp_688), make_ubyte(0)));
					jit_insn_branch(func, &temp_687);
					jit_insn_label(func, &temp_686);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_687);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_10 */
					jit_label_t temp_689 = jit_label_undefined, temp_690 = jit_label_undefined;
					jit_value_t temp_691 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_691, make_ubyte(0)), &temp_689);
					WRA(temp_691, jit_insn_sub(func, RRA(temp_691), make_ubyte(0)));
					jit_insn_branch(func, &temp_690);
					jit_insn_label(func, &temp_689);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_690);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_10 */
					jit_label_t temp_692 = jit_label_undefined, temp_693 = jit_label_undefined;
					jit_value_t temp_694 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_694, make_ubyte(0)), &temp_692);
					WRA(temp_694, jit_insn_sub(func, RRA(temp_694), make_ubyte(0)));
					jit_insn_branch(func, &temp_693);
					jit_insn_label(func, &temp_692);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_693);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_10 */
					jit_label_t temp_695 = jit_label_undefined, temp_696 = jit_label_undefined;
					jit_value_t temp_697 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_697, make_ubyte(0)), &temp_695);
					WRA(temp_697, jit_insn_sub(func, RRA(temp_697), make_ubyte(0)));
					jit_insn_branch(func, &temp_696);
					jit_insn_label(func, &temp_695);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_696);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_10 */
					jit_label_t temp_698 = jit_label_undefined, temp_699 = jit_label_undefined;
					jit_value_t temp_700 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_700, make_ubyte(0)), &temp_698);
					WRA(temp_700, jit_insn_sub(func, RRA(temp_700), make_ubyte(0)));
					jit_insn_branch(func, &temp_699);
					jit_insn_label(func, &temp_698);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_699);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_10 */
					jit_label_t temp_701 = jit_label_undefined, temp_702 = jit_label_undefined;
					jit_value_t temp_703 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_703, make_ubyte(0)), &temp_701);
					WRA(temp_703, jit_insn_sub(func, RRA(temp_703), make_ubyte(0)));
					jit_insn_branch(func, &temp_702);
					jit_insn_label(func, &temp_701);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_702);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_10 */
					jit_label_t temp_704 = jit_label_undefined, temp_705 = jit_label_undefined;
					jit_value_t temp_706 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_706, make_ubyte(0)), &temp_704);
					WRA(temp_706, jit_insn_sub(func, RRA(temp_706), make_ubyte(0)));
					jit_insn_branch(func, &temp_705);
					jit_insn_label(func, &temp_704);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_705);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_10 */
					jit_label_t temp_707 = jit_label_undefined, temp_708 = jit_label_undefined;
					jit_value_t temp_709 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_709, make_ubyte(0)), &temp_707);
					WRA(temp_709, jit_insn_sub(func, RRA(temp_709), make_ubyte(0)));
					jit_insn_branch(func, &temp_708);
					jit_insn_label(func, &temp_707);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_708);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_10 */
					jit_label_t temp_710 = jit_label_undefined, temp_711 = jit_label_undefined;
					jit_value_t temp_712 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_712, make_ubyte(0)), &temp_710);
					WRA(temp_712, jit_insn_sub(func, RRA(temp_712), make_ubyte(0)));
					jit_insn_branch(func, &temp_711);
					jit_insn_label(func, &temp_710);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_711);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x13: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_11 */
					jit_label_t temp_713 = jit_label_undefined, temp_714 = jit_label_undefined;
					jit_value_t temp_715 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_715, make_ubyte(0)), &temp_713);
					WRA(temp_715, jit_insn_sub(func, RRA(temp_715), make_ubyte(0)));
					jit_insn_branch(func, &temp_714);
					jit_insn_label(func, &temp_713);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_714);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					defer_set(func, rt, call_read_copreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_11 */
					jit_label_t temp_716 = jit_label_undefined, temp_717 = jit_label_undefined;
					jit_value_t temp_718 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_718, make_ubyte(0)), &temp_716);
					WRA(temp_718, jit_insn_sub(func, RRA(temp_718), make_ubyte(0)));
					jit_insn_branch(func, &temp_717);
					jit_insn_label(func, &temp_716);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_717);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					DO_LDS();
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_11 */
					jit_label_t temp_719 = jit_label_undefined, temp_720 = jit_label_undefined;
					jit_value_t temp_721 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_721, make_ubyte(0)), &temp_719);
					WRA(temp_721, jit_insn_sub(func, RRA(temp_721), make_ubyte(0)));
					jit_insn_branch(func, &temp_720);
					jit_insn_label(func, &temp_719);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_720);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_208, rt);
					DO_LDS();
					call_write_copreg(func, cop, rd, temp_208);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_11 */
					jit_label_t temp_722 = jit_label_undefined, temp_723 = jit_label_undefined;
					jit_value_t temp_724 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_724, make_ubyte(0)), &temp_722);
					WRA(temp_724, jit_insn_sub(func, RRA(temp_724), make_ubyte(0)));
					jit_insn_branch(func, &temp_723);
					jit_insn_label(func, &temp_722);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_723);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_209, rt);
					DO_LDS();
					call_write_copcreg(func, cop, rd, temp_209);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_11 */
					jit_label_t temp_725 = jit_label_undefined, temp_726 = jit_label_undefined;
					jit_value_t temp_727 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_727, make_ubyte(0)), &temp_725);
					WRA(temp_727, jit_insn_sub(func, RRA(temp_727), make_ubyte(0)));
					jit_insn_branch(func, &temp_726);
					jit_insn_label(func, &temp_725);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_726);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_11 */
					jit_label_t temp_728 = jit_label_undefined, temp_729 = jit_label_undefined;
					jit_value_t temp_730 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_730, make_ubyte(0)), &temp_728);
					WRA(temp_730, jit_insn_sub(func, RRA(temp_730), make_ubyte(0)));
					jit_insn_branch(func, &temp_729);
					jit_insn_label(func, &temp_728);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_729);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_11 */
					jit_label_t temp_731 = jit_label_undefined, temp_732 = jit_label_undefined;
					jit_value_t temp_733 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_733, make_ubyte(0)), &temp_731);
					WRA(temp_733, jit_insn_sub(func, RRA(temp_733), make_ubyte(0)));
					jit_insn_branch(func, &temp_732);
					jit_insn_label(func, &temp_731);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_732);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_11 */
					jit_label_t temp_734 = jit_label_undefined, temp_735 = jit_label_undefined;
					jit_value_t temp_736 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_736, make_ubyte(0)), &temp_734);
					WRA(temp_736, jit_insn_sub(func, RRA(temp_736), make_ubyte(0)));
					jit_insn_branch(func, &temp_735);
					jit_insn_label(func, &temp_734);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_735);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_11 */
					jit_label_t temp_737 = jit_label_undefined, temp_738 = jit_label_undefined;
					jit_value_t temp_739 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_739, make_ubyte(0)), &temp_737);
					WRA(temp_739, jit_insn_sub(func, RRA(temp_739), make_ubyte(0)));
					jit_insn_branch(func, &temp_738);
					jit_insn_label(func, &temp_737);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_738);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_11 */
					jit_label_t temp_740 = jit_label_undefined, temp_741 = jit_label_undefined;
					jit_value_t temp_742 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_742, make_ubyte(0)), &temp_740);
					WRA(temp_742, jit_insn_sub(func, RRA(temp_742), make_ubyte(0)));
					jit_insn_branch(func, &temp_741);
					jit_insn_label(func, &temp_740);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_741);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_11 */
					jit_label_t temp_743 = jit_label_undefined, temp_744 = jit_label_undefined;
					jit_value_t temp_745 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_745, make_ubyte(0)), &temp_743);
					WRA(temp_745, jit_insn_sub(func, RRA(temp_745), make_ubyte(0)));
					jit_insn_branch(func, &temp_744);
					jit_insn_label(func, &temp_743);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_744);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_11 */
					jit_label_t temp_746 = jit_label_undefined, temp_747 = jit_label_undefined;
					jit_value_t temp_748 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_748, make_ubyte(0)), &temp_746);
					WRA(temp_748, jit_insn_sub(func, RRA(temp_748), make_ubyte(0)));
					jit_insn_branch(func, &temp_747);
					jit_insn_label(func, &temp_746);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_747);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_11 */
					jit_label_t temp_749 = jit_label_undefined, temp_750 = jit_label_undefined;
					jit_value_t temp_751 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_751, make_ubyte(0)), &temp_749);
					WRA(temp_751, jit_insn_sub(func, RRA(temp_751), make_ubyte(0)));
					jit_insn_branch(func, &temp_750);
					jit_insn_label(func, &temp_749);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_750);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_11 */
					jit_label_t temp_752 = jit_label_undefined, temp_753 = jit_label_undefined;
					jit_value_t temp_754 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_754, make_ubyte(0)), &temp_752);
					WRA(temp_754, jit_insn_sub(func, RRA(temp_754), make_ubyte(0)));
					jit_insn_branch(func, &temp_753);
					jit_insn_label(func, &temp_752);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_753);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_11 */
					jit_label_t temp_755 = jit_label_undefined, temp_756 = jit_label_undefined;
					jit_value_t temp_757 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_757, make_ubyte(0)), &temp_755);
					WRA(temp_757, jit_insn_sub(func, RRA(temp_757), make_ubyte(0)));
					jit_insn_branch(func, &temp_756);
					jit_insn_label(func, &temp_755);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_756);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_11 */
					jit_label_t temp_758 = jit_label_undefined, temp_759 = jit_label_undefined;
					jit_value_t temp_760 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_760, make_ubyte(0)), &temp_758);
					WRA(temp_760, jit_insn_sub(func, RRA(temp_760), make_ubyte(0)));
					jit_insn_branch(func, &temp_759);
					jit_insn_label(func, &temp_758);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_759);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_11 */
					jit_label_t temp_761 = jit_label_undefined, temp_762 = jit_label_undefined;
					jit_value_t temp_763 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_763, make_ubyte(0)), &temp_761);
					WRA(temp_763, jit_insn_sub(func, RRA(temp_763), make_ubyte(0)));
					jit_insn_branch(func, &temp_762);
					jit_insn_label(func, &temp_761);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_762);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_11 */
					jit_label_t temp_764 = jit_label_undefined, temp_765 = jit_label_undefined;
					jit_value_t temp_766 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_766, make_ubyte(0)), &temp_764);
					WRA(temp_766, jit_insn_sub(func, RRA(temp_766), make_ubyte(0)));
					jit_insn_branch(func, &temp_765);
					jit_insn_label(func, &temp_764);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_765);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_11 */
					jit_label_t temp_767 = jit_label_undefined, temp_768 = jit_label_undefined;
					jit_value_t temp_769 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_769, make_ubyte(0)), &temp_767);
					WRA(temp_769, jit_insn_sub(func, RRA(temp_769), make_ubyte(0)));
					jit_insn_branch(func, &temp_768);
					jit_insn_label(func, &temp_767);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_768);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_11 */
					jit_label_t temp_770 = jit_label_undefined, temp_771 = jit_label_undefined;
					jit_value_t temp_772 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
					jit_insn_branch_if(func, jit_insn_eq(func, temp_772, make_ubyte(0)), &temp_770);
					WRA(temp_772, jit_insn_sub(func, RRA(temp_772), make_ubyte(0)));
					jit_insn_branch(func, &temp_771);
					jit_insn_label(func, &temp_770);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_771);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					DO_LDS();
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x20: {
			/* LB */
			jit_label_t temp_773 = jit_label_undefined, temp_774 = jit_label_undefined;
			jit_value_t temp_775 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_775, make_ubyte(0)), &temp_773);
			WRA(temp_775, jit_insn_sub(func, RRA(temp_775), make_ubyte(0)));
			jit_insn_branch(func, &temp_774);
			jit_insn_label(func, &temp_773);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_774);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_210, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			defer_set(func, rt, call_signext(func, 8, call_load_memory(func, 8, jit_insn_add(func, temp_210, make_uint(offset)), pc)));
			return(true);
			break;
		}
		case 0x21: {
			/* LH */
			jit_label_t temp_776 = jit_label_undefined, temp_777 = jit_label_undefined;
			jit_value_t temp_778 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_778, make_ubyte(0)), &temp_776);
			WRA(temp_778, jit_insn_sub(func, RRA(temp_778), make_ubyte(0)));
			jit_insn_branch(func, &temp_777);
			jit_insn_label(func, &temp_776);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_777);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_211, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_211, make_uint(offset));
			call_alignment(func, addr, 16, 0, pc);
			defer_set(func, rt, call_signext(func, 16, call_load_memory(func, 16, addr, pc)));
			return(true);
			break;
		}
		case 0x22: {
			/* LWL */
			jit_label_t temp_779 = jit_label_undefined, temp_780 = jit_label_undefined;
			jit_value_t temp_781 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_781, make_ubyte(0)), &temp_779);
			WRA(temp_781, jit_insn_sub(func, RRA(temp_781), make_ubyte(0)));
			jit_insn_branch(func, &temp_780);
			jit_insn_label(func, &temp_779);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_780);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_212, rs);
			TGPR(temp_213, rt);
			jit_label_t temp_782 = jit_label_undefined, temp_783 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(LDWhich, jit_type_uint), make_uint(rt)), &temp_782);
			DO_LDS();
			jit_insn_branch(func, &temp_783);
			jit_insn_label(func, &temp_782);
			STORE(_ReadFudge, make_ubyte(0));
			jit_insn_store(func, temp_213, LOAD(LDValue, jit_type_uint));
			jit_insn_label(func, &temp_783);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_212, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_value_t moffset = jit_insn_and(func, offset, make_uint(0xfffffffc));
			jit_label_t temp_784 = jit_label_undefined, temp_785 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_784);
			jit_label_t temp_786 = jit_label_undefined, temp_787 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_786);
			jit_label_t temp_788 = jit_label_undefined, temp_789 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_788);
			defer_set(func, rt, call_load_memory(func, 32, moffset, pc));
			jit_insn_branch(func, &temp_789);
			jit_insn_label(func, &temp_788);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, temp_213, make_uint(0xff)), jit_insn_shl(func, call_load_memory(func, 24, moffset, pc), make_uint(0x8))));
			jit_insn_label(func, &temp_789);
			jit_insn_branch(func, &temp_787);
			jit_insn_label(func, &temp_786);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, temp_213, make_uint(0xffff)), jit_insn_shl(func, call_load_memory(func, 16, moffset, pc), make_uint(0x10))));
			jit_insn_label(func, &temp_787);
			jit_insn_branch(func, &temp_785);
			jit_insn_label(func, &temp_784);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, temp_213, make_uint(0xffffff)), jit_insn_shl(func, call_load_memory(func, 8, moffset, pc), make_uint(0x18))));
			jit_insn_label(func, &temp_785);
			return(true);
			break;
		}
		case 0x23: {
			/* LW */
			jit_label_t temp_790 = jit_label_undefined, temp_791 = jit_label_undefined;
			jit_value_t temp_792 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_792, make_ubyte(0)), &temp_790);
			WRA(temp_792, jit_insn_sub(func, RRA(temp_792), make_ubyte(0)));
			jit_insn_branch(func, &temp_791);
			jit_insn_label(func, &temp_790);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_791);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_214, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_214, make_uint(offset));
			call_alignment(func, addr, 32, 0, pc);
			defer_set(func, rt, call_load_memory(func, 32, addr, pc));
			return(true);
			break;
		}
		case 0x24: {
			/* LBU */
			jit_label_t temp_793 = jit_label_undefined, temp_794 = jit_label_undefined;
			jit_value_t temp_795 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_795, make_ubyte(0)), &temp_793);
			WRA(temp_795, jit_insn_sub(func, RRA(temp_795), make_ubyte(0)));
			jit_insn_branch(func, &temp_794);
			jit_insn_label(func, &temp_793);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_794);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_215, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			defer_set(func, rt, call_load_memory(func, 8, jit_insn_add(func, temp_215, make_uint(offset)), pc));
			return(true);
			break;
		}
		case 0x25: {
			/* LHU */
			jit_label_t temp_796 = jit_label_undefined, temp_797 = jit_label_undefined;
			jit_value_t temp_798 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_798, make_ubyte(0)), &temp_796);
			WRA(temp_798, jit_insn_sub(func, RRA(temp_798), make_ubyte(0)));
			jit_insn_branch(func, &temp_797);
			jit_insn_label(func, &temp_796);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_797);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_216, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_216, make_uint(offset));
			call_alignment(func, addr, 16, 0, pc);
			defer_set(func, rt, call_load_memory(func, 16, addr, pc));
			return(true);
			break;
		}
		case 0x26: {
			/* LWR */
			jit_label_t temp_799 = jit_label_undefined, temp_800 = jit_label_undefined;
			jit_value_t temp_801 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_801, make_ubyte(0)), &temp_799);
			WRA(temp_801, jit_insn_sub(func, RRA(temp_801), make_ubyte(0)));
			jit_insn_branch(func, &temp_800);
			jit_insn_label(func, &temp_799);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_800);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_217, rs);
			TGPR(temp_218, rt);
			jit_label_t temp_802 = jit_label_undefined, temp_803 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(LDWhich, jit_type_uint), make_uint(rt)), &temp_802);
			DO_LDS();
			jit_insn_branch(func, &temp_803);
			jit_insn_label(func, &temp_802);
			STORE(_ReadFudge, make_ubyte(0));
			jit_insn_store(func, temp_218, LOAD(LDValue, jit_type_uint));
			jit_insn_label(func, &temp_803);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_217, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_label_t temp_804 = jit_label_undefined, temp_805 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_804);
			jit_label_t temp_806 = jit_label_undefined, temp_807 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_806);
			jit_label_t temp_808 = jit_label_undefined, temp_809 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_808);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, temp_218, make_uint(0xffffff00)), call_load_memory(func, 8, offset, pc)));
			jit_insn_branch(func, &temp_809);
			jit_insn_label(func, &temp_808);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, temp_218, make_uint(0xffff0000)), call_load_memory(func, 16, offset, pc)));
			jit_insn_label(func, &temp_809);
			jit_insn_branch(func, &temp_807);
			jit_insn_label(func, &temp_806);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, temp_218, make_uint(0xff000000)), call_load_memory(func, 24, offset, pc)));
			jit_insn_label(func, &temp_807);
			jit_insn_branch(func, &temp_805);
			jit_insn_label(func, &temp_804);
			defer_set(func, rt, call_load_memory(func, 32, offset, pc));
			jit_insn_label(func, &temp_805);
			return(true);
			break;
		}
		case 0x28: {
			/* SB */
			jit_label_t temp_810 = jit_label_undefined, temp_811 = jit_label_undefined;
			jit_value_t temp_812 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_812, make_ubyte(0)), &temp_810);
			WRA(temp_812, jit_insn_sub(func, RRA(temp_812), make_ubyte(0)));
			jit_insn_branch(func, &temp_811);
			jit_insn_label(func, &temp_810);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_811);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_219, rs);
			TGPR(temp_220, rt);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 8, jit_insn_add(func, temp_219, make_uint(offset)), temp_220, pc);
			return(true);
			break;
		}
		case 0x29: {
			/* SH */
			jit_label_t temp_813 = jit_label_undefined, temp_814 = jit_label_undefined;
			jit_value_t temp_815 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_815, make_ubyte(0)), &temp_813);
			WRA(temp_815, jit_insn_sub(func, RRA(temp_815), make_ubyte(0)));
			jit_insn_branch(func, &temp_814);
			jit_insn_label(func, &temp_813);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_814);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_221, rs);
			TGPR(temp_222, rt);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_221, make_uint(offset));
			call_alignment(func, addr, 16, 1, pc);
			call_store_memory(func, 16, addr, temp_222, pc);
			return(true);
			break;
		}
		case 0x2a: {
			/* SWL */
			jit_label_t temp_816 = jit_label_undefined, temp_817 = jit_label_undefined;
			jit_value_t temp_818 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_818, make_ubyte(0)), &temp_816);
			WRA(temp_818, jit_insn_sub(func, RRA(temp_818), make_ubyte(0)));
			jit_insn_branch(func, &temp_817);
			jit_insn_label(func, &temp_816);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_817);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_223, rs);
			TGPR(temp_224, rt);
			DO_LDS();
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_223, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_value_t moffset = jit_insn_and(func, offset, make_uint(0xfffffffc));
			jit_label_t temp_819 = jit_label_undefined, temp_820 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_819);
			jit_label_t temp_821 = jit_label_undefined, temp_822 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_821);
			jit_label_t temp_823 = jit_label_undefined, temp_824 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_823);
			call_store_memory(func, 32, moffset, temp_224, pc);
			jit_insn_branch(func, &temp_824);
			jit_insn_label(func, &temp_823);
			call_store_memory(func, 24, moffset, jit_insn_ushr(func, temp_224, make_uint(0x8)), pc);
			jit_insn_label(func, &temp_824);
			jit_insn_branch(func, &temp_822);
			jit_insn_label(func, &temp_821);
			call_store_memory(func, 16, moffset, jit_insn_ushr(func, temp_224, make_uint(0x10)), pc);
			jit_insn_label(func, &temp_822);
			jit_insn_branch(func, &temp_820);
			jit_insn_label(func, &temp_819);
			call_store_memory(func, 8, moffset, jit_insn_ushr(func, temp_224, make_uint(0x18)), pc);
			jit_insn_label(func, &temp_820);
			return(true);
			break;
		}
		case 0x2b: {
			/* SW */
			jit_label_t temp_825 = jit_label_undefined, temp_826 = jit_label_undefined;
			jit_value_t temp_827 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_827, make_ubyte(0)), &temp_825);
			WRA(temp_827, jit_insn_sub(func, RRA(temp_827), make_ubyte(0)));
			jit_insn_branch(func, &temp_826);
			jit_insn_label(func, &temp_825);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_826);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_225, rs);
			TGPR(temp_226, rt);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_225, make_uint(offset));
			call_alignment(func, addr, 32, 1, pc);
			call_store_memory(func, 32, addr, temp_226, pc);
			return(true);
			break;
		}
		case 0x2e: {
			/* SWR */
			jit_label_t temp_828 = jit_label_undefined, temp_829 = jit_label_undefined;
			jit_value_t temp_830 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_830, make_ubyte(0)), &temp_828);
			WRA(temp_830, jit_insn_sub(func, RRA(temp_830), make_ubyte(0)));
			jit_insn_branch(func, &temp_829);
			jit_insn_label(func, &temp_828);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_829);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_227, rs);
			TGPR(temp_228, rt);
			DO_LDS();
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_227, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_label_t temp_831 = jit_label_undefined, temp_832 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_831);
			jit_label_t temp_833 = jit_label_undefined, temp_834 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_833);
			jit_label_t temp_835 = jit_label_undefined, temp_836 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_835);
			call_store_memory(func, 8, offset, temp_228, pc);
			jit_insn_branch(func, &temp_836);
			jit_insn_label(func, &temp_835);
			call_store_memory(func, 16, offset, temp_228, pc);
			jit_insn_label(func, &temp_836);
			jit_insn_branch(func, &temp_834);
			jit_insn_label(func, &temp_833);
			call_store_memory(func, 24, offset, temp_228, pc);
			jit_insn_label(func, &temp_834);
			jit_insn_branch(func, &temp_832);
			jit_insn_label(func, &temp_831);
			call_store_memory(func, 32, offset, temp_228, pc);
			jit_insn_label(func, &temp_832);
			return(true);
			break;
		}
		case 0x32: {
			/* LWC2 */
			jit_label_t temp_837 = jit_label_undefined, temp_838 = jit_label_undefined;
			jit_value_t temp_839 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_839, make_ubyte(0)), &temp_837);
			WRA(temp_839, jit_insn_sub(func, RRA(temp_839), make_ubyte(0)));
			jit_insn_branch(func, &temp_838);
			jit_insn_label(func, &temp_837);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_838);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			TGPR(temp_229, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_229, make_uint(offset));
			call_alignment(func, addr, 32, 0, pc);
			call_write_copreg(func, 0x2, rt, call_load_memory(func, 32, jit_insn_add(func, temp_229, make_uint(offset)), pc));
			return(true);
			break;
		}
		case 0x3a: {
			/* SWC2 */
			jit_label_t temp_840 = jit_label_undefined, temp_841 = jit_label_undefined;
			jit_value_t temp_842 = LOAD(_ReadAbsorbWhich, jit_type_ubyte);
			jit_insn_branch_if(func, jit_insn_eq(func, temp_842, make_ubyte(0)), &temp_840);
			WRA(temp_842, jit_insn_sub(func, RRA(temp_842), make_ubyte(0)));
			jit_insn_branch(func, &temp_841);
			jit_insn_label(func, &temp_840);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_841);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			TGPR(temp_230, rs);
			DO_LDS();
			uint32_t offset = signext(0x10, imm);
			jit_value_t addr = jit_insn_add(func, temp_230, make_uint(offset));
			call_alignment(func, addr, 32, 1, pc);
			call_store_memory(func, 32, addr, call_read_copreg(func, 0x2, rt), pc);
			return(true);
			break;
		}
	}
	return false;
}
