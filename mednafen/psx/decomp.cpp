/* Autogenerated from insts.td. DO NOT EDIT */
#include <jit/jit.h>
#include <stdint.h>

// This is passed as an array of uint32_t
typedef struct state_s {
	uint32_t reg[32];
	uint32_t pc;
	uint32_t hi, lo;
} state_t;

bool decompile(jit_function_t func, jit_value_t state, uint32_t pc, uint32_t inst, bool &branched);

jit_value_t _make_uint(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_uint, val);
}
#define make_uint(val) _make_uint(func, (val))

#define WGPR(gpr, val) jit_insn_store_relative(func, jit_insn_add(func, state, jit_insn_mul(func, make_uint(gpr), make_uint(4))), 0, (val))
#define RGPR(gpr) jit_insn_load_relative(func, jit_insn_add(func, state, jit_insn_mul(func, make_uint(gpr), make_uint(4))), 0, jit_type_uint)

#define WPC(val) jit_insn_store_relative(func, state, 32*4, (val));
#define RPC() jit_insn_load_relative(func, state, 32*4, jit_type_uint)
#define WHI(val) jit_insn_store_relative(func, state, 33*4, (val));
#define RHI() jit_insn_load_relative(func, state, 33*4, jit_type_uint)
#define WLO(val) jit_insn_store_relative(func, state, 34*4, (val));
#define RLO() jit_insn_load_relative(func, state, 34*4, jit_type_uint)

jit_type_t sig_1, sig_2, sig_3;
void store_memory(int size, uint32_t ptr, uint32_t val) {
}

void call_store_memory(jit_function_t func, int size, jit_value_t ptr, jit_value_t val) {
	jit_value_t args[] = {make_uint(size), ptr, val};
	jit_insn_call_native(func, 0, (void *) store_memory, sig_3, args, 3, 0);
}

uint32_t load_memory(int size, uint32_t ptr) {
	return 0;
}

jit_value_t call_load_memory(jit_function_t func, int size, jit_value_t ptr) {
	jit_value_t args[] = {make_uint(size), ptr};
	return jit_insn_call_native(func, 0, (void *) load_memory, sig_2, args, 2, 0);
}

uint32_t read_copreg(int cop, int reg) {
	return 0;
}

jit_value_t call_read_copreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copreg, sig_2, args, 2, 0);
}

uint32_t read_copcreg(int cop, int reg) {
	return 0;
}

jit_value_t call_read_copcreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copcreg, sig_2, args, 2, 0);
}

void write_copreg(int cop, int reg, uint32_t val) {
}

void call_write_copreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copreg, sig_3, args, 3, 0);
}

void write_copcreg(int cop, int reg, uint32_t val) {
}

void call_write_copcreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copcreg, sig_3, args, 3, 0);
}

void copfun(int cop, int cofun) {
}

jit_value_t call_copfun(jit_function_t func, int cop, int cofun) {
	jit_value_t args[] = {make_uint(cop), make_uint(cofun)};
	return jit_insn_call_native(func, 0, (void *) copfun, sig_2, args, 2, 0);
}

int32_t signext(int size, uint32_t imm) {
	if(size == 8)
		return (int32_t) ((int8_t) ((uint8_t) imm));
	else if(size == 16)
		return (int32_t) ((int16_t) ((uint16_t) imm));
	return (int32_t) imm;
}

jit_value_t call_signext(jit_function_t func, int size, jit_value_t val) {
	jit_value_t args[] = {make_uint(size), val};
	return jit_insn_call_native(func, 0, (void *) signext, sig_2, args, 2, 0);
}

void syscall(int code) {
}

void call_syscall(jit_function_t func, uint32_t code) {
	jit_value_t args[] = {make_uint(code)};
	jit_insn_call_native(func, 0, (void *) syscall, sig_1, args, 1, 0);
}

void break_(int code) {
}

void call_break(jit_function_t func, uint32_t code) {
	jit_value_t args[] = {make_uint(code)};
	jit_insn_call_native(func, 0, (void *) break_, sig_1, args, 1, 0);
}

void branch(uint32_t target) {
}

void call_branch(jit_function_t func, jit_value_t val) {
	jit_value_t args[] = {val};
	jit_insn_call_native(func, 0, (void *) branch, sig_1, args, 1, 0);
}

void overflow(uint32_t a, uint32_t b, int dir) {
}

void call_overflow(jit_function_t func, jit_value_t a, jit_value_t b, int dir) {
	jit_value_t args[] = {a, b, make_uint(dir)};
	jit_insn_call_native(func, 0, (void *) overflow, sig_3, args, 3, 0);
}

jit_context_t context;

jit_type_t block_sig;

void init_decompiler() {
	context = jit_context_create();
	jit_context_build_start(context);

	jit_type_t s3params[3];
	s3params[0] = jit_type_uint;
	s3params[1] = jit_type_uint;
	s3params[2] = jit_type_uint;
	sig_3 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s3params, 3, 1);
	
	jit_type_t sparams[2];
	sparams[0] = jit_type_uint;
	sparams[1] = jit_type_uint;
	sig_2 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, sparams, 2, 1);
	
	jit_type_t lparams[2];
	lparams[0] = jit_type_uint;
	sig_1 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, lparams, 1, 1);

	jit_type_t params[1];
	params[0] = jit_type_create_pointer(jit_type_uint, 0);
	block_sig = jit_type_create_signature(jit_abi_cdecl, jit_type_void, params, 1, 1);
}

jit_function_t create_function() {
	auto func = jit_function_create(context, block_sig);
	auto statevar = jit_value_get_param(func, 0);
	bool branched = false;
	decompile(func, statevar, 0xDEADBEE0, 0x0, branched);
	return func;
}
bool decompile(jit_function_t func, jit_value_t state, uint32_t pc, uint32_t inst, bool &branched) {
	switch((inst) >> (0x1a)) {
		case 0x0: {
			switch((inst) & (0x3f)) {
				case 0x0: {
					/* SLL */
					WPC(make_uint(pc));
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_shl(func, RGPR(rt), make_uint(shamt))); }
					return(true);
					break;
				}
				case 0x2: {
					/* SRL */
					WPC(make_uint(pc));
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_ushr(func, RGPR(rt), make_uint(shamt))); }
					return(true);
					break;
				}
				case 0x3: {
					/* SRA */
					WPC(make_uint(pc));
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_sshr(func, RGPR(rt), make_uint(shamt))); }
					return(true);
					break;
				}
				case 0x4: {
					/* SLLV */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_shl(func, RGPR(rt), RGPR(rs))); }
					return(true);
					break;
				}
				case 0x6: {
					/* SRLV */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_ushr(func, RGPR(rt), RGPR(rs))); }
					return(true);
					break;
				}
				case 0x7: {
					/* SRAV */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_sshr(func, RGPR(rt), RGPR(rs))); }
					return(true);
					break;
				}
				case 0x8: {
					/* JR */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					END_DEPRES();
					call_branch(func, RGPR(rs));
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* JALR */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4))); }
					call_branch(func, RGPR(rs));
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* SYSCALL */
					WPC(make_uint(pc));
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					call_syscall(func, code);
					return(true);
					break;
				}
				case 0xd: {
					/* BREAK */
					WPC(make_uint(pc));
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					call_break(func, code);
					return(true);
					break;
				}
				case 0x10: {
					/* MFHI */
					WPC(make_uint(pc));
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, RHI()); }
					return(true);
					break;
				}
				case 0x11: {
					/* MTHI */
					WPC(make_uint(pc));
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rd);
					END_DEPRES();
					WHI(RGPR(rd))
					return(true);
					break;
				}
				case 0x12: {
					/* MFLO */
					WPC(make_uint(pc));
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, RLO()); }
					return(true);
					break;
				}
				case 0x13: {
					/* MTLO */
					WPC(make_uint(pc));
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rd);
					END_DEPRES();
					WLO(RGPR(rd))
					return(true);
					break;
				}
				case 0x18: {
					/* MULT */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					END_DEPRES();
					/* Unhandled list */
					return(true);
					break;
				}
				case 0x19: {
					/* MULTU */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					END_DEPRES();
					/* Unhandled list */
					return(true);
					break;
				}
				case 0x1a: {
					/* DIV */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					END_DEPRES();
					WLO(jit_insn_div(func, RGPR(rs), RGPR(rt)))
					WHI(jit_insn_rem(func, RGPR(rs), RGPR(rt)))
					return(true);
					break;
				}
				case 0x1b: {
					/* DIVU */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					END_DEPRES();
					WLO(jit_insn_div(func, RGPR(rs), RGPR(rt)))
					WHI(jit_insn_rem(func, RGPR(rs), RGPR(rt)))
					return(true);
					break;
				}
				case 0x20: {
					/* ADD */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					call_overflow(func, RGPR(rs), RGPR(rt), 1);
					if((rd) != (0x0)) { WGPR(rd, jit_insn_add(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x21: {
					/* ADDU */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_add(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x22: {
					/* SUB */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					call_overflow(func, RGPR(rs), RGPR(rt), -1);
					if((rd) != (0x0)) { WGPR(rd, jit_insn_sub(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x23: {
					/* SUBU */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_sub(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x24: {
					/* AND */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_and(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x25: {
					/* OR */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_or(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x26: {
					/* XOR */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_xor(func, RGPR(rs), RGPR(rt))); }
					return(true);
					break;
				}
				case 0x27: {
					/* NOR */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					if((rd) != (0x0)) { WGPR(rd, jit_insn_not(func, jit_insn_or(func, RGPR(rs), RGPR(rt)))); }
					return(true);
					break;
				}
				case 0x2a: {
					/* SLT */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					jit_label_t temp_1 = jit_label_undefined, temp_2 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, RGPR(rs), RGPR(rt)), &temp_1);
					jit_label_t temp_3 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rd), make_uint(0x0)), &temp_3);
					WGPR(rd, make_uint(0x1));
					jit_insn_label(func, &temp_3);
					jit_insn_branch(func, &temp_2);
					jit_insn_label(func, &temp_1);
					jit_label_t temp_4 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rd), make_uint(0x0)), &temp_4);
					WGPR(rd, make_uint(0x0));
					jit_insn_label(func, &temp_4);
					jit_insn_label(func, &temp_2);
					return(true);
					break;
				}
				case 0x2b: {
					/* SLTU */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rs);
					DEP(rt);
					RES(rd);
					END_DEPRES();
					jit_label_t temp_5 = jit_label_undefined, temp_6 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, RGPR(rs), RGPR(rt)), &temp_5);
					jit_label_t temp_7 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rd), make_uint(0x0)), &temp_7);
					WGPR(rd, make_uint(0x1));
					jit_insn_label(func, &temp_7);
					jit_insn_branch(func, &temp_6);
					jit_insn_label(func, &temp_5);
					jit_label_t temp_8 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rd), make_uint(0x0)), &temp_8);
					WGPR(rd, make_uint(0x0));
					jit_insn_label(func, &temp_8);
					jit_insn_label(func, &temp_6);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x1: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLTZ */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					BEGIN_DEPRES();
					DEP(rs);
					END_DEPRES();
					uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
					jit_label_t temp_9 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_lt(func, RGPR(rs), make_uint(0x0)), &temp_9);
					call_branch(func, make_uint(target));
					jit_insn_label(func, &temp_9);
					branched = true;
					return(true);
					break;
				}
				case 0x1: {
					/* BGEZ */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					BEGIN_DEPRES();
					DEP(rs);
					END_DEPRES();
					uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
					jit_label_t temp_10 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_ge(func, RGPR(rs), make_uint(0x0)), &temp_10);
					call_branch(func, make_uint(target));
					jit_insn_label(func, &temp_10);
					branched = true;
					return(true);
					break;
				}
				case 0x10: {
					/* BLTZAL */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					BEGIN_DEPRES();
					DEP(rs);
					RES(0x1f);
					END_DEPRES();
					if((0x1f) != (0x0)) { WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4))); }
					uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
					jit_label_t temp_11 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_lt(func, RGPR(rs), make_uint(0x0)), &temp_11);
					call_branch(func, make_uint(target));
					jit_insn_label(func, &temp_11);
					branched = true;
					return(true);
					break;
				}
				case 0x11: {
					/* BGEZAL */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					BEGIN_DEPRES();
					DEP(rs);
					RES(0x1f);
					END_DEPRES();
					if((0x1f) != (0x0)) { WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4))); }
					uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
					jit_label_t temp_12 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_ge(func, RGPR(rs), make_uint(0x0)), &temp_12);
					call_branch(func, make_uint(target));
					jit_insn_label(func, &temp_12);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x2: {
			/* J */
			WPC(make_uint(pc));
			uint32_t imm = (inst) & (0x3ffffff);
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + (0x1c);
			call_branch(func, make_uint(target));
			branched = true;
			return(true);
			break;
		}
		case 0x3: {
			/* JAL */
			WPC(make_uint(pc));
			uint32_t imm = (inst) & (0x3ffffff);
			BEGIN_DEPRES();
			RES(0x1f);
			END_DEPRES();
			if((0x1f) != (0x0)) { WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4))); }
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + (0x1c);
			call_branch(func, make_uint(target));
			branched = true;
			return(true);
			break;
		}
		case 0x4: {
			/* BEQ */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			DEP(rt);
			END_DEPRES();
			uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
			jit_label_t temp_13 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_eq(func, RGPR(rs), RGPR(rt)), &temp_13);
			call_branch(func, make_uint(target));
			jit_insn_label(func, &temp_13);
			branched = true;
			return(true);
			break;
		}
		case 0x5: {
			/* BNE */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			DEP(rt);
			END_DEPRES();
			uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
			jit_label_t temp_14 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, RGPR(rs), RGPR(rt)), &temp_14);
			call_branch(func, make_uint(target));
			jit_insn_label(func, &temp_14);
			branched = true;
			return(true);
			break;
		}
		case 0x6: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLEZ */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					BEGIN_DEPRES();
					DEP(rs);
					END_DEPRES();
					uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
					jit_label_t temp_15 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_le(func, RGPR(rs), make_uint(0x0)), &temp_15);
					call_branch(func, make_uint(target));
					jit_insn_label(func, &temp_15);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x7: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BGTZ */
					WPC(make_uint(pc));
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					BEGIN_DEPRES();
					DEP(rs);
					END_DEPRES();
					uint32_t target = ((pc) + (0x4)) + (signext(0x12, (imm) << (0x2)));
					jit_label_t temp_16 = jit_label_undefined;
					jit_insn_branch_if_not(func, jit_insn_gt(func, RGPR(rs), make_uint(0x0)), &temp_16);
					call_branch(func, make_uint(target));
					jit_insn_label(func, &temp_16);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x8: {
			/* ADDI */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = signext(0x10, imm);
			call_overflow(func, RGPR(rs), make_uint(eimm), 1);
			if((rt) != (0x0)) { WGPR(rt, jit_insn_add(func, RGPR(rs), make_uint(eimm))); }
			return(true);
			break;
		}
		case 0x9: {
			/* ADDIU */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = signext(0x10, imm);
			if((rt) != (0x0)) { WGPR(rt, jit_insn_add(func, RGPR(rs), make_uint(eimm))); }
			return(true);
			break;
		}
		case 0xa: {
			/* SLTI */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = signext(0x10, imm);
			jit_label_t temp_17 = jit_label_undefined, temp_18 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_lt(func, RGPR(rs), make_uint(eimm)), &temp_17);
			jit_label_t temp_19 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_19);
			WGPR(rt, make_uint(0x1));
			jit_insn_label(func, &temp_19);
			jit_insn_branch(func, &temp_18);
			jit_insn_label(func, &temp_17);
			jit_label_t temp_20 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_20);
			WGPR(rt, make_uint(0x0));
			jit_insn_label(func, &temp_20);
			jit_insn_label(func, &temp_18);
			return(true);
			break;
		}
		case 0xb: {
			/* SLTIU */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = signext(0x10, imm);
			jit_label_t temp_21 = jit_label_undefined, temp_22 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_lt(func, RGPR(rs), make_uint(eimm)), &temp_21);
			jit_label_t temp_23 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_23);
			WGPR(rt, make_uint(0x1));
			jit_insn_label(func, &temp_23);
			jit_insn_branch(func, &temp_22);
			jit_insn_label(func, &temp_21);
			jit_label_t temp_24 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_24);
			WGPR(rt, make_uint(0x0));
			jit_insn_label(func, &temp_24);
			jit_insn_label(func, &temp_22);
			return(true);
			break;
		}
		case 0xc: {
			/* ANDI */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = 0x10;
			if((rt) != (0x0)) { WGPR(rt, jit_insn_and(func, RGPR(rs), make_uint(eimm))); }
			return(true);
			break;
		}
		case 0xd: {
			/* ORI */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = 0x10;
			if((rt) != (0x0)) { WGPR(rt, jit_insn_or(func, RGPR(rs), make_uint(eimm))); }
			return(true);
			break;
		}
		case 0xe: {
			/* XORI */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t eimm = 0x10;
			if((rt) != (0x0)) { WGPR(rt, jit_insn_xor(func, RGPR(rs), make_uint(eimm))); }
			return(true);
			break;
		}
		case 0xf: {
			/* LUI */
			WPC(make_uint(pc));
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			RES(rt);
			END_DEPRES();
			if((rt) != (0x0)) { WGPR(rt, jit_insn_shl(func, make_uint(imm), make_uint(0x10))); }
			return(true);
			break;
		}
		case 0x10: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copcreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_0 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x11: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copcreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_1 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x12: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copcreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_2 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x13: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					RES(rt);
					END_DEPRES();
					if((rt) != (0x0)) { WGPR(rt, call_read_copcreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					BEGIN_DEPRES();
					DEP(rt);
					END_DEPRES();
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_3 */
					WPC(make_uint(pc));
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					call_copfun(func, cop, cofun);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x20: {
			/* LB */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { WGPR(rt, call_signext(func, 8, call_load_memory(func, 8, jit_insn_add(func, RGPR(rs), make_uint(offset))))); }
			return(true);
			break;
		}
		case 0x21: {
			/* LH */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { WGPR(rt, call_signext(func, 16, call_load_memory(func, 16, jit_insn_add(func, RGPR(rs), make_uint(offset))))); }
			return(true);
			break;
		}
		case 0x23: {
			/* LW */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { WGPR(rt, call_load_memory(func, 32, jit_insn_add(func, RGPR(rs), make_uint(offset)))); }
			return(true);
			break;
		}
		case 0x24: {
			/* LBU */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { WGPR(rt, call_load_memory(func, 8, jit_insn_add(func, RGPR(rs), make_uint(offset)))); }
			return(true);
			break;
		}
		case 0x25: {
			/* LHU */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			RES(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { WGPR(rt, call_load_memory(func, 16, jit_insn_add(func, RGPR(rs), make_uint(offset)))); }
			return(true);
			break;
		}
		case 0x28: {
			/* SB */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			DEP(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 8, jit_insn_add(func, RGPR(rs), make_uint(offset)), RGPR(rt));
			return(true);
			break;
		}
		case 0x29: {
			/* SH */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			DEP(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 16, jit_insn_add(func, RGPR(rs), make_uint(offset)), RGPR(rt));
			return(true);
			break;
		}
		case 0x2b: {
			/* SW */
			WPC(make_uint(pc));
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			BEGIN_DEPRES();
			DEP(rs);
			DEP(rt);
			END_DEPRES();
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 32, jit_insn_add(func, RGPR(rs), make_uint(offset)), RGPR(rt));
			return(true);
			break;
		}
	}
	return false;
}
