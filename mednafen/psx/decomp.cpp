/* Autogenerated from insts.td. DO NOT EDIT */
#include "decomp.h"

// This is passed as an array of uint32_t
typedef struct state_s {
	uint32_t reg[32];
	uint32_t pc;
	uint32_t hi, lo;
	uint32_t fake; // Used for load delay stuff
} state_t;

jit_value_t _make_ptr(jit_function_t func, void *val) {
	return jit_value_create_nint_constant(func, jit_type_void_ptr, (jit_nint) val);
}
#define make_ptr(val) _make_ptr(func, (val))
jit_value_t _make_uint(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_uint, val);
}
#define make_uint(val) _make_uint(func, (val))
jit_value_t _make_ubyte(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_ubyte, val);
}
#define make_ubyte(val) _make_ubyte(func, (val))

#define LOAD(ptr, type) jit_insn_load_relative(func, (ptr), 0, type)
#define STORE(ptr, value) jit_insn_store_relative(func, (ptr), 0, (value))
#define CAST(value, type) jit_insn_convert(func, (value), (type), 0)

#define WGPR(gpr, val) do { if(gpr != 0) jit_insn_store_elem(func, state, make_uint(gpr), (val)); } while(0)
#define WGPR_VAL(gpr, val) jit_insn_store_elem(func, state, gpr, (val))
#define RGPR(gpr) ((gpr == 0) ? make_uint(0) : jit_insn_load_elem(func, state, make_uint(gpr), jit_type_uint))

#define WPC(val) jit_insn_store_relative(func, state, 32*4, (val));
#define RPC() jit_insn_load_relative(func, state, 32*4, jit_type_uint)
#define WHI(val) jit_insn_store_relative(func, state, 33*4, (val));
#define RHI() jit_insn_load_relative(func, state, 33*4, jit_type_uint)
#define WLO(val) jit_insn_store_relative(func, state, 34*4, (val));
#define RLO() jit_insn_load_relative(func, state, 34*4, jit_type_uint)

#define DEP(gpr) do { if(gpr != 0) WRA(make_ubyte(gpr), make_ubyte(0)); } while(0)
#define RES(gpr) do { if(gpr != 0) WRA(make_ubyte(gpr), make_ubyte(0)); } while(0)

jit_type_t sig_0, sig_1, sig_1_ptr, sig_2, sig_3, sig_4;
jit_value_t state, _ReadAbsorb, _ReadAbsorbWhich, _ReadFudge, LDWhich, LDValue, LDAbsorb;

#define WRA(idx, val) jit_insn_store_relative(func, jit_insn_add(func, _ReadAbsorb, idx), 0, (val))

void do_lds(jit_function_t func) {
	jit_value_t ldw = LOAD(LDWhich, jit_type_uint);
	WGPR_VAL(ldw, LOAD(LDValue, jit_type_uint));
	WRA(ldw, jit_insn_load(func, LDAbsorb));
	STORE(_ReadFudge, CAST(ldw, jit_type_ubyte));
	STORE(_ReadAbsorbWhich, CAST(jit_insn_or(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), jit_insn_and(func, ldw, make_uint(0x1F))), jit_type_ubyte));
	STORE(LDWhich, make_uint(35));
}

void defer_set(jit_function_t func, int reg, jit_value_t val) {
    STORE(LDWhich, make_uint(reg));
	STORE(LDValue, val);
}

void call_store_memory(jit_function_t func, int size, jit_value_t ptr, jit_value_t val, uint32_t pc) {
	jit_value_t args[] = {make_uint(size), ptr, val, make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) store_memory, sig_4, args, 4, 0);
}

jit_value_t call_load_memory(jit_function_t func, int size, jit_value_t ptr) {
	jit_value_t args[] = {make_uint(size), ptr};
	return jit_insn_call_native(func, 0, (void *) load_memory, sig_2, args, 2, 0);
}

jit_value_t call_read_copreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copreg, sig_2, args, 2, 0);
}

jit_value_t call_read_copcreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copcreg, sig_2, args, 2, 0);
}

void call_write_copreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copreg, sig_3, args, 3, 0);
}

void call_write_copcreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copcreg, sig_3, args, 3, 0);
}

jit_value_t call_copfun(jit_function_t func, int cop, int cofun, uint32_t inst) {
	jit_value_t args[] = {make_uint(cop), make_uint(cofun), make_uint(inst)};
	return jit_insn_call_native(func, 0, (void *) copfun, sig_3, args, 3, 0);
}

void call_step(jit_function_t func, uint32_t arg) {
	jit_value_t args[] = {make_uint(arg)};
	jit_insn_call_native(func, 0, (void *) step, sig_1, args, 1, 0);
}

int32_t signext(int size, uint32_t imm) {
	if(size == 8)
		return (int8_t) ((uint8_t) imm);
	else if(size == 16)
		return (int16_t) ((uint16_t) imm);
	else if(size == 32)
		return (int32_t) imm;
	else if(imm & (1 << (size - 1)))
		return (int32_t) imm - (1 << size);
	else
		return (int32_t) imm;
}

jit_value_t call_signext(jit_function_t func, int size, jit_value_t val) {
	jit_value_t args[] = {make_uint(size), val};
	return jit_insn_call_native(func, 0, (void *) signext, sig_2, args, 2, 0);
}

void call_syscall(jit_function_t func, uint32_t code, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {make_uint(code), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) ps_syscall, sig_3, args, 3, 0);
}

void break_(int code) {
}

void call_break(jit_function_t func, uint32_t code) {
	jit_value_t args[] = {make_uint(code)};
	jit_insn_call_native(func, 0, (void *) break_, sig_1, args, 1, 0);
}

void call_branch(jit_function_t func, jit_value_t val) {
	jit_value_t args[] = {val};
	jit_insn_call_native(func, 0, (void *) branch, sig_1, args, 1, 0);
}

void call_branch_block(jit_function_t func, block_t *block) {
	jit_value_t args[] = {make_ptr(block)};
	jit_insn_call_native(func, 0, (void *) branch_block, sig_1_ptr, args, 1, 0);
}

void overflow(uint32_t a, uint32_t b, int dir) {
	// XXX: Implement overflow checks.
}

void call_overflow(jit_function_t func, jit_value_t a, jit_value_t b, int dir) {
	jit_value_t args[] = {a, b, make_uint(dir)};
	jit_insn_call_native(func, 0, (void *) overflow, sig_3, args, 3, 0);
}

void call_timestamp_inc(jit_function_t func, uint32_t amount) {
	jit_value_t args[] = {make_uint(amount)};
	jit_insn_call_native(func, 0, (void *) timestamp_inc, sig_1, args, 1, 0);
}

void call_muldiv_delay(jit_function_t func, jit_value_t a, jit_value_t b) {
	jit_value_t args[] = {a, b};
	jit_insn_call_native(func, 0, (void *) muldiv_delay, sig_2, args, 2, 0);
}

void call_absorb_muldiv_delay(jit_function_t func) {
	jit_insn_call_native(func, 0, (void *) absorb_muldiv_delay, sig_0, NULL, 0, 0);
}

void call_check_irq(jit_function_t func, uint32_t pc) {
	jit_value_t args[] = {make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) check_irq, sig_1, args, 1, 0);
}

jit_context_t context;

jit_type_t block_sig;

void init_decompiler() {
	context = jit_context_create();
	jit_context_build_start(context);

	jit_type_t s4params[4];
	s4params[0] = jit_type_uint;
	s4params[1] = jit_type_uint;
	s4params[2] = jit_type_uint;
	s4params[3] = jit_type_uint;
	sig_4 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s4params, 4, 1);
	
	jit_type_t s3params[3];
	s3params[0] = jit_type_uint;
	s3params[1] = jit_type_uint;
	s3params[2] = jit_type_uint;
	sig_3 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s3params, 3, 1);
	
	jit_type_t sparams[2];
	sparams[0] = jit_type_uint;
	sparams[1] = jit_type_uint;
	sig_2 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, sparams, 2, 1);
	
	jit_type_t lparams[1];
	lparams[0] = jit_type_uint;
	sig_1 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, lparams, 1, 1);

	jit_type_t pparams[1];
	pparams[0] = jit_type_void_ptr;
	sig_1_ptr = jit_type_create_signature(jit_abi_cdecl, jit_type_void, pparams, 1, 1);

	sig_0 = jit_type_create_signature(jit_abi_cdecl, jit_type_void, NULL, 0, 1);

	jit_type_t params[7];
	params[0] = jit_type_create_pointer(jit_type_uint, 0); // State
	params[1] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadAbsorb
	params[2] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadAbsorbWhich
	params[3] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadFudge
	params[4] = jit_type_create_pointer(jit_type_uint, 0); // LDWhich
	params[5] = jit_type_create_pointer(jit_type_uint, 0); // LDValue
	params[6] = jit_type_create_pointer(jit_type_uint, 0); // LDAbsorb
	block_sig = jit_type_create_signature(jit_abi_cdecl, jit_type_void, params, 7, 1);
}

jit_function_t create_function() {
	jit_function_t func = jit_function_create(context, block_sig);
	state = jit_value_get_param(func, 0);
	_ReadAbsorb = jit_value_get_param(func, 1);
	_ReadAbsorbWhich = jit_value_get_param(func, 2);
	_ReadFudge = jit_value_get_param(func, 3);
	LDWhich = jit_value_get_param(func, 4);
	LDValue = jit_value_get_param(func, 5);
	LDAbsorb = jit_value_get_param(func, 6);
	return func;
}

block_func_t compile_function(jit_function_t func) {
	//jit_dump_function(stdout, func, "block");
	jit_function_compile(func);
	jit_context_build_end(context);
	//jit_dump_function(stdout, func, "block");
	return (block_func_t) jit_function_to_closure(func);
}

#define INSNLOG(name) printf(#name "\n")

bool decompile(jit_function_t func, uint32_t pc, uint32_t inst, bool &branched, bool &no_delay) {
	switch((inst) >> (0x1a)) {
		case 0x0: {
			switch((inst) & (0x3f)) {
				case 0x0: {
					/* SLL */
					jit_label_t temp_1 = jit_label_undefined, temp_2 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_1);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_2);
					jit_insn_label(func, &temp_1);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_2);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_shl(func, RGPR(rt), make_uint(shamt)));
					return(true);
					break;
				}
				case 0x2: {
					/* SRL */
					jit_label_t temp_3 = jit_label_undefined, temp_4 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_3);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_4);
					jit_insn_label(func, &temp_3);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_4);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_ushr(func, RGPR(rt), make_uint(shamt)));
					return(true);
					break;
				}
				case 0x3: {
					/* SRA */
					jit_label_t temp_5 = jit_label_undefined, temp_6 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_5);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_6);
					jit_insn_label(func, &temp_5);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_6);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_sshr(func, RGPR(rt), make_uint(shamt)));
					return(true);
					break;
				}
				case 0x4: {
					/* SLLV */
					jit_label_t temp_7 = jit_label_undefined, temp_8 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_7);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_8);
					jit_insn_label(func, &temp_7);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_8);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_shl(func, RGPR(rt), RGPR(rs)));
					return(true);
					break;
				}
				case 0x6: {
					/* SRLV */
					jit_label_t temp_9 = jit_label_undefined, temp_10 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_9);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_10);
					jit_insn_label(func, &temp_9);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_10);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_ushr(func, RGPR(rt), RGPR(rs)));
					return(true);
					break;
				}
				case 0x7: {
					/* SRAV */
					jit_label_t temp_11 = jit_label_undefined, temp_12 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_11);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_12);
					jit_insn_label(func, &temp_11);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_12);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_sshr(func, RGPR(rt), RGPR(rs)));
					return(true);
					break;
				}
				case 0x8: {
					/* JR */
					jit_label_t temp_13 = jit_label_undefined, temp_14 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_13);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_14);
					jit_insn_label(func, &temp_13);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_14);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					DEP(rs);
					do_lds(func);
					call_branch(func, RGPR(rs));
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* JALR */
					jit_label_t temp_15 = jit_label_undefined, temp_16 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_15);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_16);
					jit_insn_label(func, &temp_15);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_16);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					call_branch(func, RGPR(rs));
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* SYSCALL */
					jit_label_t temp_17 = jit_label_undefined, temp_18 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_17);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_18);
					jit_insn_label(func, &temp_17);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_18);
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					do_lds(func);
					call_syscall(func, code, pc, inst);
					branched = true;
					no_delay = true;
					return(true);
					break;
				}
				case 0xd: {
					/* BREAK */
					jit_label_t temp_19 = jit_label_undefined, temp_20 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_19);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_20);
					jit_insn_label(func, &temp_19);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_20);
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					do_lds(func);
					call_break(func, code);
					return(true);
					break;
				}
				case 0x10: {
					/* MFHI */
					jit_label_t temp_21 = jit_label_undefined, temp_22 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_21);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_22);
					jit_insn_label(func, &temp_21);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_22);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rd);
					do_lds(func);
					WGPR(rd, RHI());
					call_absorb_muldiv_delay(func);
					return(true);
					break;
				}
				case 0x11: {
					/* MTHI */
					jit_label_t temp_23 = jit_label_undefined, temp_24 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_23);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_24);
					jit_insn_label(func, &temp_23);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_24);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rd);
					do_lds(func);
					WHI(RGPR(rd))
					return(true);
					break;
				}
				case 0x12: {
					/* MFLO */
					jit_label_t temp_25 = jit_label_undefined, temp_26 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_25);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_26);
					jit_insn_label(func, &temp_25);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_26);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rd);
					do_lds(func);
					WGPR(rd, RLO());
					call_absorb_muldiv_delay(func);
					return(true);
					break;
				}
				case 0x13: {
					/* MTLO */
					jit_label_t temp_27 = jit_label_undefined, temp_28 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_27);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_28);
					jit_insn_label(func, &temp_27);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_28);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rd);
					do_lds(func);
					WLO(RGPR(rd))
					return(true);
					break;
				}
				case 0x18: {
					/* MULT */
					jit_label_t temp_29 = jit_label_undefined, temp_30 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_29);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_30);
					jit_insn_label(func, &temp_29);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_30);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					do_lds(func);
					jit_value_t _t = jit_insn_mul(func, jit_insn_convert(func, RGPR(rs), jit_type_long, 0), jit_insn_convert(func, RGPR(rt), jit_type_long, 0));
					WLO(jit_insn_convert(func, _t, jit_type_uint, 0))
					return(true);
					break;
				}
				case 0x19: {
					/* MULTU */
					jit_label_t temp_31 = jit_label_undefined, temp_32 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_31);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_32);
					jit_insn_label(func, &temp_31);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_32);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					do_lds(func);
					jit_value_t _t = jit_insn_mul(func, jit_insn_convert(func, RGPR(rs), jit_type_ulong, 0), jit_insn_convert(func, RGPR(rt), jit_type_ulong, 0));
					WLO(jit_insn_convert(func, _t, jit_type_uint, 0))
					return(true);
					break;
				}
				case 0x1a: {
					/* DIV */
					jit_label_t temp_33 = jit_label_undefined, temp_34 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_33);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_34);
					jit_insn_label(func, &temp_33);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_34);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					do_lds(func);
					jit_label_t temp_35 = jit_label_undefined, temp_36 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, RGPR(rt), make_uint(0x0)), &temp_35);
					jit_label_t temp_37 = jit_label_undefined, temp_38 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_and(func, jit_insn_eq(func, RGPR(rs), make_uint(0x80000000)), jit_insn_eq(func, RGPR(rt), make_uint(0xffffffff))), &temp_37);
					WLO(jit_insn_div(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), jit_insn_convert(func, RGPR(rt), jit_type_int, 0)))
					WHI(jit_insn_rem(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), jit_insn_convert(func, RGPR(rt), jit_type_int, 0)))
					call_muldiv_delay(func, make_uint(0x0), make_uint(0x0));
					jit_insn_branch(func, &temp_38);
					jit_insn_label(func, &temp_37);
					WLO(make_uint(0x80000000))
					WHI(make_uint(0x0))
					jit_insn_label(func, &temp_38);
					jit_insn_branch(func, &temp_36);
					jit_insn_label(func, &temp_35);
					jit_label_t temp_39 = jit_label_undefined, temp_40 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ne(func, jit_insn_and(func, RGPR(rs), make_uint(0x80000000)), make_uint(0x0)), &temp_39);
					WLO(make_uint(0xffffffff))
					jit_insn_branch(func, &temp_40);
					jit_insn_label(func, &temp_39);
					WLO(make_uint(0x1))
					jit_insn_label(func, &temp_40);
					WHI(RGPR(rs))
					jit_insn_label(func, &temp_36);
					return(true);
					break;
				}
				case 0x1b: {
					/* DIVU */
					jit_label_t temp_41 = jit_label_undefined, temp_42 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_41);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_42);
					jit_insn_label(func, &temp_41);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_42);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					do_lds(func);
					jit_label_t temp_43 = jit_label_undefined, temp_44 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, RGPR(rt), make_uint(0x0)), &temp_43);
					WLO(jit_insn_div(func, RGPR(rs), RGPR(rt)))
					WHI(jit_insn_rem(func, RGPR(rs), RGPR(rt)))
					call_muldiv_delay(func, make_uint(0x0), make_uint(0x0));
					jit_insn_branch(func, &temp_44);
					jit_insn_label(func, &temp_43);
					WLO(make_uint(0xffffffff))
					WHI(RGPR(rs))
					jit_insn_label(func, &temp_44);
					return(true);
					break;
				}
				case 0x20: {
					/* ADD */
					jit_label_t temp_45 = jit_label_undefined, temp_46 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_45);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_46);
					jit_insn_label(func, &temp_45);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_46);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					call_overflow(func, RGPR(rs), RGPR(rt), 1);
					WGPR(rd, jit_insn_add(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x21: {
					/* ADDU */
					jit_label_t temp_47 = jit_label_undefined, temp_48 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_47);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_48);
					jit_insn_label(func, &temp_47);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_48);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_add(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x22: {
					/* SUB */
					jit_label_t temp_49 = jit_label_undefined, temp_50 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_49);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_50);
					jit_insn_label(func, &temp_49);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_50);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					call_overflow(func, RGPR(rs), RGPR(rt), -1);
					WGPR(rd, jit_insn_sub(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x23: {
					/* SUBU */
					jit_label_t temp_51 = jit_label_undefined, temp_52 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_51);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_52);
					jit_insn_label(func, &temp_51);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_52);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_sub(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x24: {
					/* AND */
					jit_label_t temp_53 = jit_label_undefined, temp_54 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_53);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_54);
					jit_insn_label(func, &temp_53);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_54);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_and(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x25: {
					/* OR */
					jit_label_t temp_55 = jit_label_undefined, temp_56 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_55);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_56);
					jit_insn_label(func, &temp_55);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_56);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_or(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x26: {
					/* XOR */
					jit_label_t temp_57 = jit_label_undefined, temp_58 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_57);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_58);
					jit_insn_label(func, &temp_57);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_58);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_xor(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
				case 0x27: {
					/* NOR */
					jit_label_t temp_59 = jit_label_undefined, temp_60 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_59);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_60);
					jit_insn_label(func, &temp_59);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_60);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_not(func, jit_insn_or(func, RGPR(rs), RGPR(rt))));
					return(true);
					break;
				}
				case 0x2a: {
					/* SLT */
					jit_label_t temp_61 = jit_label_undefined, temp_62 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_61);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_62);
					jit_insn_label(func, &temp_61);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_62);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), jit_insn_convert(func, RGPR(rt), jit_type_int, 0)));
					return(true);
					break;
				}
				case 0x2b: {
					/* SLTU */
					jit_label_t temp_63 = jit_label_undefined, temp_64 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_63);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_64);
					jit_insn_label(func, &temp_63);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_64);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					do_lds(func);
					WGPR(rd, jit_insn_lt(func, RGPR(rs), RGPR(rt)));
					return(true);
					break;
				}
			}
			break;
		}
		case 0x1: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLTZanonymous_0 */
					jit_label_t temp_65 = jit_label_undefined, temp_66 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_65);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_66);
					jit_insn_label(func, &temp_65);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_66);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_67 = jit_label_undefined, temp_68 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_67);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_68);
					jit_insn_label(func, &temp_67);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_68);
					branched = true;
					return(true);
					break;
				}
				case 0x1: {
					/* BGEZanonymous_0 */
					jit_label_t temp_69 = jit_label_undefined, temp_70 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_69);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_70);
					jit_insn_label(func, &temp_69);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_70);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_71 = jit_label_undefined, temp_72 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_71);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_72);
					jit_insn_label(func, &temp_71);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_72);
					branched = true;
					return(true);
					break;
				}
				case 0x2: {
					/* BLTZanonymous_1 */
					jit_label_t temp_73 = jit_label_undefined, temp_74 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_73);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_74);
					jit_insn_label(func, &temp_73);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_74);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_75 = jit_label_undefined, temp_76 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_75);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_76);
					jit_insn_label(func, &temp_75);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_76);
					branched = true;
					return(true);
					break;
				}
				case 0x3: {
					/* BGEZanonymous_1 */
					jit_label_t temp_77 = jit_label_undefined, temp_78 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_77);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_78);
					jit_insn_label(func, &temp_77);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_78);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_79 = jit_label_undefined, temp_80 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_79);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_80);
					jit_insn_label(func, &temp_79);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_80);
					branched = true;
					return(true);
					break;
				}
				case 0x4: {
					/* BLTZanonymous_2 */
					jit_label_t temp_81 = jit_label_undefined, temp_82 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_81);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_82);
					jit_insn_label(func, &temp_81);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_82);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_83 = jit_label_undefined, temp_84 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_83);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_84);
					jit_insn_label(func, &temp_83);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_84);
					branched = true;
					return(true);
					break;
				}
				case 0x5: {
					/* BGEZanonymous_2 */
					jit_label_t temp_85 = jit_label_undefined, temp_86 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_85);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_86);
					jit_insn_label(func, &temp_85);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_86);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_87 = jit_label_undefined, temp_88 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_87);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_88);
					jit_insn_label(func, &temp_87);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_88);
					branched = true;
					return(true);
					break;
				}
				case 0x6: {
					/* BLTZanonymous_3 */
					jit_label_t temp_89 = jit_label_undefined, temp_90 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_89);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_90);
					jit_insn_label(func, &temp_89);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_90);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_91 = jit_label_undefined, temp_92 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_91);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_92);
					jit_insn_label(func, &temp_91);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_92);
					branched = true;
					return(true);
					break;
				}
				case 0x7: {
					/* BGEZanonymous_3 */
					jit_label_t temp_93 = jit_label_undefined, temp_94 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_93);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_94);
					jit_insn_label(func, &temp_93);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_94);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_95 = jit_label_undefined, temp_96 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_95);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_96);
					jit_insn_label(func, &temp_95);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_96);
					branched = true;
					return(true);
					break;
				}
				case 0x8: {
					/* BLTZanonymous_4 */
					jit_label_t temp_97 = jit_label_undefined, temp_98 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_97);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_98);
					jit_insn_label(func, &temp_97);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_98);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_99 = jit_label_undefined, temp_100 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_99);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_100);
					jit_insn_label(func, &temp_99);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_100);
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* BGEZanonymous_4 */
					jit_label_t temp_101 = jit_label_undefined, temp_102 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_101);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_102);
					jit_insn_label(func, &temp_101);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_102);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_103 = jit_label_undefined, temp_104 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_103);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_104);
					jit_insn_label(func, &temp_103);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_104);
					branched = true;
					return(true);
					break;
				}
				case 0xa: {
					/* BLTZanonymous_5 */
					jit_label_t temp_105 = jit_label_undefined, temp_106 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_105);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_106);
					jit_insn_label(func, &temp_105);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_106);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_107 = jit_label_undefined, temp_108 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_107);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_108);
					jit_insn_label(func, &temp_107);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_108);
					branched = true;
					return(true);
					break;
				}
				case 0xb: {
					/* BGEZanonymous_5 */
					jit_label_t temp_109 = jit_label_undefined, temp_110 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_109);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_110);
					jit_insn_label(func, &temp_109);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_110);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_111 = jit_label_undefined, temp_112 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_111);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_112);
					jit_insn_label(func, &temp_111);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_112);
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* BLTZanonymous_6 */
					jit_label_t temp_113 = jit_label_undefined, temp_114 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_113);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_114);
					jit_insn_label(func, &temp_113);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_114);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_115 = jit_label_undefined, temp_116 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_115);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_116);
					jit_insn_label(func, &temp_115);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_116);
					branched = true;
					return(true);
					break;
				}
				case 0xd: {
					/* BGEZanonymous_6 */
					jit_label_t temp_117 = jit_label_undefined, temp_118 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_117);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_118);
					jit_insn_label(func, &temp_117);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_118);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_119 = jit_label_undefined, temp_120 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_119);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_120);
					jit_insn_label(func, &temp_119);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_120);
					branched = true;
					return(true);
					break;
				}
				case 0xe: {
					/* BLTZanonymous_7 */
					jit_label_t temp_121 = jit_label_undefined, temp_122 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_121);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_122);
					jit_insn_label(func, &temp_121);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_122);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_123 = jit_label_undefined, temp_124 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_123);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_124);
					jit_insn_label(func, &temp_123);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_124);
					branched = true;
					return(true);
					break;
				}
				case 0xf: {
					/* BGEZanonymous_7 */
					jit_label_t temp_125 = jit_label_undefined, temp_126 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_125);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_126);
					jit_insn_label(func, &temp_125);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_126);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_127 = jit_label_undefined, temp_128 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_127);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_128);
					jit_insn_label(func, &temp_127);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_128);
					branched = true;
					return(true);
					break;
				}
				case 0x10: {
					/* BLTZALanonymous_0 */
					jit_label_t temp_129 = jit_label_undefined, temp_130 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_129);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_130);
					jit_insn_label(func, &temp_129);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_130);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_131 = jit_label_undefined, temp_132 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_131);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_132);
					jit_insn_label(func, &temp_131);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_132);
					branched = true;
					return(true);
					break;
				}
				case 0x11: {
					/* BGEZALanonymous_0 */
					jit_label_t temp_133 = jit_label_undefined, temp_134 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_133);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_134);
					jit_insn_label(func, &temp_133);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_134);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_135 = jit_label_undefined, temp_136 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_135);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_136);
					jit_insn_label(func, &temp_135);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_136);
					branched = true;
					return(true);
					break;
				}
				case 0x12: {
					/* BLTZALanonymous_1 */
					jit_label_t temp_137 = jit_label_undefined, temp_138 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_137);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_138);
					jit_insn_label(func, &temp_137);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_138);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_139 = jit_label_undefined, temp_140 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_139);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_140);
					jit_insn_label(func, &temp_139);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_140);
					branched = true;
					return(true);
					break;
				}
				case 0x13: {
					/* BGEZALanonymous_1 */
					jit_label_t temp_141 = jit_label_undefined, temp_142 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_141);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_142);
					jit_insn_label(func, &temp_141);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_142);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_143 = jit_label_undefined, temp_144 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_143);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_144);
					jit_insn_label(func, &temp_143);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_144);
					branched = true;
					return(true);
					break;
				}
				case 0x14: {
					/* BLTZALanonymous_2 */
					jit_label_t temp_145 = jit_label_undefined, temp_146 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_145);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_146);
					jit_insn_label(func, &temp_145);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_146);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_147 = jit_label_undefined, temp_148 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_147);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_148);
					jit_insn_label(func, &temp_147);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_148);
					branched = true;
					return(true);
					break;
				}
				case 0x15: {
					/* BGEZALanonymous_2 */
					jit_label_t temp_149 = jit_label_undefined, temp_150 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_149);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_150);
					jit_insn_label(func, &temp_149);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_150);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_151 = jit_label_undefined, temp_152 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_151);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_152);
					jit_insn_label(func, &temp_151);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_152);
					branched = true;
					return(true);
					break;
				}
				case 0x16: {
					/* BLTZALanonymous_3 */
					jit_label_t temp_153 = jit_label_undefined, temp_154 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_153);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_154);
					jit_insn_label(func, &temp_153);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_154);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_155 = jit_label_undefined, temp_156 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_155);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_156);
					jit_insn_label(func, &temp_155);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_156);
					branched = true;
					return(true);
					break;
				}
				case 0x17: {
					/* BGEZALanonymous_3 */
					jit_label_t temp_157 = jit_label_undefined, temp_158 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_157);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_158);
					jit_insn_label(func, &temp_157);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_158);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_159 = jit_label_undefined, temp_160 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_159);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_160);
					jit_insn_label(func, &temp_159);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_160);
					branched = true;
					return(true);
					break;
				}
				case 0x18: {
					/* BLTZALanonymous_4 */
					jit_label_t temp_161 = jit_label_undefined, temp_162 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_161);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_162);
					jit_insn_label(func, &temp_161);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_162);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_163 = jit_label_undefined, temp_164 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_163);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_164);
					jit_insn_label(func, &temp_163);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_164);
					branched = true;
					return(true);
					break;
				}
				case 0x19: {
					/* BGEZALanonymous_4 */
					jit_label_t temp_165 = jit_label_undefined, temp_166 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_165);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_166);
					jit_insn_label(func, &temp_165);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_166);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_167 = jit_label_undefined, temp_168 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_167);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_168);
					jit_insn_label(func, &temp_167);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_168);
					branched = true;
					return(true);
					break;
				}
				case 0x1a: {
					/* BLTZALanonymous_5 */
					jit_label_t temp_169 = jit_label_undefined, temp_170 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_169);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_170);
					jit_insn_label(func, &temp_169);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_170);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_171 = jit_label_undefined, temp_172 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_171);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_172);
					jit_insn_label(func, &temp_171);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_172);
					branched = true;
					return(true);
					break;
				}
				case 0x1b: {
					/* BGEZALanonymous_5 */
					jit_label_t temp_173 = jit_label_undefined, temp_174 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_173);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_174);
					jit_insn_label(func, &temp_173);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_174);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_175 = jit_label_undefined, temp_176 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_175);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_176);
					jit_insn_label(func, &temp_175);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_176);
					branched = true;
					return(true);
					break;
				}
				case 0x1c: {
					/* BLTZALanonymous_6 */
					jit_label_t temp_177 = jit_label_undefined, temp_178 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_177);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_178);
					jit_insn_label(func, &temp_177);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_178);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_179 = jit_label_undefined, temp_180 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_179);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_180);
					jit_insn_label(func, &temp_179);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_180);
					branched = true;
					return(true);
					break;
				}
				case 0x1d: {
					/* BGEZALanonymous_6 */
					jit_label_t temp_181 = jit_label_undefined, temp_182 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_181);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_182);
					jit_insn_label(func, &temp_181);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_182);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_183 = jit_label_undefined, temp_184 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_183);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_184);
					jit_insn_label(func, &temp_183);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_184);
					branched = true;
					return(true);
					break;
				}
				case 0x1e: {
					/* BLTZALanonymous_7 */
					jit_label_t temp_185 = jit_label_undefined, temp_186 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_185);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_186);
					jit_insn_label(func, &temp_185);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_186);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_187 = jit_label_undefined, temp_188 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_187);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_188);
					jit_insn_label(func, &temp_187);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_188);
					branched = true;
					return(true);
					break;
				}
				case 0x1f: {
					/* BGEZALanonymous_7 */
					jit_label_t temp_189 = jit_label_undefined, temp_190 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_189);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_190);
					jit_insn_label(func, &temp_189);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_190);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_191 = jit_label_undefined, temp_192 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_191);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_192);
					jit_insn_label(func, &temp_191);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_192);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x2: {
			/* J */
			jit_label_t temp_193 = jit_label_undefined, temp_194 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_193);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_194);
			jit_insn_label(func, &temp_193);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_194);
			uint32_t imm = (inst) & (0x3ffffff);
			do_lds(func);
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << (0x2));
			call_branch_block(func, cpu->GetBlockReference(target));
			branched = true;
			return(true);
			break;
		}
		case 0x3: {
			/* JAL */
			jit_label_t temp_195 = jit_label_undefined, temp_196 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_195);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_196);
			jit_insn_label(func, &temp_195);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_196);
			uint32_t imm = (inst) & (0x3ffffff);
			RES(0x1f);
			do_lds(func);
			WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << (0x2));
			call_branch_block(func, cpu->GetBlockReference(target));
			branched = true;
			return(true);
			break;
		}
		case 0x4: {
			/* BEQ */
			jit_label_t temp_197 = jit_label_undefined, temp_198 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_197);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_198);
			jit_insn_label(func, &temp_197);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_198);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
			jit_label_t temp_199 = jit_label_undefined, temp_200 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, RGPR(rs), RGPR(rt)), &temp_199);
			call_branch_block(func, cpu->GetBlockReference(pc + 8));
			jit_insn_branch(func, &temp_200);
			jit_insn_label(func, &temp_199);
			call_branch_block(func, cpu->GetBlockReference(target));
			jit_insn_label(func, &temp_200);
			branched = true;
			return(true);
			break;
		}
		case 0x5: {
			/* BNE */
			jit_label_t temp_201 = jit_label_undefined, temp_202 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_201);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_202);
			jit_insn_label(func, &temp_201);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_202);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
			jit_label_t temp_203 = jit_label_undefined, temp_204 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_ne(func, RGPR(rs), RGPR(rt)), &temp_203);
			call_branch_block(func, cpu->GetBlockReference(pc + 8));
			jit_insn_branch(func, &temp_204);
			jit_insn_label(func, &temp_203);
			call_branch_block(func, cpu->GetBlockReference(target));
			jit_insn_label(func, &temp_204);
			branched = true;
			return(true);
			break;
		}
		case 0x6: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLEZ */
					jit_label_t temp_205 = jit_label_undefined, temp_206 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_205);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_206);
					jit_insn_label(func, &temp_205);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_206);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_207 = jit_label_undefined, temp_208 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_le(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_207);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_208);
					jit_insn_label(func, &temp_207);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_208);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x7: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BGTZ */
					jit_label_t temp_209 = jit_label_undefined, temp_210 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_209);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_210);
					jit_insn_label(func, &temp_209);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_210);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_211 = jit_label_undefined, temp_212 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_gt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(0x0)), &temp_211);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_212);
					jit_insn_label(func, &temp_211);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_212);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x8: {
			/* ADDI */
			jit_label_t temp_213 = jit_label_undefined, temp_214 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_213);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_214);
			jit_insn_label(func, &temp_213);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_214);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			call_overflow(func, RGPR(rs), make_uint(eimm), 1);
			WGPR(rt, jit_insn_add(func, RGPR(rs), make_uint(eimm)));
			return(true);
			break;
		}
		case 0x9: {
			/* ADDIU */
			jit_label_t temp_215 = jit_label_undefined, temp_216 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_215);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_216);
			jit_insn_label(func, &temp_215);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_216);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_add(func, RGPR(rs), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xa: {
			/* SLTI */
			jit_label_t temp_217 = jit_label_undefined, temp_218 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_217);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_218);
			jit_insn_label(func, &temp_217);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_218);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_lt(func, jit_insn_convert(func, RGPR(rs), jit_type_int, 0), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xb: {
			/* SLTIU */
			jit_label_t temp_219 = jit_label_undefined, temp_220 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_219);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_220);
			jit_insn_label(func, &temp_219);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_220);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_lt(func, RGPR(rs), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xc: {
			/* ANDI */
			jit_label_t temp_221 = jit_label_undefined, temp_222 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_221);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_222);
			jit_insn_label(func, &temp_221);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_222);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_and(func, RGPR(rs), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xd: {
			/* ORI */
			jit_label_t temp_223 = jit_label_undefined, temp_224 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_223);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_224);
			jit_insn_label(func, &temp_223);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_224);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_or(func, RGPR(rs), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xe: {
			/* XORI */
			jit_label_t temp_225 = jit_label_undefined, temp_226 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_225);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_226);
			jit_insn_label(func, &temp_225);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_226);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			do_lds(func);
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_xor(func, RGPR(rs), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xf: {
			/* LUI */
			jit_label_t temp_227 = jit_label_undefined, temp_228 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_227);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_228);
			jit_insn_label(func, &temp_227);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_228);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			RES(rt);
			do_lds(func);
			WGPR(rt, jit_insn_shl(func, make_uint(imm), make_uint(0x10)));
			return(true);
			break;
		}
		case 0x10: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_8 */
					jit_label_t temp_229 = jit_label_undefined, temp_230 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_229);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_230);
					jit_insn_label(func, &temp_229);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_230);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_8 */
					jit_label_t temp_231 = jit_label_undefined, temp_232 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_231);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_232);
					jit_insn_label(func, &temp_231);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_232);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_8 */
					jit_label_t temp_233 = jit_label_undefined, temp_234 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_233);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_234);
					jit_insn_label(func, &temp_233);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_234);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_8 */
					jit_label_t temp_235 = jit_label_undefined, temp_236 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_235);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_236);
					jit_insn_label(func, &temp_235);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_236);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_8 */
					jit_label_t temp_237 = jit_label_undefined, temp_238 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_237);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_238);
					jit_insn_label(func, &temp_237);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_238);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_8 */
					jit_label_t temp_239 = jit_label_undefined, temp_240 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_239);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_240);
					jit_insn_label(func, &temp_239);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_240);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_8 */
					jit_label_t temp_241 = jit_label_undefined, temp_242 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_241);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_242);
					jit_insn_label(func, &temp_241);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_242);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_8 */
					jit_label_t temp_243 = jit_label_undefined, temp_244 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_243);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_244);
					jit_insn_label(func, &temp_243);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_244);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_8 */
					jit_label_t temp_245 = jit_label_undefined, temp_246 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_245);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_246);
					jit_insn_label(func, &temp_245);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_246);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_8 */
					jit_label_t temp_247 = jit_label_undefined, temp_248 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_247);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_248);
					jit_insn_label(func, &temp_247);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_248);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_8 */
					jit_label_t temp_249 = jit_label_undefined, temp_250 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_249);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_250);
					jit_insn_label(func, &temp_249);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_250);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_8 */
					jit_label_t temp_251 = jit_label_undefined, temp_252 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_251);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_252);
					jit_insn_label(func, &temp_251);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_252);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_8 */
					jit_label_t temp_253 = jit_label_undefined, temp_254 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_253);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_254);
					jit_insn_label(func, &temp_253);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_254);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_8 */
					jit_label_t temp_255 = jit_label_undefined, temp_256 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_255);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_256);
					jit_insn_label(func, &temp_255);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_256);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_8 */
					jit_label_t temp_257 = jit_label_undefined, temp_258 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_257);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_258);
					jit_insn_label(func, &temp_257);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_258);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_8 */
					jit_label_t temp_259 = jit_label_undefined, temp_260 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_259);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_260);
					jit_insn_label(func, &temp_259);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_260);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_8 */
					jit_label_t temp_261 = jit_label_undefined, temp_262 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_261);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_262);
					jit_insn_label(func, &temp_261);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_262);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_8 */
					jit_label_t temp_263 = jit_label_undefined, temp_264 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_263);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_264);
					jit_insn_label(func, &temp_263);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_264);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_8 */
					jit_label_t temp_265 = jit_label_undefined, temp_266 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_265);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_266);
					jit_insn_label(func, &temp_265);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_266);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_8 */
					jit_label_t temp_267 = jit_label_undefined, temp_268 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_267);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_268);
					jit_insn_label(func, &temp_267);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_268);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x11: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_9 */
					jit_label_t temp_269 = jit_label_undefined, temp_270 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_269);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_270);
					jit_insn_label(func, &temp_269);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_270);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_9 */
					jit_label_t temp_271 = jit_label_undefined, temp_272 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_271);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_272);
					jit_insn_label(func, &temp_271);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_272);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_9 */
					jit_label_t temp_273 = jit_label_undefined, temp_274 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_273);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_274);
					jit_insn_label(func, &temp_273);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_274);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_9 */
					jit_label_t temp_275 = jit_label_undefined, temp_276 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_275);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_276);
					jit_insn_label(func, &temp_275);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_276);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_9 */
					jit_label_t temp_277 = jit_label_undefined, temp_278 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_277);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_278);
					jit_insn_label(func, &temp_277);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_278);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_9 */
					jit_label_t temp_279 = jit_label_undefined, temp_280 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_279);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_280);
					jit_insn_label(func, &temp_279);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_280);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_9 */
					jit_label_t temp_281 = jit_label_undefined, temp_282 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_281);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_282);
					jit_insn_label(func, &temp_281);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_282);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_9 */
					jit_label_t temp_283 = jit_label_undefined, temp_284 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_283);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_284);
					jit_insn_label(func, &temp_283);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_284);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_9 */
					jit_label_t temp_285 = jit_label_undefined, temp_286 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_285);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_286);
					jit_insn_label(func, &temp_285);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_286);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_9 */
					jit_label_t temp_287 = jit_label_undefined, temp_288 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_287);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_288);
					jit_insn_label(func, &temp_287);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_288);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_9 */
					jit_label_t temp_289 = jit_label_undefined, temp_290 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_289);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_290);
					jit_insn_label(func, &temp_289);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_290);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_9 */
					jit_label_t temp_291 = jit_label_undefined, temp_292 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_291);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_292);
					jit_insn_label(func, &temp_291);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_292);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_9 */
					jit_label_t temp_293 = jit_label_undefined, temp_294 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_293);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_294);
					jit_insn_label(func, &temp_293);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_294);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_9 */
					jit_label_t temp_295 = jit_label_undefined, temp_296 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_295);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_296);
					jit_insn_label(func, &temp_295);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_296);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_9 */
					jit_label_t temp_297 = jit_label_undefined, temp_298 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_297);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_298);
					jit_insn_label(func, &temp_297);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_298);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_9 */
					jit_label_t temp_299 = jit_label_undefined, temp_300 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_299);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_300);
					jit_insn_label(func, &temp_299);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_300);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_9 */
					jit_label_t temp_301 = jit_label_undefined, temp_302 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_301);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_302);
					jit_insn_label(func, &temp_301);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_302);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_9 */
					jit_label_t temp_303 = jit_label_undefined, temp_304 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_303);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_304);
					jit_insn_label(func, &temp_303);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_304);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_9 */
					jit_label_t temp_305 = jit_label_undefined, temp_306 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_305);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_306);
					jit_insn_label(func, &temp_305);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_306);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_9 */
					jit_label_t temp_307 = jit_label_undefined, temp_308 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_307);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_308);
					jit_insn_label(func, &temp_307);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_308);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x12: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_10 */
					jit_label_t temp_309 = jit_label_undefined, temp_310 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_309);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_310);
					jit_insn_label(func, &temp_309);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_310);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_10 */
					jit_label_t temp_311 = jit_label_undefined, temp_312 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_311);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_312);
					jit_insn_label(func, &temp_311);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_312);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_10 */
					jit_label_t temp_313 = jit_label_undefined, temp_314 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_313);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_314);
					jit_insn_label(func, &temp_313);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_314);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_10 */
					jit_label_t temp_315 = jit_label_undefined, temp_316 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_315);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_316);
					jit_insn_label(func, &temp_315);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_316);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_10 */
					jit_label_t temp_317 = jit_label_undefined, temp_318 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_317);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_318);
					jit_insn_label(func, &temp_317);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_318);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_10 */
					jit_label_t temp_319 = jit_label_undefined, temp_320 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_319);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_320);
					jit_insn_label(func, &temp_319);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_320);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_10 */
					jit_label_t temp_321 = jit_label_undefined, temp_322 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_321);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_322);
					jit_insn_label(func, &temp_321);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_322);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_10 */
					jit_label_t temp_323 = jit_label_undefined, temp_324 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_323);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_324);
					jit_insn_label(func, &temp_323);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_324);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_10 */
					jit_label_t temp_325 = jit_label_undefined, temp_326 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_325);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_326);
					jit_insn_label(func, &temp_325);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_326);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_10 */
					jit_label_t temp_327 = jit_label_undefined, temp_328 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_327);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_328);
					jit_insn_label(func, &temp_327);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_328);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_10 */
					jit_label_t temp_329 = jit_label_undefined, temp_330 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_329);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_330);
					jit_insn_label(func, &temp_329);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_330);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_10 */
					jit_label_t temp_331 = jit_label_undefined, temp_332 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_331);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_332);
					jit_insn_label(func, &temp_331);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_332);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_10 */
					jit_label_t temp_333 = jit_label_undefined, temp_334 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_333);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_334);
					jit_insn_label(func, &temp_333);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_334);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_10 */
					jit_label_t temp_335 = jit_label_undefined, temp_336 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_335);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_336);
					jit_insn_label(func, &temp_335);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_336);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_10 */
					jit_label_t temp_337 = jit_label_undefined, temp_338 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_337);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_338);
					jit_insn_label(func, &temp_337);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_338);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_10 */
					jit_label_t temp_339 = jit_label_undefined, temp_340 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_339);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_340);
					jit_insn_label(func, &temp_339);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_340);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_10 */
					jit_label_t temp_341 = jit_label_undefined, temp_342 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_341);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_342);
					jit_insn_label(func, &temp_341);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_342);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_10 */
					jit_label_t temp_343 = jit_label_undefined, temp_344 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_343);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_344);
					jit_insn_label(func, &temp_343);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_344);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_10 */
					jit_label_t temp_345 = jit_label_undefined, temp_346 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_345);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_346);
					jit_insn_label(func, &temp_345);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_346);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_10 */
					jit_label_t temp_347 = jit_label_undefined, temp_348 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_347);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_348);
					jit_insn_label(func, &temp_347);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_348);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x13: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_11 */
					jit_label_t temp_349 = jit_label_undefined, temp_350 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_349);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_350);
					jit_insn_label(func, &temp_349);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_350);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_11 */
					jit_label_t temp_351 = jit_label_undefined, temp_352 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_351);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_352);
					jit_insn_label(func, &temp_351);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_352);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_11 */
					jit_label_t temp_353 = jit_label_undefined, temp_354 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_353);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_354);
					jit_insn_label(func, &temp_353);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_354);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_11 */
					jit_label_t temp_355 = jit_label_undefined, temp_356 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_355);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_356);
					jit_insn_label(func, &temp_355);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_356);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, RGPR(rt));
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_11 */
					jit_label_t temp_357 = jit_label_undefined, temp_358 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_357);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_358);
					jit_insn_label(func, &temp_357);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_358);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_11 */
					jit_label_t temp_359 = jit_label_undefined, temp_360 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_359);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_360);
					jit_insn_label(func, &temp_359);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_360);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_11 */
					jit_label_t temp_361 = jit_label_undefined, temp_362 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_361);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_362);
					jit_insn_label(func, &temp_361);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_362);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_11 */
					jit_label_t temp_363 = jit_label_undefined, temp_364 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_363);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_364);
					jit_insn_label(func, &temp_363);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_364);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_11 */
					jit_label_t temp_365 = jit_label_undefined, temp_366 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_365);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_366);
					jit_insn_label(func, &temp_365);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_366);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_11 */
					jit_label_t temp_367 = jit_label_undefined, temp_368 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_367);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_368);
					jit_insn_label(func, &temp_367);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_368);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_11 */
					jit_label_t temp_369 = jit_label_undefined, temp_370 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_369);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_370);
					jit_insn_label(func, &temp_369);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_370);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_11 */
					jit_label_t temp_371 = jit_label_undefined, temp_372 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_371);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_372);
					jit_insn_label(func, &temp_371);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_372);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_11 */
					jit_label_t temp_373 = jit_label_undefined, temp_374 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_373);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_374);
					jit_insn_label(func, &temp_373);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_374);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_11 */
					jit_label_t temp_375 = jit_label_undefined, temp_376 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_375);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_376);
					jit_insn_label(func, &temp_375);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_376);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_11 */
					jit_label_t temp_377 = jit_label_undefined, temp_378 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_377);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_378);
					jit_insn_label(func, &temp_377);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_378);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_11 */
					jit_label_t temp_379 = jit_label_undefined, temp_380 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_379);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_380);
					jit_insn_label(func, &temp_379);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_380);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_11 */
					jit_label_t temp_381 = jit_label_undefined, temp_382 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_381);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_382);
					jit_insn_label(func, &temp_381);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_382);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_11 */
					jit_label_t temp_383 = jit_label_undefined, temp_384 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_383);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_384);
					jit_insn_label(func, &temp_383);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_384);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_11 */
					jit_label_t temp_385 = jit_label_undefined, temp_386 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_385);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_386);
					jit_insn_label(func, &temp_385);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_386);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_11 */
					jit_label_t temp_387 = jit_label_undefined, temp_388 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_387);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_388);
					jit_insn_label(func, &temp_387);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_388);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x20: {
			/* LB */
			jit_label_t temp_389 = jit_label_undefined, temp_390 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_389);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_390);
			jit_insn_label(func, &temp_389);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_390);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_signext(func, 8, call_load_memory(func, 8, jit_insn_add(func, RGPR(rs), make_uint(offset))))); }
			return(true);
			break;
		}
		case 0x21: {
			/* LH */
			jit_label_t temp_391 = jit_label_undefined, temp_392 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_391);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_392);
			jit_insn_label(func, &temp_391);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_392);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_signext(func, 16, call_load_memory(func, 16, jit_insn_add(func, RGPR(rs), make_uint(offset))))); }
			return(true);
			break;
		}
		case 0x22: {
			/* LWL */
			jit_label_t temp_393 = jit_label_undefined, temp_394 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_393);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_394);
			jit_insn_label(func, &temp_393);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_394);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, RGPR(rs), make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_value_t moffset = jit_insn_and(func, offset, make_uint(0xfffffffc));
			jit_label_t temp_395 = jit_label_undefined, temp_396 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_395);
			jit_label_t temp_397 = jit_label_undefined, temp_398 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_397);
			jit_label_t temp_399 = jit_label_undefined, temp_400 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_399);
			jit_label_t temp_401 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_401);
			defer_set(func, rt, call_load_memory(func, 32, moffset));
			jit_insn_label(func, &temp_401);
			jit_insn_branch(func, &temp_400);
			jit_insn_label(func, &temp_399);
			jit_label_t temp_402 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_402);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xff)), jit_insn_shl(func, call_load_memory(func, 24, moffset), make_uint(0x8))));
			jit_insn_label(func, &temp_402);
			jit_insn_label(func, &temp_400);
			jit_insn_branch(func, &temp_398);
			jit_insn_label(func, &temp_397);
			jit_label_t temp_403 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_403);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffff)), jit_insn_shl(func, call_load_memory(func, 16, moffset), make_uint(0x10))));
			jit_insn_label(func, &temp_403);
			jit_insn_label(func, &temp_398);
			jit_insn_branch(func, &temp_396);
			jit_insn_label(func, &temp_395);
			jit_label_t temp_404 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_404);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffffff)), jit_insn_shl(func, call_load_memory(func, 8, moffset), make_uint(0x18))));
			jit_insn_label(func, &temp_404);
			jit_insn_label(func, &temp_396);
			return(true);
			break;
		}
		case 0x23: {
			/* LW */
			jit_label_t temp_405 = jit_label_undefined, temp_406 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_405);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_406);
			jit_insn_label(func, &temp_405);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_406);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_load_memory(func, 32, jit_insn_add(func, RGPR(rs), make_uint(offset)))); }
			return(true);
			break;
		}
		case 0x24: {
			/* LBU */
			jit_label_t temp_407 = jit_label_undefined, temp_408 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_407);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_408);
			jit_insn_label(func, &temp_407);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_408);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_load_memory(func, 8, jit_insn_add(func, RGPR(rs), make_uint(offset)))); }
			return(true);
			break;
		}
		case 0x25: {
			/* LHU */
			jit_label_t temp_409 = jit_label_undefined, temp_410 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_409);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_410);
			jit_insn_label(func, &temp_409);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_410);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_load_memory(func, 16, jit_insn_add(func, RGPR(rs), make_uint(offset)))); }
			return(true);
			break;
		}
		case 0x26: {
			/* LWR */
			jit_label_t temp_411 = jit_label_undefined, temp_412 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_411);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_412);
			jit_insn_label(func, &temp_411);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_412);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, RGPR(rs), make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_label_t temp_413 = jit_label_undefined, temp_414 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_413);
			jit_label_t temp_415 = jit_label_undefined, temp_416 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_415);
			jit_label_t temp_417 = jit_label_undefined, temp_418 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_417);
			jit_label_t temp_419 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_419);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffffff00)), call_load_memory(func, 8, offset)));
			jit_insn_label(func, &temp_419);
			jit_insn_branch(func, &temp_418);
			jit_insn_label(func, &temp_417);
			jit_label_t temp_420 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_420);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffff0000)), call_load_memory(func, 16, offset)));
			jit_insn_label(func, &temp_420);
			jit_insn_label(func, &temp_418);
			jit_insn_branch(func, &temp_416);
			jit_insn_label(func, &temp_415);
			jit_label_t temp_421 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_421);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xff000000)), call_load_memory(func, 24, offset)));
			jit_insn_label(func, &temp_421);
			jit_insn_label(func, &temp_416);
			jit_insn_branch(func, &temp_414);
			jit_insn_label(func, &temp_413);
			jit_label_t temp_422 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_422);
			defer_set(func, rt, call_load_memory(func, 32, offset));
			jit_insn_label(func, &temp_422);
			jit_insn_label(func, &temp_414);
			return(true);
			break;
		}
		case 0x28: {
			/* SB */
			jit_label_t temp_423 = jit_label_undefined, temp_424 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_423);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_424);
			jit_insn_label(func, &temp_423);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_424);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 8, jit_insn_add(func, RGPR(rs), make_uint(offset)), RGPR(rt), pc);
			return(true);
			break;
		}
		case 0x29: {
			/* SH */
			jit_label_t temp_425 = jit_label_undefined, temp_426 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_425);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_426);
			jit_insn_label(func, &temp_425);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_426);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 16, jit_insn_add(func, RGPR(rs), make_uint(offset)), RGPR(rt), pc);
			return(true);
			break;
		}
		case 0x2a: {
			/* SWL */
			jit_label_t temp_427 = jit_label_undefined, temp_428 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_427);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_428);
			jit_insn_label(func, &temp_427);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_428);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, RGPR(rs), make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_value_t moffset = jit_insn_and(func, offset, make_uint(0xfffffffc));
			jit_label_t temp_429 = jit_label_undefined, temp_430 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_429);
			jit_label_t temp_431 = jit_label_undefined, temp_432 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_431);
			jit_label_t temp_433 = jit_label_undefined, temp_434 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_433);
			call_store_memory(func, 32, moffset, RGPR(rt), pc);
			jit_insn_branch(func, &temp_434);
			jit_insn_label(func, &temp_433);
			call_store_memory(func, 24, moffset, jit_insn_ushr(func, RGPR(rt), make_uint(0x8)), pc);
			jit_insn_label(func, &temp_434);
			jit_insn_branch(func, &temp_432);
			jit_insn_label(func, &temp_431);
			call_store_memory(func, 16, moffset, jit_insn_ushr(func, RGPR(rt), make_uint(0x10)), pc);
			jit_insn_label(func, &temp_432);
			jit_insn_branch(func, &temp_430);
			jit_insn_label(func, &temp_429);
			call_store_memory(func, 8, moffset, jit_insn_ushr(func, RGPR(rt), make_uint(0x18)), pc);
			jit_insn_label(func, &temp_430);
			return(true);
			break;
		}
		case 0x2b: {
			/* SW */
			jit_label_t temp_435 = jit_label_undefined, temp_436 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_435);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_436);
			jit_insn_label(func, &temp_435);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_436);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 32, jit_insn_add(func, RGPR(rs), make_uint(offset)), RGPR(rt), pc);
			return(true);
			break;
		}
		case 0x2e: {
			/* SWR */
			jit_label_t temp_437 = jit_label_undefined, temp_438 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_437);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_438);
			jit_insn_label(func, &temp_437);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_438);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, RGPR(rs), make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_label_t temp_439 = jit_label_undefined, temp_440 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_439);
			jit_label_t temp_441 = jit_label_undefined, temp_442 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_441);
			jit_label_t temp_443 = jit_label_undefined, temp_444 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_443);
			call_store_memory(func, 8, offset, RGPR(rt), pc);
			jit_insn_branch(func, &temp_444);
			jit_insn_label(func, &temp_443);
			call_store_memory(func, 16, offset, RGPR(rt), pc);
			jit_insn_label(func, &temp_444);
			jit_insn_branch(func, &temp_442);
			jit_insn_label(func, &temp_441);
			call_store_memory(func, 24, offset, RGPR(rt), pc);
			jit_insn_label(func, &temp_442);
			jit_insn_branch(func, &temp_440);
			jit_insn_label(func, &temp_439);
			call_store_memory(func, 32, offset, RGPR(rt), pc);
			jit_insn_label(func, &temp_440);
			return(true);
			break;
		}
		case 0x32: {
			/* LWC2 */
			jit_label_t temp_445 = jit_label_undefined, temp_446 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_445);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_446);
			jit_insn_label(func, &temp_445);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_446);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_write_copreg(func, 0x2, rt, call_load_memory(func, 32, jit_insn_add(func, RGPR(rs), make_uint(offset))));
			return(true);
			break;
		}
		case 0x3a: {
			/* SWC2 */
			jit_label_t temp_447 = jit_label_undefined, temp_448 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_447);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_448);
			jit_insn_label(func, &temp_447);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_448);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 32, jit_insn_add(func, RGPR(rs), make_uint(offset)), call_read_copreg(func, 0x2, rt), pc);
			return(true);
			break;
		}
	}
	return false;
}
