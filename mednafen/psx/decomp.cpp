/* Autogenerated from insts.td. DO NOT EDIT */
#include "decomp.h"

// This is passed as an array of uint32_t
typedef struct state_s {
	uint32_t reg[32];
	uint32_t pc;
	uint32_t hi, lo;
	uint32_t fake; // Used for load delay stuff
} state_t;

jit_value_t _make_ptr(jit_function_t func, void *val) {
	return jit_value_create_nint_constant(func, jit_type_void_ptr, (jit_nint) val);
}
#define make_ptr(val) _make_ptr(func, (val))
jit_value_t _make_uint(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_uint, val);
}
#define make_uint(val) _make_uint(func, (val))
jit_value_t _make_ubyte(jit_function_t func, uint32_t val) {
	return jit_value_create_nint_constant(func, jit_type_ubyte, val);
}
#define make_ubyte(val) _make_ubyte(func, (val))

#define LOAD(ptr, type) jit_insn_load_relative(func, (ptr), 0, type)
#define STORE(ptr, value) jit_insn_store_relative(func, (ptr), 0, (value))
#define CAST(value, type) jit_insn_convert(func, (value), (type), 0)

#define WGPR(gpr, val) do { if(gpr != 0) jit_insn_store_elem(func, state, make_uint(gpr), (val)); } while(0)
#define WGPR_VAL(gpr, val) jit_insn_store_elem(func, state, gpr, (val))
#define RGPR(gpr) ((gpr == 0) ? make_uint(0) : jit_insn_load_elem(func, state, make_uint(gpr), jit_type_uint))
#define TGPR(name, gpr) jit_value_t name = RGPR(gpr)

#define WPC(val) jit_insn_store_relative(func, state, 32*4, (val));
#define RPC() jit_insn_load_relative(func, state, 32*4, jit_type_uint)
#define WHI(val) jit_insn_store_relative(func, state, 33*4, (val));
#define RHI() jit_insn_load_relative(func, state, 33*4, jit_type_uint)
#define WLO(val) jit_insn_store_relative(func, state, 34*4, (val));
#define RLO() jit_insn_load_relative(func, state, 34*4, jit_type_uint)

#define DEP(gpr) do { if(gpr != 0) WRA(make_ubyte(gpr), make_ubyte(0)); } while(0)
#define RES(gpr) do { if(gpr != 0) WRA(make_ubyte(gpr), make_ubyte(0)); } while(0)

jit_type_t sig_0, sig_1, sig_1_ptr, sig_2, sig_3, sig_4, sig_5;
jit_value_t state, _ReadAbsorb, _ReadAbsorbWhich, _ReadFudge, LDWhich, LDValue, LDAbsorb;

#define WRA(idx, val) jit_insn_store_relative(func, jit_insn_add(func, _ReadAbsorb, idx), 0, (val))

void do_lds(jit_function_t func) {
	jit_value_t ldw = LOAD(LDWhich, jit_type_uint);
	WGPR_VAL(ldw, LOAD(LDValue, jit_type_uint));
	WRA(ldw, jit_insn_load(func, LDAbsorb));
	STORE(_ReadFudge, CAST(ldw, jit_type_ubyte));
	STORE(_ReadAbsorbWhich, CAST(jit_insn_or(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), jit_insn_and(func, ldw, make_uint(0x1F))), jit_type_ubyte));
	STORE(LDWhich, make_uint(35));
}

void defer_set(jit_function_t func, int reg, jit_value_t val) {
    STORE(LDWhich, make_uint(reg));
	STORE(LDValue, val);
}

void call_store_memory(jit_function_t func, int size, jit_value_t ptr, jit_value_t val, uint32_t pc) {
	jit_value_t args[] = {make_uint(size), ptr, val, make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) store_memory, sig_4, args, 4, 0);
}

jit_value_t call_load_memory(jit_function_t func, int size, jit_value_t ptr, uint32_t pc) {
	jit_value_t args[] = {make_uint(size), ptr, make_uint(pc)};
	return jit_insn_call_native(func, 0, (void *) load_memory, sig_3, args, 3, 0);
}

jit_value_t call_read_copreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copreg, sig_2, args, 2, 0);
}

jit_value_t call_read_copcreg(jit_function_t func, int cop, int reg) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg)};
	return jit_insn_call_native(func, 0, (void *) read_copcreg, sig_2, args, 2, 0);
}

void call_write_copreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copreg, sig_3, args, 3, 0);
}

void call_write_copcreg(jit_function_t func, int cop, int reg, jit_value_t val) {
	jit_value_t args[] = {make_uint(cop), make_uint(reg), val};
	jit_insn_call_native(func, 0, (void *) write_copcreg, sig_3, args, 3, 0);
}

jit_value_t call_copfun(jit_function_t func, int cop, int cofun, uint32_t inst) {
	jit_value_t args[] = {make_uint(cop), make_uint(cofun), make_uint(inst)};
	return jit_insn_call_native(func, 0, (void *) copfun, sig_3, args, 3, 0);
}

void call_step(jit_function_t func, uint32_t arg) {
	jit_value_t args[] = {make_uint(arg)};
	jit_insn_call_native(func, 0, (void *) step, sig_1, args, 1, 0);
}

int32_t signext(int size, uint32_t imm) {
	if(size == 8)
		return (int8_t) ((uint8_t) imm);
	else if(size == 16)
		return (int16_t) ((uint16_t) imm);
	else if(size == 32)
		return (int32_t) imm;
	else if(imm & (1 << (size - 1)))
		return (int32_t) imm - (1 << size);
	else
		return (int32_t) imm;
}

jit_value_t call_signext(jit_function_t func, int size, jit_value_t val) {
	jit_value_t args[] = {make_uint(size), val};
	return jit_insn_call_native(func, 0, (void *) signext, sig_2, args, 2, 0);
}

void call_syscall(jit_function_t func, uint32_t code, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {make_uint(code), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) ps_syscall, sig_3, args, 3, 0);
}

void call_break(jit_function_t func, uint32_t code, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {make_uint(code), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) break_, sig_3, args, 3, 0);
}

void call_branch(jit_function_t func, jit_value_t val) {
	jit_value_t args[] = {val};
	jit_insn_call_native(func, 0, (void *) branch, sig_1, args, 1, 0);
}

void call_branch_block(jit_function_t func, block_t *block) {
	jit_value_t args[] = {make_ptr(block)};
	jit_insn_call_native(func, 0, (void *) branch_block, sig_1_ptr, args, 1, 0);
}

void call_overflow(jit_function_t func, jit_value_t a, jit_value_t b, int dir, uint32_t pc, uint32_t inst) {
	jit_value_t args[] = {a, b, make_uint(dir), make_uint(pc), make_uint(inst)};
	jit_insn_call_native(func, 0, (void *) overflow, sig_5, args, 5, 0);
}

void call_timestamp_inc(jit_function_t func, uint32_t amount) {
	jit_value_t args[] = {make_uint(amount)};
	jit_insn_call_native(func, 0, (void *) timestamp_inc, sig_1, args, 1, 0);
}

void call_muldiv_delay(jit_function_t func, jit_value_t a, jit_value_t b) {
	jit_value_t args[] = {a, b};
	jit_insn_call_native(func, 0, (void *) muldiv_delay, sig_2, args, 2, 0);
}

void call_absorb_muldiv_delay(jit_function_t func) {
	jit_insn_call_native(func, 0, (void *) absorb_muldiv_delay, sig_0, NULL, 0, 0);
}

void call_check_irq(jit_function_t func, uint32_t pc) {
	jit_value_t args[] = {make_uint(pc)};
	jit_insn_call_native(func, 0, (void *) check_irq, sig_1, args, 1, 0);
}

jit_context_t context;

jit_type_t block_sig;

void init_decompiler() {
	context = jit_context_create();
	jit_context_build_start(context);

	jit_type_t s5params[5];
	s5params[0] = jit_type_uint;
	s5params[1] = jit_type_uint;
	s5params[2] = jit_type_uint;
	s5params[3] = jit_type_uint;
	s5params[4] = jit_type_uint;
	sig_5 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s5params, 5, 1);
	
	jit_type_t s4params[4];
	s4params[0] = jit_type_uint;
	s4params[1] = jit_type_uint;
	s4params[2] = jit_type_uint;
	s4params[3] = jit_type_uint;
	sig_4 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s4params, 4, 1);
	
	jit_type_t s3params[3];
	s3params[0] = jit_type_uint;
	s3params[1] = jit_type_uint;
	s3params[2] = jit_type_uint;
	sig_3 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, s3params, 3, 1);
	
	jit_type_t sparams[2];
	sparams[0] = jit_type_uint;
	sparams[1] = jit_type_uint;
	sig_2 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, sparams, 2, 1);
	
	jit_type_t lparams[1];
	lparams[0] = jit_type_uint;
	sig_1 = jit_type_create_signature(jit_abi_cdecl, jit_type_uint, lparams, 1, 1);

	jit_type_t pparams[1];
	pparams[0] = jit_type_void_ptr;
	sig_1_ptr = jit_type_create_signature(jit_abi_cdecl, jit_type_void, pparams, 1, 1);

	sig_0 = jit_type_create_signature(jit_abi_cdecl, jit_type_void, NULL, 0, 1);

	jit_type_t params[7];
	params[0] = jit_type_create_pointer(jit_type_uint, 0); // State
	params[1] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadAbsorb
	params[2] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadAbsorbWhich
	params[3] = jit_type_create_pointer(jit_type_ubyte, 0); // ReadFudge
	params[4] = jit_type_create_pointer(jit_type_uint, 0); // LDWhich
	params[5] = jit_type_create_pointer(jit_type_uint, 0); // LDValue
	params[6] = jit_type_create_pointer(jit_type_uint, 0); // LDAbsorb
	block_sig = jit_type_create_signature(jit_abi_cdecl, jit_type_void, params, 7, 1);
}

jit_function_t create_function() {
	jit_function_t func = jit_function_create(context, block_sig);
	state = jit_value_get_param(func, 0);
	_ReadAbsorb = jit_value_get_param(func, 1);
	_ReadAbsorbWhich = jit_value_get_param(func, 2);
	_ReadFudge = jit_value_get_param(func, 3);
	LDWhich = jit_value_get_param(func, 4);
	LDValue = jit_value_get_param(func, 5);
	LDAbsorb = jit_value_get_param(func, 6);
	return func;
}

block_func_t compile_function(jit_function_t func) {
	//jit_dump_function(stdout, func, "block");
	jit_function_compile(func);
	jit_context_build_end(context);
	//jit_dump_function(stdout, func, "block");
	return (block_func_t) jit_function_to_closure(func);
}

#define INSNLOG(name) printf(#name "\n")

bool decompile(jit_function_t func, uint32_t pc, uint32_t inst, bool &branched, bool &no_delay) {
	switch((inst) >> (0x1a)) {
		case 0x0: {
			switch((inst) & (0x3f)) {
				case 0x0: {
					/* SLL */
					jit_label_t temp_114 = jit_label_undefined, temp_115 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_114);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_115);
					jit_insn_label(func, &temp_114);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_115);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					TGPR(temp_1, rt);
					do_lds(func);
					WGPR(rd, jit_insn_shl(func, temp_1, make_uint(shamt)));
					return(true);
					break;
				}
				case 0x2: {
					/* SRL */
					jit_label_t temp_116 = jit_label_undefined, temp_117 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_116);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_117);
					jit_insn_label(func, &temp_116);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_117);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					TGPR(temp_2, rt);
					do_lds(func);
					WGPR(rd, jit_insn_ushr(func, temp_2, make_uint(shamt)));
					return(true);
					break;
				}
				case 0x3: {
					/* SRA */
					jit_label_t temp_118 = jit_label_undefined, temp_119 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_118);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_119);
					jit_insn_label(func, &temp_118);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_119);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					uint32_t shamt = ((inst) >> (0x6)) & (0x1f);
					DEP(rt);
					RES(rd);
					TGPR(temp_3, rt);
					do_lds(func);
					WGPR(rd, jit_insn_sshr(func, temp_3, make_uint(shamt)));
					return(true);
					break;
				}
				case 0x4: {
					/* SLLV */
					jit_label_t temp_120 = jit_label_undefined, temp_121 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_120);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_121);
					jit_insn_label(func, &temp_120);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_121);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_4, rs);
					TGPR(temp_5, rt);
					do_lds(func);
					WGPR(rd, jit_insn_shl(func, temp_5, temp_4));
					return(true);
					break;
				}
				case 0x6: {
					/* SRLV */
					jit_label_t temp_122 = jit_label_undefined, temp_123 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_122);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_123);
					jit_insn_label(func, &temp_122);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_123);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_6, rs);
					TGPR(temp_7, rt);
					do_lds(func);
					WGPR(rd, jit_insn_ushr(func, temp_7, temp_6));
					return(true);
					break;
				}
				case 0x7: {
					/* SRAV */
					jit_label_t temp_124 = jit_label_undefined, temp_125 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_124);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_125);
					jit_insn_label(func, &temp_124);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_125);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_8, rs);
					TGPR(temp_9, rt);
					do_lds(func);
					WGPR(rd, jit_insn_sshr(func, temp_9, temp_8));
					return(true);
					break;
				}
				case 0x8: {
					/* JR */
					jit_label_t temp_126 = jit_label_undefined, temp_127 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_126);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_127);
					jit_insn_label(func, &temp_126);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_127);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					DEP(rs);
					TGPR(temp_10, rs);
					do_lds(func);
					call_branch(func, temp_10);
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* JALR */
					jit_label_t temp_128 = jit_label_undefined, temp_129 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_128);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_129);
					jit_insn_label(func, &temp_128);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_129);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					RES(rd);
					TGPR(temp_11, rs);
					do_lds(func);
					WGPR(rd, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
					call_branch(func, temp_11);
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* SYSCALL */
					jit_label_t temp_130 = jit_label_undefined, temp_131 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_130);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_131);
					jit_insn_label(func, &temp_130);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_131);
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					do_lds(func);
					call_syscall(func, code, pc, inst);
					branched = true;
					no_delay = true;
					return(true);
					break;
				}
				case 0xd: {
					/* BREAK */
					jit_label_t temp_132 = jit_label_undefined, temp_133 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_132);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_133);
					jit_insn_label(func, &temp_132);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_133);
					uint32_t code = ((inst) >> (0x6)) & (0xfffff);
					do_lds(func);
					call_break(func, code, pc, inst);
					branched = true;
					no_delay = true;
					return(true);
					break;
				}
				case 0x10: {
					/* MFHI */
					jit_label_t temp_134 = jit_label_undefined, temp_135 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_134);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_135);
					jit_insn_label(func, &temp_134);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_135);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rd);
					do_lds(func);
					WGPR(rd, RHI());
					call_absorb_muldiv_delay(func);
					return(true);
					break;
				}
				case 0x11: {
					/* MTHI */
					jit_label_t temp_136 = jit_label_undefined, temp_137 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_136);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_137);
					jit_insn_label(func, &temp_136);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_137);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rd);
					TGPR(temp_12, rd);
					do_lds(func);
					WHI(temp_12)
					return(true);
					break;
				}
				case 0x12: {
					/* MFLO */
					jit_label_t temp_138 = jit_label_undefined, temp_139 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_138);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_139);
					jit_insn_label(func, &temp_138);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_139);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rd);
					do_lds(func);
					WGPR(rd, RLO());
					call_absorb_muldiv_delay(func);
					return(true);
					break;
				}
				case 0x13: {
					/* MTLO */
					jit_label_t temp_140 = jit_label_undefined, temp_141 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_140);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_141);
					jit_insn_label(func, &temp_140);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_141);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rd);
					TGPR(temp_13, rd);
					do_lds(func);
					WLO(temp_13)
					return(true);
					break;
				}
				case 0x18: {
					/* MULT */
					jit_label_t temp_142 = jit_label_undefined, temp_143 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_142);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_143);
					jit_insn_label(func, &temp_142);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_143);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_14, rs);
					TGPR(temp_15, rt);
					do_lds(func);
					jit_value_t _t = jit_insn_mul(func, jit_insn_convert(func, temp_14, jit_type_long, 0), jit_insn_convert(func, temp_15, jit_type_long, 0));
					WLO(jit_insn_convert(func, _t, jit_type_uint, 0))
					return(true);
					break;
				}
				case 0x19: {
					/* MULTU */
					jit_label_t temp_144 = jit_label_undefined, temp_145 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_144);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_145);
					jit_insn_label(func, &temp_144);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_145);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_16, rs);
					TGPR(temp_17, rt);
					do_lds(func);
					jit_value_t _t = jit_insn_mul(func, jit_insn_convert(func, temp_16, jit_type_ulong, 0), jit_insn_convert(func, temp_17, jit_type_ulong, 0));
					WLO(jit_insn_convert(func, _t, jit_type_uint, 0))
					return(true);
					break;
				}
				case 0x1a: {
					/* DIV */
					jit_label_t temp_146 = jit_label_undefined, temp_147 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_146);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_147);
					jit_insn_label(func, &temp_146);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_147);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_18, rs);
					TGPR(temp_19, rt);
					do_lds(func);
					jit_label_t temp_148 = jit_label_undefined, temp_149 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, temp_19, make_uint(0x0)), &temp_148);
					jit_label_t temp_150 = jit_label_undefined, temp_151 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_and(func, jit_insn_eq(func, temp_18, make_uint(0x80000000)), jit_insn_eq(func, temp_19, make_uint(0xffffffff))), &temp_150);
					WLO(jit_insn_div(func, jit_insn_convert(func, temp_18, jit_type_int, 0), jit_insn_convert(func, temp_19, jit_type_int, 0)))
					WHI(jit_insn_rem(func, jit_insn_convert(func, temp_18, jit_type_int, 0), jit_insn_convert(func, temp_19, jit_type_int, 0)))
					call_muldiv_delay(func, make_uint(0x0), make_uint(0x0));
					jit_insn_branch(func, &temp_151);
					jit_insn_label(func, &temp_150);
					WLO(make_uint(0x80000000))
					WHI(make_uint(0x0))
					jit_insn_label(func, &temp_151);
					jit_insn_branch(func, &temp_149);
					jit_insn_label(func, &temp_148);
					jit_label_t temp_152 = jit_label_undefined, temp_153 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ne(func, jit_insn_and(func, temp_18, make_uint(0x80000000)), make_uint(0x0)), &temp_152);
					WLO(make_uint(0xffffffff))
					jit_insn_branch(func, &temp_153);
					jit_insn_label(func, &temp_152);
					WLO(make_uint(0x1))
					jit_insn_label(func, &temp_153);
					WHI(temp_18)
					jit_insn_label(func, &temp_149);
					return(true);
					break;
				}
				case 0x1b: {
					/* DIVU */
					jit_label_t temp_154 = jit_label_undefined, temp_155 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_154);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_155);
					jit_insn_label(func, &temp_154);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_155);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					DEP(rs);
					DEP(rt);
					TGPR(temp_20, rs);
					TGPR(temp_21, rt);
					do_lds(func);
					jit_label_t temp_156 = jit_label_undefined, temp_157 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, temp_21, make_uint(0x0)), &temp_156);
					WLO(jit_insn_div(func, temp_20, temp_21))
					WHI(jit_insn_rem(func, temp_20, temp_21))
					call_muldiv_delay(func, make_uint(0x0), make_uint(0x0));
					jit_insn_branch(func, &temp_157);
					jit_insn_label(func, &temp_156);
					WLO(make_uint(0xffffffff))
					WHI(temp_20)
					jit_insn_label(func, &temp_157);
					return(true);
					break;
				}
				case 0x20: {
					/* ADD */
					jit_label_t temp_158 = jit_label_undefined, temp_159 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_158);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_159);
					jit_insn_label(func, &temp_158);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_159);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_22, rs);
					TGPR(temp_23, rt);
					do_lds(func);
					call_overflow(func, temp_22, temp_23, 1, pc, inst);
					WGPR(rd, jit_insn_add(func, temp_22, temp_23));
					return(true);
					break;
				}
				case 0x21: {
					/* ADDU */
					jit_label_t temp_160 = jit_label_undefined, temp_161 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_160);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_161);
					jit_insn_label(func, &temp_160);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_161);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_24, rs);
					TGPR(temp_25, rt);
					do_lds(func);
					WGPR(rd, jit_insn_add(func, temp_24, temp_25));
					return(true);
					break;
				}
				case 0x22: {
					/* SUB */
					jit_label_t temp_162 = jit_label_undefined, temp_163 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_162);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_163);
					jit_insn_label(func, &temp_162);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_163);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_26, rs);
					TGPR(temp_27, rt);
					do_lds(func);
					call_overflow(func, temp_26, temp_27, -1, pc, inst);
					WGPR(rd, jit_insn_sub(func, temp_26, temp_27));
					return(true);
					break;
				}
				case 0x23: {
					/* SUBU */
					jit_label_t temp_164 = jit_label_undefined, temp_165 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_164);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_165);
					jit_insn_label(func, &temp_164);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_165);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_28, rs);
					TGPR(temp_29, rt);
					do_lds(func);
					WGPR(rd, jit_insn_sub(func, temp_28, temp_29));
					return(true);
					break;
				}
				case 0x24: {
					/* AND */
					jit_label_t temp_166 = jit_label_undefined, temp_167 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_166);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_167);
					jit_insn_label(func, &temp_166);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_167);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_30, rs);
					TGPR(temp_31, rt);
					do_lds(func);
					WGPR(rd, jit_insn_and(func, temp_30, temp_31));
					return(true);
					break;
				}
				case 0x25: {
					/* OR */
					jit_label_t temp_168 = jit_label_undefined, temp_169 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_168);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_169);
					jit_insn_label(func, &temp_168);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_169);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_32, rs);
					TGPR(temp_33, rt);
					do_lds(func);
					WGPR(rd, jit_insn_or(func, temp_32, temp_33));
					return(true);
					break;
				}
				case 0x26: {
					/* XOR */
					jit_label_t temp_170 = jit_label_undefined, temp_171 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_170);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_171);
					jit_insn_label(func, &temp_170);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_171);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_34, rs);
					TGPR(temp_35, rt);
					do_lds(func);
					WGPR(rd, jit_insn_xor(func, temp_34, temp_35));
					return(true);
					break;
				}
				case 0x27: {
					/* NOR */
					jit_label_t temp_172 = jit_label_undefined, temp_173 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_172);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_173);
					jit_insn_label(func, &temp_172);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_173);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_36, rs);
					TGPR(temp_37, rt);
					do_lds(func);
					WGPR(rd, jit_insn_not(func, jit_insn_or(func, temp_36, temp_37)));
					return(true);
					break;
				}
				case 0x2a: {
					/* SLT */
					jit_label_t temp_174 = jit_label_undefined, temp_175 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_174);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_175);
					jit_insn_label(func, &temp_174);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_175);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_38, rs);
					TGPR(temp_39, rt);
					do_lds(func);
					WGPR(rd, jit_insn_lt(func, jit_insn_convert(func, temp_38, jit_type_int, 0), jit_insn_convert(func, temp_39, jit_type_int, 0)));
					return(true);
					break;
				}
				case 0x2b: {
					/* SLTU */
					jit_label_t temp_176 = jit_label_undefined, temp_177 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_176);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_177);
					jit_insn_label(func, &temp_176);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_177);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rs);
					DEP(rt);
					RES(rd);
					TGPR(temp_40, rs);
					TGPR(temp_41, rt);
					do_lds(func);
					WGPR(rd, jit_insn_lt(func, temp_40, temp_41));
					return(true);
					break;
				}
			}
			break;
		}
		case 0x1: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLTZanonymous_0 */
					jit_label_t temp_178 = jit_label_undefined, temp_179 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_178);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_179);
					jit_insn_label(func, &temp_178);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_179);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_42, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_180 = jit_label_undefined, temp_181 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_42, jit_type_int, 0), make_uint(0x0)), &temp_180);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_181);
					jit_insn_label(func, &temp_180);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_181);
					branched = true;
					return(true);
					break;
				}
				case 0x1: {
					/* BGEZanonymous_0 */
					jit_label_t temp_182 = jit_label_undefined, temp_183 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_182);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_183);
					jit_insn_label(func, &temp_182);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_183);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_43, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_184 = jit_label_undefined, temp_185 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_43, jit_type_int, 0), make_uint(0x0)), &temp_184);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_185);
					jit_insn_label(func, &temp_184);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_185);
					branched = true;
					return(true);
					break;
				}
				case 0x2: {
					/* BLTZanonymous_1 */
					jit_label_t temp_186 = jit_label_undefined, temp_187 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_186);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_187);
					jit_insn_label(func, &temp_186);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_187);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_44, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_188 = jit_label_undefined, temp_189 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_44, jit_type_int, 0), make_uint(0x0)), &temp_188);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_189);
					jit_insn_label(func, &temp_188);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_189);
					branched = true;
					return(true);
					break;
				}
				case 0x3: {
					/* BGEZanonymous_1 */
					jit_label_t temp_190 = jit_label_undefined, temp_191 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_190);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_191);
					jit_insn_label(func, &temp_190);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_191);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_45, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_192 = jit_label_undefined, temp_193 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_45, jit_type_int, 0), make_uint(0x0)), &temp_192);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_193);
					jit_insn_label(func, &temp_192);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_193);
					branched = true;
					return(true);
					break;
				}
				case 0x4: {
					/* BLTZanonymous_2 */
					jit_label_t temp_194 = jit_label_undefined, temp_195 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_194);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_195);
					jit_insn_label(func, &temp_194);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_195);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_46, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_196 = jit_label_undefined, temp_197 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_46, jit_type_int, 0), make_uint(0x0)), &temp_196);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_197);
					jit_insn_label(func, &temp_196);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_197);
					branched = true;
					return(true);
					break;
				}
				case 0x5: {
					/* BGEZanonymous_2 */
					jit_label_t temp_198 = jit_label_undefined, temp_199 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_198);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_199);
					jit_insn_label(func, &temp_198);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_199);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_47, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_200 = jit_label_undefined, temp_201 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_47, jit_type_int, 0), make_uint(0x0)), &temp_200);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_201);
					jit_insn_label(func, &temp_200);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_201);
					branched = true;
					return(true);
					break;
				}
				case 0x6: {
					/* BLTZanonymous_3 */
					jit_label_t temp_202 = jit_label_undefined, temp_203 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_202);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_203);
					jit_insn_label(func, &temp_202);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_203);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_48, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_204 = jit_label_undefined, temp_205 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_48, jit_type_int, 0), make_uint(0x0)), &temp_204);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_205);
					jit_insn_label(func, &temp_204);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_205);
					branched = true;
					return(true);
					break;
				}
				case 0x7: {
					/* BGEZanonymous_3 */
					jit_label_t temp_206 = jit_label_undefined, temp_207 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_206);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_207);
					jit_insn_label(func, &temp_206);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_207);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_49, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_208 = jit_label_undefined, temp_209 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_49, jit_type_int, 0), make_uint(0x0)), &temp_208);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_209);
					jit_insn_label(func, &temp_208);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_209);
					branched = true;
					return(true);
					break;
				}
				case 0x8: {
					/* BLTZanonymous_4 */
					jit_label_t temp_210 = jit_label_undefined, temp_211 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_210);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_211);
					jit_insn_label(func, &temp_210);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_211);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_50, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_212 = jit_label_undefined, temp_213 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_50, jit_type_int, 0), make_uint(0x0)), &temp_212);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_213);
					jit_insn_label(func, &temp_212);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_213);
					branched = true;
					return(true);
					break;
				}
				case 0x9: {
					/* BGEZanonymous_4 */
					jit_label_t temp_214 = jit_label_undefined, temp_215 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_214);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_215);
					jit_insn_label(func, &temp_214);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_215);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_51, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_216 = jit_label_undefined, temp_217 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_51, jit_type_int, 0), make_uint(0x0)), &temp_216);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_217);
					jit_insn_label(func, &temp_216);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_217);
					branched = true;
					return(true);
					break;
				}
				case 0xa: {
					/* BLTZanonymous_5 */
					jit_label_t temp_218 = jit_label_undefined, temp_219 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_218);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_219);
					jit_insn_label(func, &temp_218);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_219);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_52, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_220 = jit_label_undefined, temp_221 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_52, jit_type_int, 0), make_uint(0x0)), &temp_220);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_221);
					jit_insn_label(func, &temp_220);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_221);
					branched = true;
					return(true);
					break;
				}
				case 0xb: {
					/* BGEZanonymous_5 */
					jit_label_t temp_222 = jit_label_undefined, temp_223 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_222);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_223);
					jit_insn_label(func, &temp_222);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_223);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_53, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_224 = jit_label_undefined, temp_225 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_53, jit_type_int, 0), make_uint(0x0)), &temp_224);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_225);
					jit_insn_label(func, &temp_224);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_225);
					branched = true;
					return(true);
					break;
				}
				case 0xc: {
					/* BLTZanonymous_6 */
					jit_label_t temp_226 = jit_label_undefined, temp_227 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_226);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_227);
					jit_insn_label(func, &temp_226);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_227);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_54, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_228 = jit_label_undefined, temp_229 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_54, jit_type_int, 0), make_uint(0x0)), &temp_228);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_229);
					jit_insn_label(func, &temp_228);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_229);
					branched = true;
					return(true);
					break;
				}
				case 0xd: {
					/* BGEZanonymous_6 */
					jit_label_t temp_230 = jit_label_undefined, temp_231 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_230);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_231);
					jit_insn_label(func, &temp_230);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_231);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_55, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_232 = jit_label_undefined, temp_233 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_55, jit_type_int, 0), make_uint(0x0)), &temp_232);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_233);
					jit_insn_label(func, &temp_232);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_233);
					branched = true;
					return(true);
					break;
				}
				case 0xe: {
					/* BLTZanonymous_7 */
					jit_label_t temp_234 = jit_label_undefined, temp_235 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_234);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_235);
					jit_insn_label(func, &temp_234);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_235);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_56, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_236 = jit_label_undefined, temp_237 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_56, jit_type_int, 0), make_uint(0x0)), &temp_236);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_237);
					jit_insn_label(func, &temp_236);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_237);
					branched = true;
					return(true);
					break;
				}
				case 0xf: {
					/* BGEZanonymous_7 */
					jit_label_t temp_238 = jit_label_undefined, temp_239 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_238);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_239);
					jit_insn_label(func, &temp_238);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_239);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_57, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_240 = jit_label_undefined, temp_241 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_57, jit_type_int, 0), make_uint(0x0)), &temp_240);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_241);
					jit_insn_label(func, &temp_240);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_241);
					branched = true;
					return(true);
					break;
				}
				case 0x10: {
					/* BLTZALanonymous_0 */
					jit_label_t temp_242 = jit_label_undefined, temp_243 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_242);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_243);
					jit_insn_label(func, &temp_242);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_243);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_58, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_244 = jit_label_undefined, temp_245 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_58, jit_type_int, 0), make_uint(0x0)), &temp_244);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_245);
					jit_insn_label(func, &temp_244);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_245);
					branched = true;
					return(true);
					break;
				}
				case 0x11: {
					/* BGEZALanonymous_0 */
					jit_label_t temp_246 = jit_label_undefined, temp_247 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_246);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_247);
					jit_insn_label(func, &temp_246);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_247);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_59, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_248 = jit_label_undefined, temp_249 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_59, jit_type_int, 0), make_uint(0x0)), &temp_248);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_249);
					jit_insn_label(func, &temp_248);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_249);
					branched = true;
					return(true);
					break;
				}
				case 0x12: {
					/* BLTZALanonymous_1 */
					jit_label_t temp_250 = jit_label_undefined, temp_251 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_250);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_251);
					jit_insn_label(func, &temp_250);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_251);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_60, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_252 = jit_label_undefined, temp_253 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_60, jit_type_int, 0), make_uint(0x0)), &temp_252);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_253);
					jit_insn_label(func, &temp_252);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_253);
					branched = true;
					return(true);
					break;
				}
				case 0x13: {
					/* BGEZALanonymous_1 */
					jit_label_t temp_254 = jit_label_undefined, temp_255 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_254);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_255);
					jit_insn_label(func, &temp_254);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_255);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_61, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_256 = jit_label_undefined, temp_257 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_61, jit_type_int, 0), make_uint(0x0)), &temp_256);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_257);
					jit_insn_label(func, &temp_256);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_257);
					branched = true;
					return(true);
					break;
				}
				case 0x14: {
					/* BLTZALanonymous_2 */
					jit_label_t temp_258 = jit_label_undefined, temp_259 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_258);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_259);
					jit_insn_label(func, &temp_258);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_259);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_62, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_260 = jit_label_undefined, temp_261 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_62, jit_type_int, 0), make_uint(0x0)), &temp_260);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_261);
					jit_insn_label(func, &temp_260);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_261);
					branched = true;
					return(true);
					break;
				}
				case 0x15: {
					/* BGEZALanonymous_2 */
					jit_label_t temp_262 = jit_label_undefined, temp_263 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_262);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_263);
					jit_insn_label(func, &temp_262);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_263);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_63, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_264 = jit_label_undefined, temp_265 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_63, jit_type_int, 0), make_uint(0x0)), &temp_264);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_265);
					jit_insn_label(func, &temp_264);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_265);
					branched = true;
					return(true);
					break;
				}
				case 0x16: {
					/* BLTZALanonymous_3 */
					jit_label_t temp_266 = jit_label_undefined, temp_267 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_266);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_267);
					jit_insn_label(func, &temp_266);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_267);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_64, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_268 = jit_label_undefined, temp_269 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_64, jit_type_int, 0), make_uint(0x0)), &temp_268);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_269);
					jit_insn_label(func, &temp_268);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_269);
					branched = true;
					return(true);
					break;
				}
				case 0x17: {
					/* BGEZALanonymous_3 */
					jit_label_t temp_270 = jit_label_undefined, temp_271 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_270);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_271);
					jit_insn_label(func, &temp_270);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_271);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_65, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_272 = jit_label_undefined, temp_273 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_65, jit_type_int, 0), make_uint(0x0)), &temp_272);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_273);
					jit_insn_label(func, &temp_272);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_273);
					branched = true;
					return(true);
					break;
				}
				case 0x18: {
					/* BLTZALanonymous_4 */
					jit_label_t temp_274 = jit_label_undefined, temp_275 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_274);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_275);
					jit_insn_label(func, &temp_274);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_275);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_66, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_276 = jit_label_undefined, temp_277 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_66, jit_type_int, 0), make_uint(0x0)), &temp_276);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_277);
					jit_insn_label(func, &temp_276);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_277);
					branched = true;
					return(true);
					break;
				}
				case 0x19: {
					/* BGEZALanonymous_4 */
					jit_label_t temp_278 = jit_label_undefined, temp_279 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_278);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_279);
					jit_insn_label(func, &temp_278);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_279);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_67, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_280 = jit_label_undefined, temp_281 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_67, jit_type_int, 0), make_uint(0x0)), &temp_280);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_281);
					jit_insn_label(func, &temp_280);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_281);
					branched = true;
					return(true);
					break;
				}
				case 0x1a: {
					/* BLTZALanonymous_5 */
					jit_label_t temp_282 = jit_label_undefined, temp_283 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_282);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_283);
					jit_insn_label(func, &temp_282);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_283);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_68, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_284 = jit_label_undefined, temp_285 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_68, jit_type_int, 0), make_uint(0x0)), &temp_284);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_285);
					jit_insn_label(func, &temp_284);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_285);
					branched = true;
					return(true);
					break;
				}
				case 0x1b: {
					/* BGEZALanonymous_5 */
					jit_label_t temp_286 = jit_label_undefined, temp_287 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_286);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_287);
					jit_insn_label(func, &temp_286);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_287);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_69, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_288 = jit_label_undefined, temp_289 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_69, jit_type_int, 0), make_uint(0x0)), &temp_288);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_289);
					jit_insn_label(func, &temp_288);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_289);
					branched = true;
					return(true);
					break;
				}
				case 0x1c: {
					/* BLTZALanonymous_6 */
					jit_label_t temp_290 = jit_label_undefined, temp_291 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_290);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_291);
					jit_insn_label(func, &temp_290);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_291);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_70, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_292 = jit_label_undefined, temp_293 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_70, jit_type_int, 0), make_uint(0x0)), &temp_292);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_293);
					jit_insn_label(func, &temp_292);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_293);
					branched = true;
					return(true);
					break;
				}
				case 0x1d: {
					/* BGEZALanonymous_6 */
					jit_label_t temp_294 = jit_label_undefined, temp_295 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_294);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_295);
					jit_insn_label(func, &temp_294);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_295);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_71, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_296 = jit_label_undefined, temp_297 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_71, jit_type_int, 0), make_uint(0x0)), &temp_296);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_297);
					jit_insn_label(func, &temp_296);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_297);
					branched = true;
					return(true);
					break;
				}
				case 0x1e: {
					/* BLTZALanonymous_7 */
					jit_label_t temp_298 = jit_label_undefined, temp_299 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_298);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_299);
					jit_insn_label(func, &temp_298);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_299);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_72, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_300 = jit_label_undefined, temp_301 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_lt(func, jit_insn_convert(func, temp_72, jit_type_int, 0), make_uint(0x0)), &temp_300);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_301);
					jit_insn_label(func, &temp_300);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_301);
					branched = true;
					return(true);
					break;
				}
				case 0x1f: {
					/* BGEZALanonymous_7 */
					jit_label_t temp_302 = jit_label_undefined, temp_303 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_302);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_303);
					jit_insn_label(func, &temp_302);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_303);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					RES(0x1f);
					TGPR(temp_73, rs);
					do_lds(func);
					WGPR(0x1f, jit_insn_add(func, make_uint(pc), make_uint(0x4)));
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_304 = jit_label_undefined, temp_305 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_ge(func, jit_insn_convert(func, temp_73, jit_type_int, 0), make_uint(0x0)), &temp_304);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_305);
					jit_insn_label(func, &temp_304);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_305);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x2: {
			/* J */
			jit_label_t temp_306 = jit_label_undefined, temp_307 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_306);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_307);
			jit_insn_label(func, &temp_306);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_307);
			uint32_t imm = (inst) & (0x3ffffff);
			do_lds(func);
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << (0x2));
			call_branch_block(func, cpu->GetBlockReference(target));
			branched = true;
			return(true);
			break;
		}
		case 0x3: {
			/* JAL */
			jit_label_t temp_308 = jit_label_undefined, temp_309 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_308);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_309);
			jit_insn_label(func, &temp_308);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_309);
			uint32_t imm = (inst) & (0x3ffffff);
			RES(0x1f);
			do_lds(func);
			WGPR(0x1f, jit_insn_add(func, jit_insn_add(func, make_uint(pc), make_uint(0x4)), make_uint(0x4)));
			uint32_t target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << (0x2));
			call_branch_block(func, cpu->GetBlockReference(target));
			branched = true;
			return(true);
			break;
		}
		case 0x4: {
			/* BEQ */
			jit_label_t temp_310 = jit_label_undefined, temp_311 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_310);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_311);
			jit_insn_label(func, &temp_310);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_311);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_74, rs);
			TGPR(temp_75, rt);
			do_lds(func);
			uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
			jit_label_t temp_312 = jit_label_undefined, temp_313 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, temp_74, temp_75), &temp_312);
			call_branch_block(func, cpu->GetBlockReference(pc + 8));
			jit_insn_branch(func, &temp_313);
			jit_insn_label(func, &temp_312);
			call_branch_block(func, cpu->GetBlockReference(target));
			jit_insn_label(func, &temp_313);
			branched = true;
			return(true);
			break;
		}
		case 0x5: {
			/* BNE */
			jit_label_t temp_314 = jit_label_undefined, temp_315 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_314);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_315);
			jit_insn_label(func, &temp_314);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_315);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_76, rs);
			TGPR(temp_77, rt);
			do_lds(func);
			uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
			jit_label_t temp_316 = jit_label_undefined, temp_317 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_ne(func, temp_76, temp_77), &temp_316);
			call_branch_block(func, cpu->GetBlockReference(pc + 8));
			jit_insn_branch(func, &temp_317);
			jit_insn_label(func, &temp_316);
			call_branch_block(func, cpu->GetBlockReference(target));
			jit_insn_label(func, &temp_317);
			branched = true;
			return(true);
			break;
		}
		case 0x6: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLEZ */
					jit_label_t temp_318 = jit_label_undefined, temp_319 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_318);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_319);
					jit_insn_label(func, &temp_318);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_319);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_78, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_320 = jit_label_undefined, temp_321 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_le(func, jit_insn_convert(func, temp_78, jit_type_int, 0), make_uint(0x0)), &temp_320);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_321);
					jit_insn_label(func, &temp_320);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_321);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x7: {
			switch(((inst) >> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BGTZ */
					jit_label_t temp_322 = jit_label_undefined, temp_323 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_322);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_323);
					jit_insn_label(func, &temp_322);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_323);
					uint32_t rs = ((inst) >> (0x15)) & (0x1f);
					uint32_t imm = (inst) & (0xffff);
					DEP(rs);
					TGPR(temp_79, rs);
					do_lds(func);
					uint32_t target = ((pc) + (0x4)) + ((signext(0x10, imm)) << (0x2));
					jit_label_t temp_324 = jit_label_undefined, temp_325 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_gt(func, jit_insn_convert(func, temp_79, jit_type_int, 0), make_uint(0x0)), &temp_324);
					call_branch_block(func, cpu->GetBlockReference(pc + 8));
					jit_insn_branch(func, &temp_325);
					jit_insn_label(func, &temp_324);
					call_branch_block(func, cpu->GetBlockReference(target));
					jit_insn_label(func, &temp_325);
					branched = true;
					return(true);
					break;
				}
			}
			break;
		}
		case 0x8: {
			/* ADDI */
			jit_label_t temp_326 = jit_label_undefined, temp_327 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_326);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_327);
			jit_insn_label(func, &temp_326);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_327);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_80, rs);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			call_overflow(func, temp_80, make_uint(eimm), 1, pc, inst);
			WGPR(rt, jit_insn_add(func, temp_80, make_uint(eimm)));
			return(true);
			break;
		}
		case 0x9: {
			/* ADDIU */
			jit_label_t temp_328 = jit_label_undefined, temp_329 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_328);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_329);
			jit_insn_label(func, &temp_328);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_329);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_81, rs);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_add(func, temp_81, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xa: {
			/* SLTI */
			jit_label_t temp_330 = jit_label_undefined, temp_331 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_330);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_331);
			jit_insn_label(func, &temp_330);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_331);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_82, rs);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_lt(func, jit_insn_convert(func, temp_82, jit_type_int, 0), make_uint(eimm)));
			return(true);
			break;
		}
		case 0xb: {
			/* SLTIU */
			jit_label_t temp_332 = jit_label_undefined, temp_333 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_332);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_333);
			jit_insn_label(func, &temp_332);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_333);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_83, rs);
			do_lds(func);
			uint32_t eimm = signext(0x10, imm);
			WGPR(rt, jit_insn_lt(func, temp_83, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xc: {
			/* ANDI */
			jit_label_t temp_334 = jit_label_undefined, temp_335 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_334);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_335);
			jit_insn_label(func, &temp_334);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_335);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_84, rs);
			do_lds(func);
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_and(func, temp_84, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xd: {
			/* ORI */
			jit_label_t temp_336 = jit_label_undefined, temp_337 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_336);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_337);
			jit_insn_label(func, &temp_336);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_337);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_85, rs);
			do_lds(func);
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_or(func, temp_85, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xe: {
			/* XORI */
			jit_label_t temp_338 = jit_label_undefined, temp_339 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_338);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_339);
			jit_insn_label(func, &temp_338);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_339);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_86, rs);
			do_lds(func);
			uint32_t eimm = imm;
			WGPR(rt, jit_insn_xor(func, temp_86, make_uint(eimm)));
			return(true);
			break;
		}
		case 0xf: {
			/* LUI */
			jit_label_t temp_340 = jit_label_undefined, temp_341 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_340);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_341);
			jit_insn_label(func, &temp_340);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_341);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			RES(rt);
			do_lds(func);
			WGPR(rt, jit_insn_shl(func, make_uint(imm), make_uint(0x10)));
			return(true);
			break;
		}
		case 0x10: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_8 */
					jit_label_t temp_342 = jit_label_undefined, temp_343 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_342);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_343);
					jit_insn_label(func, &temp_342);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_343);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_8 */
					jit_label_t temp_344 = jit_label_undefined, temp_345 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_344);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_345);
					jit_insn_label(func, &temp_344);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_345);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_8 */
					jit_label_t temp_346 = jit_label_undefined, temp_347 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_346);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_347);
					jit_insn_label(func, &temp_346);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_347);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_87, rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, temp_87);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_8 */
					jit_label_t temp_348 = jit_label_undefined, temp_349 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_348);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_349);
					jit_insn_label(func, &temp_348);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_349);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_88, rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, temp_88);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_8 */
					jit_label_t temp_350 = jit_label_undefined, temp_351 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_350);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_351);
					jit_insn_label(func, &temp_350);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_351);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_8 */
					jit_label_t temp_352 = jit_label_undefined, temp_353 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_352);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_353);
					jit_insn_label(func, &temp_352);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_353);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_8 */
					jit_label_t temp_354 = jit_label_undefined, temp_355 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_354);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_355);
					jit_insn_label(func, &temp_354);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_355);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_8 */
					jit_label_t temp_356 = jit_label_undefined, temp_357 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_356);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_357);
					jit_insn_label(func, &temp_356);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_357);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_8 */
					jit_label_t temp_358 = jit_label_undefined, temp_359 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_358);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_359);
					jit_insn_label(func, &temp_358);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_359);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_8 */
					jit_label_t temp_360 = jit_label_undefined, temp_361 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_360);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_361);
					jit_insn_label(func, &temp_360);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_361);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_8 */
					jit_label_t temp_362 = jit_label_undefined, temp_363 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_362);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_363);
					jit_insn_label(func, &temp_362);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_363);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_8 */
					jit_label_t temp_364 = jit_label_undefined, temp_365 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_364);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_365);
					jit_insn_label(func, &temp_364);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_365);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_8 */
					jit_label_t temp_366 = jit_label_undefined, temp_367 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_366);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_367);
					jit_insn_label(func, &temp_366);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_367);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_8 */
					jit_label_t temp_368 = jit_label_undefined, temp_369 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_368);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_369);
					jit_insn_label(func, &temp_368);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_369);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_8 */
					jit_label_t temp_370 = jit_label_undefined, temp_371 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_370);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_371);
					jit_insn_label(func, &temp_370);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_371);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_8 */
					jit_label_t temp_372 = jit_label_undefined, temp_373 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_372);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_373);
					jit_insn_label(func, &temp_372);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_373);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_8 */
					jit_label_t temp_374 = jit_label_undefined, temp_375 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_374);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_375);
					jit_insn_label(func, &temp_374);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_375);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_8 */
					jit_label_t temp_376 = jit_label_undefined, temp_377 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_376);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_377);
					jit_insn_label(func, &temp_376);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_377);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_8 */
					jit_label_t temp_378 = jit_label_undefined, temp_379 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_378);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_379);
					jit_insn_label(func, &temp_378);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_379);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_8 */
					jit_label_t temp_380 = jit_label_undefined, temp_381 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_380);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_381);
					jit_insn_label(func, &temp_380);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_381);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x11: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_9 */
					jit_label_t temp_382 = jit_label_undefined, temp_383 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_382);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_383);
					jit_insn_label(func, &temp_382);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_383);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_9 */
					jit_label_t temp_384 = jit_label_undefined, temp_385 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_384);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_385);
					jit_insn_label(func, &temp_384);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_385);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_9 */
					jit_label_t temp_386 = jit_label_undefined, temp_387 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_386);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_387);
					jit_insn_label(func, &temp_386);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_387);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_89, rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, temp_89);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_9 */
					jit_label_t temp_388 = jit_label_undefined, temp_389 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_388);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_389);
					jit_insn_label(func, &temp_388);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_389);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_90, rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, temp_90);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_9 */
					jit_label_t temp_390 = jit_label_undefined, temp_391 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_390);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_391);
					jit_insn_label(func, &temp_390);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_391);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_9 */
					jit_label_t temp_392 = jit_label_undefined, temp_393 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_392);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_393);
					jit_insn_label(func, &temp_392);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_393);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_9 */
					jit_label_t temp_394 = jit_label_undefined, temp_395 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_394);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_395);
					jit_insn_label(func, &temp_394);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_395);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_9 */
					jit_label_t temp_396 = jit_label_undefined, temp_397 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_396);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_397);
					jit_insn_label(func, &temp_396);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_397);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_9 */
					jit_label_t temp_398 = jit_label_undefined, temp_399 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_398);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_399);
					jit_insn_label(func, &temp_398);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_399);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_9 */
					jit_label_t temp_400 = jit_label_undefined, temp_401 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_400);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_401);
					jit_insn_label(func, &temp_400);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_401);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_9 */
					jit_label_t temp_402 = jit_label_undefined, temp_403 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_402);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_403);
					jit_insn_label(func, &temp_402);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_403);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_9 */
					jit_label_t temp_404 = jit_label_undefined, temp_405 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_404);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_405);
					jit_insn_label(func, &temp_404);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_405);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_9 */
					jit_label_t temp_406 = jit_label_undefined, temp_407 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_406);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_407);
					jit_insn_label(func, &temp_406);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_407);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_9 */
					jit_label_t temp_408 = jit_label_undefined, temp_409 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_408);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_409);
					jit_insn_label(func, &temp_408);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_409);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_9 */
					jit_label_t temp_410 = jit_label_undefined, temp_411 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_410);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_411);
					jit_insn_label(func, &temp_410);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_411);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_9 */
					jit_label_t temp_412 = jit_label_undefined, temp_413 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_412);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_413);
					jit_insn_label(func, &temp_412);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_413);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_9 */
					jit_label_t temp_414 = jit_label_undefined, temp_415 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_414);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_415);
					jit_insn_label(func, &temp_414);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_415);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_9 */
					jit_label_t temp_416 = jit_label_undefined, temp_417 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_416);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_417);
					jit_insn_label(func, &temp_416);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_417);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_9 */
					jit_label_t temp_418 = jit_label_undefined, temp_419 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_418);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_419);
					jit_insn_label(func, &temp_418);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_419);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_9 */
					jit_label_t temp_420 = jit_label_undefined, temp_421 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_420);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_421);
					jit_insn_label(func, &temp_420);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_421);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x12: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_10 */
					jit_label_t temp_422 = jit_label_undefined, temp_423 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_422);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_423);
					jit_insn_label(func, &temp_422);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_423);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_10 */
					jit_label_t temp_424 = jit_label_undefined, temp_425 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_424);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_425);
					jit_insn_label(func, &temp_424);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_425);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_10 */
					jit_label_t temp_426 = jit_label_undefined, temp_427 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_426);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_427);
					jit_insn_label(func, &temp_426);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_427);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_91, rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, temp_91);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_10 */
					jit_label_t temp_428 = jit_label_undefined, temp_429 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_428);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_429);
					jit_insn_label(func, &temp_428);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_429);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_92, rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, temp_92);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_10 */
					jit_label_t temp_430 = jit_label_undefined, temp_431 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_430);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_431);
					jit_insn_label(func, &temp_430);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_431);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_10 */
					jit_label_t temp_432 = jit_label_undefined, temp_433 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_432);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_433);
					jit_insn_label(func, &temp_432);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_433);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_10 */
					jit_label_t temp_434 = jit_label_undefined, temp_435 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_434);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_435);
					jit_insn_label(func, &temp_434);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_435);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_10 */
					jit_label_t temp_436 = jit_label_undefined, temp_437 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_436);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_437);
					jit_insn_label(func, &temp_436);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_437);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_10 */
					jit_label_t temp_438 = jit_label_undefined, temp_439 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_438);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_439);
					jit_insn_label(func, &temp_438);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_439);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_10 */
					jit_label_t temp_440 = jit_label_undefined, temp_441 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_440);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_441);
					jit_insn_label(func, &temp_440);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_441);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_10 */
					jit_label_t temp_442 = jit_label_undefined, temp_443 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_442);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_443);
					jit_insn_label(func, &temp_442);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_443);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_10 */
					jit_label_t temp_444 = jit_label_undefined, temp_445 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_444);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_445);
					jit_insn_label(func, &temp_444);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_445);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_10 */
					jit_label_t temp_446 = jit_label_undefined, temp_447 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_446);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_447);
					jit_insn_label(func, &temp_446);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_447);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_10 */
					jit_label_t temp_448 = jit_label_undefined, temp_449 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_448);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_449);
					jit_insn_label(func, &temp_448);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_449);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_10 */
					jit_label_t temp_450 = jit_label_undefined, temp_451 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_450);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_451);
					jit_insn_label(func, &temp_450);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_451);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_10 */
					jit_label_t temp_452 = jit_label_undefined, temp_453 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_452);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_453);
					jit_insn_label(func, &temp_452);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_453);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_10 */
					jit_label_t temp_454 = jit_label_undefined, temp_455 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_454);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_455);
					jit_insn_label(func, &temp_454);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_455);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_10 */
					jit_label_t temp_456 = jit_label_undefined, temp_457 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_456);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_457);
					jit_insn_label(func, &temp_456);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_457);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_10 */
					jit_label_t temp_458 = jit_label_undefined, temp_459 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_458);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_459);
					jit_insn_label(func, &temp_458);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_459);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_10 */
					jit_label_t temp_460 = jit_label_undefined, temp_461 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_460);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_461);
					jit_insn_label(func, &temp_460);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_461);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x13: {
			switch(((inst) >> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_11 */
					jit_label_t temp_462 = jit_label_undefined, temp_463 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_462);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_463);
					jit_insn_label(func, &temp_462);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_463);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					if((rt) != (0x0)) { defer_set(func, rt, call_read_copreg(func, cop, rd)); }
					return(true);
					break;
				}
				case 0x2: {
					/* CFCzanonymous_11 */
					jit_label_t temp_464 = jit_label_undefined, temp_465 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_464);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_465);
					jit_insn_label(func, &temp_464);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_465);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					RES(rt);
					do_lds(func);
					WGPR(rt, call_read_copcreg(func, cop, rd));
					return(true);
					break;
				}
				case 0x4: {
					/* MTCzanonymous_11 */
					jit_label_t temp_466 = jit_label_undefined, temp_467 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_466);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_467);
					jit_insn_label(func, &temp_466);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_467);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_93, rt);
					do_lds(func);
					call_write_copreg(func, cop, rd, temp_93);
					return(true);
					break;
				}
				case 0x6: {
					/* CTCzanonymous_11 */
					jit_label_t temp_468 = jit_label_undefined, temp_469 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_468);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_469);
					jit_insn_label(func, &temp_468);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_469);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t rt = ((inst) >> (0x10)) & (0x1f);
					uint32_t rd = ((inst) >> (0xb)) & (0x1f);
					DEP(rt);
					TGPR(temp_94, rt);
					do_lds(func);
					call_write_copcreg(func, cop, rd, temp_94);
					return(true);
					break;
				}
				case 0x10: {
					/* COPzanonymous_12anonymous_11 */
					jit_label_t temp_470 = jit_label_undefined, temp_471 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_470);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_471);
					jit_insn_label(func, &temp_470);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_471);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x11: {
					/* COPzanonymous_13anonymous_11 */
					jit_label_t temp_472 = jit_label_undefined, temp_473 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_472);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_473);
					jit_insn_label(func, &temp_472);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_473);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x12: {
					/* COPzanonymous_14anonymous_11 */
					jit_label_t temp_474 = jit_label_undefined, temp_475 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_474);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_475);
					jit_insn_label(func, &temp_474);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_475);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x13: {
					/* COPzanonymous_15anonymous_11 */
					jit_label_t temp_476 = jit_label_undefined, temp_477 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_476);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_477);
					jit_insn_label(func, &temp_476);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_477);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x14: {
					/* COPzanonymous_16anonymous_11 */
					jit_label_t temp_478 = jit_label_undefined, temp_479 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_478);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_479);
					jit_insn_label(func, &temp_478);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_479);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x15: {
					/* COPzanonymous_17anonymous_11 */
					jit_label_t temp_480 = jit_label_undefined, temp_481 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_480);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_481);
					jit_insn_label(func, &temp_480);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_481);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x16: {
					/* COPzanonymous_18anonymous_11 */
					jit_label_t temp_482 = jit_label_undefined, temp_483 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_482);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_483);
					jit_insn_label(func, &temp_482);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_483);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x17: {
					/* COPzanonymous_19anonymous_11 */
					jit_label_t temp_484 = jit_label_undefined, temp_485 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_484);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_485);
					jit_insn_label(func, &temp_484);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_485);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x18: {
					/* COPzanonymous_20anonymous_11 */
					jit_label_t temp_486 = jit_label_undefined, temp_487 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_486);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_487);
					jit_insn_label(func, &temp_486);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_487);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x19: {
					/* COPzanonymous_21anonymous_11 */
					jit_label_t temp_488 = jit_label_undefined, temp_489 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_488);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_489);
					jit_insn_label(func, &temp_488);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_489);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1a: {
					/* COPzanonymous_22anonymous_11 */
					jit_label_t temp_490 = jit_label_undefined, temp_491 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_490);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_491);
					jit_insn_label(func, &temp_490);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_491);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1b: {
					/* COPzanonymous_23anonymous_11 */
					jit_label_t temp_492 = jit_label_undefined, temp_493 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_492);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_493);
					jit_insn_label(func, &temp_492);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_493);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1c: {
					/* COPzanonymous_24anonymous_11 */
					jit_label_t temp_494 = jit_label_undefined, temp_495 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_494);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_495);
					jit_insn_label(func, &temp_494);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_495);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1d: {
					/* COPzanonymous_25anonymous_11 */
					jit_label_t temp_496 = jit_label_undefined, temp_497 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_496);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_497);
					jit_insn_label(func, &temp_496);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_497);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1e: {
					/* COPzanonymous_26anonymous_11 */
					jit_label_t temp_498 = jit_label_undefined, temp_499 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_498);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_499);
					jit_insn_label(func, &temp_498);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_499);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
				case 0x1f: {
					/* COPzanonymous_27anonymous_11 */
					jit_label_t temp_500 = jit_label_undefined, temp_501 = jit_label_undefined;
					jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_500);
					STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
					jit_insn_branch(func, &temp_501);
					jit_insn_label(func, &temp_500);
					call_timestamp_inc(func, 1);
					jit_insn_label(func, &temp_501);
					uint32_t cop = ((inst) >> (0x1a)) & (0x3);
					uint32_t cofun = (inst) & (0x1ffffff);
					do_lds(func);
					call_copfun(func, cop, cofun, inst);
					return(true);
					break;
				}
			}
			break;
		}
		case 0x20: {
			/* LB */
			jit_label_t temp_502 = jit_label_undefined, temp_503 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_502);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_503);
			jit_insn_label(func, &temp_502);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_503);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_95, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_signext(func, 8, call_load_memory(func, 8, jit_insn_add(func, temp_95, make_uint(offset)), pc))); }
			return(true);
			break;
		}
		case 0x21: {
			/* LH */
			jit_label_t temp_504 = jit_label_undefined, temp_505 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_504);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_505);
			jit_insn_label(func, &temp_504);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_505);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_96, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_signext(func, 16, call_load_memory(func, 16, jit_insn_add(func, temp_96, make_uint(offset)), pc))); }
			return(true);
			break;
		}
		case 0x22: {
			/* LWL */
			jit_label_t temp_506 = jit_label_undefined, temp_507 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_506);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_507);
			jit_insn_label(func, &temp_506);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_507);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_97, rs);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_97, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_value_t moffset = jit_insn_and(func, offset, make_uint(0xfffffffc));
			jit_label_t temp_508 = jit_label_undefined, temp_509 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_508);
			jit_label_t temp_510 = jit_label_undefined, temp_511 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_510);
			jit_label_t temp_512 = jit_label_undefined, temp_513 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_512);
			jit_label_t temp_514 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_514);
			defer_set(func, rt, call_load_memory(func, 32, moffset, pc));
			jit_insn_label(func, &temp_514);
			jit_insn_branch(func, &temp_513);
			jit_insn_label(func, &temp_512);
			jit_label_t temp_515 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_515);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xff)), jit_insn_shl(func, call_load_memory(func, 24, moffset, pc), make_uint(0x8))));
			jit_insn_label(func, &temp_515);
			jit_insn_label(func, &temp_513);
			jit_insn_branch(func, &temp_511);
			jit_insn_label(func, &temp_510);
			jit_label_t temp_516 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_516);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffff)), jit_insn_shl(func, call_load_memory(func, 16, moffset, pc), make_uint(0x10))));
			jit_insn_label(func, &temp_516);
			jit_insn_label(func, &temp_511);
			jit_insn_branch(func, &temp_509);
			jit_insn_label(func, &temp_508);
			jit_label_t temp_517 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_517);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffffff)), jit_insn_shl(func, call_load_memory(func, 8, moffset, pc), make_uint(0x18))));
			jit_insn_label(func, &temp_517);
			jit_insn_label(func, &temp_509);
			return(true);
			break;
		}
		case 0x23: {
			/* LW */
			jit_label_t temp_518 = jit_label_undefined, temp_519 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_518);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_519);
			jit_insn_label(func, &temp_518);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_519);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_98, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_load_memory(func, 32, jit_insn_add(func, temp_98, make_uint(offset)), pc)); }
			return(true);
			break;
		}
		case 0x24: {
			/* LBU */
			jit_label_t temp_520 = jit_label_undefined, temp_521 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_520);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_521);
			jit_insn_label(func, &temp_520);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_521);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_99, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_load_memory(func, 8, jit_insn_add(func, temp_99, make_uint(offset)), pc)); }
			return(true);
			break;
		}
		case 0x25: {
			/* LHU */
			jit_label_t temp_522 = jit_label_undefined, temp_523 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_522);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_523);
			jit_insn_label(func, &temp_522);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_523);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_100, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			if((rt) != (0x0)) { defer_set(func, rt, call_load_memory(func, 16, jit_insn_add(func, temp_100, make_uint(offset)), pc)); }
			return(true);
			break;
		}
		case 0x26: {
			/* LWR */
			jit_label_t temp_524 = jit_label_undefined, temp_525 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_524);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_525);
			jit_insn_label(func, &temp_524);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_525);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			RES(rt);
			TGPR(temp_101, rs);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_101, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_label_t temp_526 = jit_label_undefined, temp_527 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_526);
			jit_label_t temp_528 = jit_label_undefined, temp_529 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_528);
			jit_label_t temp_530 = jit_label_undefined, temp_531 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_530);
			jit_label_t temp_532 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_532);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffffff00)), call_load_memory(func, 8, offset, pc)));
			jit_insn_label(func, &temp_532);
			jit_insn_branch(func, &temp_531);
			jit_insn_label(func, &temp_530);
			jit_label_t temp_533 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_533);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xffff0000)), call_load_memory(func, 16, offset, pc)));
			jit_insn_label(func, &temp_533);
			jit_insn_label(func, &temp_531);
			jit_insn_branch(func, &temp_529);
			jit_insn_label(func, &temp_528);
			jit_label_t temp_534 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_534);
			defer_set(func, rt, jit_insn_or(func, jit_insn_and(func, RGPR(rt), make_uint(0xff000000)), call_load_memory(func, 24, offset, pc)));
			jit_insn_label(func, &temp_534);
			jit_insn_label(func, &temp_529);
			jit_insn_branch(func, &temp_527);
			jit_insn_label(func, &temp_526);
			jit_label_t temp_535 = jit_label_undefined;
			jit_insn_branch_if_not(func, jit_insn_ne(func, make_uint(rt), make_uint(0x0)), &temp_535);
			defer_set(func, rt, call_load_memory(func, 32, offset, pc));
			jit_insn_label(func, &temp_535);
			jit_insn_label(func, &temp_527);
			return(true);
			break;
		}
		case 0x28: {
			/* SB */
			jit_label_t temp_536 = jit_label_undefined, temp_537 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_536);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_537);
			jit_insn_label(func, &temp_536);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_537);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_102, rs);
			TGPR(temp_103, rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 8, jit_insn_add(func, temp_102, make_uint(offset)), temp_103, pc);
			return(true);
			break;
		}
		case 0x29: {
			/* SH */
			jit_label_t temp_538 = jit_label_undefined, temp_539 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_538);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_539);
			jit_insn_label(func, &temp_538);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_539);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_104, rs);
			TGPR(temp_105, rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 16, jit_insn_add(func, temp_104, make_uint(offset)), temp_105, pc);
			return(true);
			break;
		}
		case 0x2a: {
			/* SWL */
			jit_label_t temp_540 = jit_label_undefined, temp_541 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_540);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_541);
			jit_insn_label(func, &temp_540);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_541);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_106, rs);
			TGPR(temp_107, rt);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_106, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_value_t moffset = jit_insn_and(func, offset, make_uint(0xfffffffc));
			jit_label_t temp_542 = jit_label_undefined, temp_543 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_542);
			jit_label_t temp_544 = jit_label_undefined, temp_545 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_544);
			jit_label_t temp_546 = jit_label_undefined, temp_547 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_546);
			call_store_memory(func, 32, moffset, temp_107, pc);
			jit_insn_branch(func, &temp_547);
			jit_insn_label(func, &temp_546);
			call_store_memory(func, 24, moffset, jit_insn_ushr(func, temp_107, make_uint(0x8)), pc);
			jit_insn_label(func, &temp_547);
			jit_insn_branch(func, &temp_545);
			jit_insn_label(func, &temp_544);
			call_store_memory(func, 16, moffset, jit_insn_ushr(func, temp_107, make_uint(0x10)), pc);
			jit_insn_label(func, &temp_545);
			jit_insn_branch(func, &temp_543);
			jit_insn_label(func, &temp_542);
			call_store_memory(func, 8, moffset, jit_insn_ushr(func, temp_107, make_uint(0x18)), pc);
			jit_insn_label(func, &temp_543);
			return(true);
			break;
		}
		case 0x2b: {
			/* SW */
			jit_label_t temp_548 = jit_label_undefined, temp_549 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_548);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_549);
			jit_insn_label(func, &temp_548);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_549);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_108, rs);
			TGPR(temp_109, rt);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 32, jit_insn_add(func, temp_108, make_uint(offset)), temp_109, pc);
			return(true);
			break;
		}
		case 0x2e: {
			/* SWR */
			jit_label_t temp_550 = jit_label_undefined, temp_551 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_550);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_551);
			jit_insn_label(func, &temp_550);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_551);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			DEP(rt);
			TGPR(temp_110, rs);
			TGPR(temp_111, rt);
			do_lds(func);
			uint32_t simm = signext(0x10, imm);
			jit_value_t offset = jit_insn_add(func, temp_110, make_uint(simm));
			jit_value_t bottom = jit_insn_and(func, offset, make_uint(0x3));
			jit_label_t temp_552 = jit_label_undefined, temp_553 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x0)), &temp_552);
			jit_label_t temp_554 = jit_label_undefined, temp_555 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x1)), &temp_554);
			jit_label_t temp_556 = jit_label_undefined, temp_557 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, bottom, make_uint(0x2)), &temp_556);
			call_store_memory(func, 8, offset, temp_111, pc);
			jit_insn_branch(func, &temp_557);
			jit_insn_label(func, &temp_556);
			call_store_memory(func, 16, offset, temp_111, pc);
			jit_insn_label(func, &temp_557);
			jit_insn_branch(func, &temp_555);
			jit_insn_label(func, &temp_554);
			call_store_memory(func, 24, offset, temp_111, pc);
			jit_insn_label(func, &temp_555);
			jit_insn_branch(func, &temp_553);
			jit_insn_label(func, &temp_552);
			call_store_memory(func, 32, offset, temp_111, pc);
			jit_insn_label(func, &temp_553);
			return(true);
			break;
		}
		case 0x32: {
			/* LWC2 */
			jit_label_t temp_558 = jit_label_undefined, temp_559 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_558);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_559);
			jit_insn_label(func, &temp_558);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_559);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			TGPR(temp_112, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_write_copreg(func, 0x2, rt, call_load_memory(func, 32, jit_insn_add(func, temp_112, make_uint(offset)), pc));
			return(true);
			break;
		}
		case 0x3a: {
			/* SWC2 */
			jit_label_t temp_560 = jit_label_undefined, temp_561 = jit_label_undefined;
			jit_insn_branch_if(func, jit_insn_eq(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(0x0)), &temp_560);
			STORE(_ReadAbsorbWhich, jit_insn_sub(func, LOAD(_ReadAbsorbWhich, jit_type_ubyte), make_uint(1)));
			jit_insn_branch(func, &temp_561);
			jit_insn_label(func, &temp_560);
			call_timestamp_inc(func, 1);
			jit_insn_label(func, &temp_561);
			uint32_t rs = ((inst) >> (0x15)) & (0x1f);
			uint32_t rt = ((inst) >> (0x10)) & (0x1f);
			uint32_t imm = (inst) & (0xffff);
			DEP(rs);
			TGPR(temp_113, rs);
			do_lds(func);
			uint32_t offset = signext(0x10, imm);
			call_store_memory(func, 32, jit_insn_add(func, temp_113, make_uint(offset)), call_read_copreg(func, 0x2, rt), pc);
			return(true);
			break;
		}
	}
	return false;
}
